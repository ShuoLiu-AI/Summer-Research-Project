# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-40.0, 30.0), 
    point2=(40.0, -25.0))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-5.0, 5.0), 
    point2=(5.0, -5.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 2.5), point2=(
    -2.5, -1.25))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-2.5, -1.25), 
    point2=(2.5, -1.25))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(2.5, -1.25), point2=
    (0.0, 2.5))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.7, name='__profile__', 
    sheetSize=28.28, transform=
    mdb.models['Model-1'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Part-1'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 1.4), point2=(
    -1.4, -0.7))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.4, -0.7), point2=
    (1.4, -0.7))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.4, -0.7), point2=(
    0.0, 1.4))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -1.45938682556152, 0.751805305480957), value=1.4, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.840252876281738, 0.77707576751709), value=1.4, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.650721549987793, -1.42148017883301), value=1.4, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.571476406843477, 
    1.14762264666581), point2=(-0.571476406843477, -0.0648129186458534))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7])
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], ))
mdb.models['Model-1'].sketches['__profile__'].autoConstrain(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], ))
mdb.models['Model-1'].sketches['__profile__'].autoConstrain(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], ))
mdb.models['Model-1'].sketches['__profile__'].autoConstrain(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], ))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.27147640684348, 
    -0.0648129186324071), point2=(-0.221476406843477, 0.5414048640167))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9])
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], ))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-0.571476406843477, 
    0.339332269800331))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].vertices[10], 
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], 
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], 
    mdb.models['Model-1'].sketches['__profile__'].vertices[8]), vector=(
    0.571476406843477, -0.339332269800331))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].dimensions[0], ))
mdb.models['Model-1'].parts['Part-1'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.7, name='__profile__', 
    sheetSize=28.28, transform=
    mdb.models['Model-1'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Part-1'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='quartz')
mdb.models['Model-1'].materials['quartz'].Elastic(table=((74000000000.0, 0.17), 
    ))
mdb.models['Model-1'].materials['quartz'].Conductivity(table=((6.89, ), ))
mdb.models['Model-1'].materials['quartz'].Expansion(table=((0.5, ), ))
mdb.models['Model-1'].Material(name='feldspar')
mdb.models['Model-1'].materials['feldspar'].Elastic(table=((67000000000.0, 
    0.27), ))
mdb.models['Model-1'].materials['feldspar'].Conductivity(table=((2.31, ), ))
mdb.models['Model-1'].materials['feldspar'].Expansion(table=((6.0, ), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='feldspar', name=
    'feldspar', thickness=1.0)
mdb.models['Model-1'].HomogeneousSolidSection(material='quartz', name='quartz', 
    thickness=1.0)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='feldspar', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='quartz', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['Model-1'].parts['Part-1'])
mdb.models['Model-1'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(20.0, ), name='initial_temp', region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3 ]', ), )))
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-1'].EncastreBC(createStepName='Initial', localCsys=None, 
    name='BC-1', region=Region(
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#78 ]', ), )))
mdb.models['Model-1'].Temperature(createStepName='Step-1', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(500.0, ), name='high_temp', region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3 ]', ), )))
mdb.models['Model-1'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#7 ]', 
    ), ), size=0.14)
mdb.models['Model-1'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#7 ]', 
    ), ), size=0.2)
mdb.models['Model-1'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#78 ]', 
    ), ), size=0.5)
mdb.models['Model-1'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#78 ]', 
    ), ), size=0.8)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 6704, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 8.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 8.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Sun Nov  3 22:18:47 2019', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 3376, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 25.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Sun Nov  3 22:19:10 2019', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -5.90703964233398, 0.537003517150879), value=4.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -1.19404315948486, 2.3185920715332), value=4.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=2.5)
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(value=2.5)
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(-2.25, -2.5), point2=(
    -2.25, -5.0))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[6])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[6])
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices[4], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[5])
mdb.models['Model-1'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], midpoint=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4])
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices[5], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[3])
mdb.models['Model-1'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2], midpoint=
    mdb.models['Model-1'].sketches['__edit__'].vertices[5])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(-3.5, -3.75), point2=(
    -1.0, -3.75))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[7])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7])
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices[6], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[2])
mdb.models['Model-1'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1], midpoint=
    mdb.models['Model-1'].sketches['__edit__'].vertices[6])
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices[7], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[4])
mdb.models['Model-1'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[3], midpoint=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].Spot(point=(-2.25, -3.75))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices[8], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[6])
mdb.models['Model-1'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[5], midpoint=
    mdb.models['Model-1'].sketches['__edit__'].vertices[8])
mdb.models['Model-1'].sketches['__edit__'].Spot(point=(0.0, 0.0))
mdb.models['Model-1'].sketches['__edit__'].Spot(point=(-2.25, -3.75))
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], ))
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], ))
mdb.models['Model-1'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[3], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[4], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-1'].sketches['__edit__'].vertices[8], 
    mdb.models['Model-1'].sketches['__edit__'].vertices[10]), vector=(2.25, 
    3.75))
mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Part-1'].regenerate()
mdb.models['Model-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['Model-1'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#7 ]', 
    ), ), size=0.05)
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#78 ]', 
    ), ), size=0.08)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 552, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 28.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Sun Nov  3 22:27:48 2019', 
    'jobName': 'Job-1'})
# Save by dche145 on 2019_11_03-22.32.37; build 2019 2018_09_25-04.41.51 157541
# Save by dche145 on 2019_11_03-22.32.40; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='Model-square', objectToCopy=mdb.models['Model-1'])
mdb.models.changeKey(fromName='Model-1', toName='Model-triangle')
mdb.models['Model-square'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-square'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['Model-square'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-square'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-square'].parts['Part-1'].features['Partition face-1'])
mdb.models['Model-square'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[6], point1=(
    -0.307356894016266, 0.284822076559067))
mdb.models['Model-square'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[9], point1=(
    -0.00268250703811646, 0.289816707372665))
mdb.models['Model-square'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[8], point1=(
    0.282013118267059, 0.314789861440659))
mdb.models['Model-square'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[10], point1=(
    0.122184216976166, 0.0650568976998329))
mdb.models['Model-square'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[17], point1=(
    -0.0526290535926819, -0.0298416838049889))
mdb.models['Model-square'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[16], point1=(
    0.466815888881683, -0.00986292213201523))
mdb.models['Model-square'].sketches['__edit__'].Line(point1=(-0.7, 
    -0.404145188432738), point2=(-0.7, 0.7))
mdb.models['Model-square'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-square'].sketches['__edit__'].geometry[18])
mdb.models['Model-square'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[7], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[18])
mdb.models['Model-square'].sketches['__edit__'].Line(point1=(-0.7, 0.7), 
    point2=(0.7, 0.7))
mdb.models['Model-square'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-square'].sketches['__edit__'].geometry[19])
mdb.models['Model-square'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[18], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[19])
mdb.models['Model-square'].sketches['__edit__'].Line(point1=(0.7, 0.7), point2=
    (0.7, -0.404145188432738))
mdb.models['Model-square'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-square'].sketches['__edit__'].geometry[20])
mdb.models['Model-square'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[19], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[20])
mdb.models['Model-square'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -0.0576236844062805, 1.00904810428619), value=1.0, vertex1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[18], vertex2=
    mdb.models['Model-square'].sketches['__edit__'].vertices[19])
mdb.models['Model-square'].sketches['__edit__'].ObliqueDimension(textPoint=(
    1.05119132995605, 0.110009051859379), value=0.4, vertex1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[19], vertex2=
    mdb.models['Model-square'].sketches['__edit__'].vertices[6])
mdb.models['Model-square'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-square'].sketches['__edit__'].dimensions[2], ))
mdb.models['Model-square'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[15], point1=(
    -0.00767713785171509, -0.164697676897049))
mdb.models['Model-square'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[21], point1=(
    -0.00266954302787781, 0.00712664797902107))
mdb.models['Model-square'].sketches['__edit__'].Line(point1=(0.2, 
    -0.404145188432738), point2=(0.2, -0.00414518846133344))
mdb.models['Model-square'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-square'].sketches['__edit__'].geometry[23])
mdb.models['Model-square'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].geometry[7], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[23])
mdb.models['Model-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[24], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[7])
mdb.models['Model-square'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[5], entity2=
    mdb.models['Model-square'].sketches['__edit__'].vertices[6], midpoint=
    mdb.models['Model-square'].sketches['__edit__'].vertices[24])
mdb.models['Model-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[25], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[19])
mdb.models['Model-square'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[18], entity2=
    mdb.models['Model-square'].sketches['__edit__'].vertices[19], midpoint=
    mdb.models['Model-square'].sketches['__edit__'].vertices[25])
mdb.models['Model-square'].sketches['__edit__'].ConstructionLine(point1=(-0.3, 
    -0.204145188432738), point2=(0.7, -0.204145188432738))
mdb.models['Model-square'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-square'].sketches['__edit__'].geometry[24])
mdb.models['Model-square'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-square'].sketches['__edit__'].geometry[23], ))
mdb.models['Model-square'].sketches['__edit__'].Spot(point=(0.2, 
    -0.204145188447036))
mdb.models['Model-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[26], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[23])
mdb.models['Model-square'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[24], entity2=
    mdb.models['Model-square'].sketches['__edit__'].vertices[25], midpoint=
    mdb.models['Model-square'].sketches['__edit__'].vertices[26])
mdb.models['Model-square'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-square'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[18], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[19], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[20], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[22], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[23], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[24], 
    mdb.models['Model-square'].sketches['__edit__'].vertices[8], 
    mdb.models['Model-square'].sketches['__edit__'].vertices[10], 
    mdb.models['Model-square'].sketches['__edit__'].vertices[26]), vector=(
    -0.2, 0.2))
mdb.models['Model-square'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-square'].sketches['__edit__'])
del mdb.models['Model-square'].sketches['__edit__']
mdb.models['Model-square'].parts['Part-1'].regenerate()
mdb.models['Model-square'].rootAssembly.regenerate()
mdb.models['Model-square'].parts['Part-1'].generateMesh()
mdb.models['Model-square'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-square', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-square', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.jobs['Job-1']
mdb.jobs['Job-square'].submit(consistencyChecking=OFF)
mdb.jobs['Job-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\Job-square.odb', 
    'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 8744, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-square', 'memory': 27.0})
mdb.jobs['Job-square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-square', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-square']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov  3 22:41:12 2019', 'jobName': 'Job-square'})
mdb.Model(name='Model-pentagon', objectToCopy=mdb.models['Model-triangle'])
mdb.models['Model-pentagon'].parts['Part-1'].regenerate()
mdb.models['Model-pentagon'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-pentagon'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['Model-pentagon'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-pentagon'].sketches['__edit__'], upToFeature=
    mdb.models['Model-pentagon'].parts['Part-1'].features['Partition face-1'])
mdb.models['Model-pentagon'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[6], point1=(
    -0.300211787223816, 0.239470899105072))
mdb.models['Model-pentagon'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[8], point1=(
    0.268130660057068, 0.376371085643768))
mdb.models['Model-pentagon'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[15], point1=(
    0.413327813148499, 0.131610333919525))
mdb.models['Model-pentagon'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[10], point1=(
    0.139527678489685, 0.0942739844322205))
mdb.models['Model-pentagon'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[9], point1=(
    -0.00152075290679932, 0.243619382381439))
mdb.models['Model-pentagon'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[16], point1=(
    -0.059599757194519, -0.0260322690010071))
mdb.models['Model-pentagon'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[17], point1=(
    0.0150731801986694, -0.109001815319061))
mdb.models['Model-pentagon'].sketches['__edit__'].Line(point1=(-0.7, 
    -0.404145188432738), point2=(-0.955672740936279, 0.297549664974213))
mdb.models['Model-pentagon'].sketches['__edit__'].Line(point1=(
    -0.955672740936279, 0.297549664974213), point2=(-0.00566947460174561, 
    0.803665101528168))
mdb.models['Model-pentagon'].sketches['__edit__'].Line(point1=(
    -0.00566947460174561, 0.803665101528168), point2=(0.875, 0.35))
mdb.models['Model-pentagon'].sketches['__edit__'].Line(point1=(0.875, 0.35), 
    point2=(0.7, -0.404145188432738))
mdb.models['Model-pentagon'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -0.947375774383545, -0.299832284450531), value=0.6, vertex1=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[5], vertex2=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[18])
mdb.models['Model-pentagon'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -0.623793721199036, 0.612834870815277), value=0.6, vertex1=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[18], vertex2=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[19])
mdb.models['Model-pentagon'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.272279381752014, 0.654319703578949), value=0.6, vertex1=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[19], vertex2=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[20])
mdb.models['Model-pentagon'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.67468249797821, 0.202134549617767), value=0.6, vertex1=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[20], vertex2=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[6])
mdb.models['Model-pentagon'].sketches['__edit__'].dimensions[2].setValues(
    value=0.6)
mdb.models['Model-pentagon'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[18], line2=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[7], textPoint=(
    -0.100756168365479, 3.24811387062073), value=108.0)
mdb.models['Model-pentagon'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[20], line2=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[21], textPoint=(
    0.493770599365234, 3.56379199028015), value=108.0)
mdb.models['Model-pentagon'].sketches['__edit__'].ConstructionLine(point1=(
    -0.428464255885699, 3.69043788958024), point2=(0.449651039051754, 
    3.4051209346917))
mdb.models['Model-pentagon'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[18], entity2=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[22])
mdb.models['Model-pentagon'].sketches['__edit__'].ConstructionLine(point1=(
    0.0569459407392677, 4.04310904095573), point2=(0.0569459407392677, 
    3.11980397978159))
mdb.models['Model-pentagon'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[23])
mdb.models['Model-pentagon'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[19], entity2=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[23])
mdb.models['Model-pentagon'].sketches['__edit__'].Spot(point=(
    0.0569459407331432, 3.53271855594721))
mdb.models['Model-pentagon'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[21], entity2=
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[22])
mdb.models['Model-pentagon'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[18], 
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[19], 
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[20], 
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[21], 
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[22], 
    mdb.models['Model-pentagon'].sketches['__edit__'].geometry[23], 
    mdb.models['Model-pentagon'].sketches['__edit__'].vertices[21]), vector=(
    -0.0569459407331432, -3.53271855594721))
mdb.models['Model-pentagon'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-pentagon'].sketches['__edit__'])
del mdb.models['Model-pentagon'].sketches['__edit__']
mdb.models['Model-pentagon'].parts['Part-1'].regenerate()
mdb.models['Model-pentagon'].parts['Part-1'].generateMesh()
mdb.models['Model-pentagon'].rootAssembly.regenerate()
mdb.jobs['Job-square'].submit(consistencyChecking=OFF)
mdb.jobs['Job-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\Job-square.odb', 
    'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 816, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-square', 'memory': 27.0})
mdb.jobs['Job-square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-square', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-square']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-square'})
mdb.jobs['Job-square']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov  3 22:48:21 2019', 'jobName': 'Job-square'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-pentagon', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-pen', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-pen'].submit(consistencyChecking=OFF)
mdb.jobs['Job-pen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\Job-pen.odb', 
    'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 6552, 'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-pen', 'memory': 27.0})
mdb.jobs['Job-pen']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-pen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-pen']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-pen'})
mdb.jobs['Job-pen']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov  3 22:49:19 2019', 'jobName': 'Job-pen'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-triangle', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-tri', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-tri'].submit(consistencyChecking=OFF)
mdb.jobs['Job-tri']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\Job-tri.odb', 
    'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 6832, 'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-tri', 'memory': 28.0})
mdb.jobs['Job-tri']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-tri', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-tri']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-tri'})
mdb.jobs['Job-tri']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov  3 22:49:37 2019', 'jobName': 'Job-tri'})
mdb.Model(name='Model-hex', objectToCopy=mdb.models['Model-pentagon'])
mdb.models['Model-hex'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-hex'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['Model-hex'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-hex'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-hex'].parts['Part-1'].features['Partition face-1'])
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[21], point1=(
    0.442924082279205, 0.0366937220096588))
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[28], point1=(
    0.353233873844147, -0.201180428266525))
mdb.models['Model-hex'].sketches['__edit__'].Line(point1=(0.485410196631094, 
    0.157719333633036), point2=(0.485410196631094, -0.123188942670822))
mdb.models['Model-hex'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-hex'].sketches['__edit__'].geometry[29])
mdb.models['Model-hex'].sketches['__edit__'].Line(point1=(0.485410196631094, 
    -0.123188942670822), point2=(0.3, -0.412914576144059))
mdb.models['Model-hex'].sketches['__edit__'].dimensions[4].setValues(value=
    0.56)
mdb.models['Model-hex'].sketches['__edit__'].dimensions[5].setValues(value=
    0.56)
mdb.models['Model-hex'].sketches['__edit__'].dimensions[3].setValues(value=
    0.56)
mdb.models['Model-hex'].sketches['__edit__'].dimensions[2].setValues(value=
    0.56)
mdb.models['Model-hex'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-hex'].sketches['__edit__'].dimensions[6], ))
mdb.models['Model-hex'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.797785818576813, 0.00159755349159241), value=0.56, vertex1=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[20], vertex2=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[27])
mdb.models['Model-hex'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.466321527957916, -0.618435382843018), value=0.56, vertex1=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[27], vertex2=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[6])
mdb.models['Model-hex'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-hex'].sketches['__edit__'].dimensions[7], ))
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[18], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[7], textPoint=(
    -0.251200616359711, -0.314268320798874), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[29], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[20], textPoint=(
    0.271342813968658, -0.314268320798874), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[20], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[19], textPoint=(
    -0.0133265852928162, -0.232377141714096), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].undo()
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[18], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[19], textPoint=(
    -0.465484231710434, -0.00783222913742065), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].undo()
mdb.models['Model-hex'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-hex'].sketches['__edit__'].dimensions[4], ))
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[18], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[19], textPoint=(
    -0.360035866498947, -0.0773831605911255), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].undo()
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[19], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[20], textPoint=(
    -0.0885626971721649, -0.162639200687408), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -0.391446083784103, 0.539601385593414), value=0.56, vertex1=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[18], vertex2=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[19])
mdb.models['Model-hex'].sketches['__edit__'].undo()
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[29], point1=(
    0.795407772064209, -0.113280415534973))
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[31], point1=(
    0.793164253234863, -0.0684088468551636))
mdb.models['Model-hex'].sketches['__edit__'].undo()
mdb.models['Model-hex'].sketches['__edit__'].undo()
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[19], point1=(
    -0.198065385222435, 0.270030081272125))
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[18], point1=(
    -0.507022500038147, -0.0486834794282913))
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[7], point1=(
    0.227970018982887, -0.425936162471771))
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[30], point1=(
    0.397083401679993, -0.37715345621109))
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[29], point1=(
    0.780840516090393, -0.123483493924141))
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[32], point1=(
    0.787344813346863, 0.143195077776909))
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[20], point1=(
    0.608474850654602, 0.429387032985687))
mdb.models['Model-hex'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[31], point1=(
    0.280004858970642, -0.399918735027313))
mdb.models['Model-hex'].sketches['__edit__'].Line(point1=(-0.292378664016724, 
    -0.406423091888428), point2=(0.289761424064636, -0.406423091888428))
mdb.models['Model-hex'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-hex'].sketches['__edit__'].geometry[33])
mdb.models['Model-hex'].sketches['__edit__'].Line(point1=(0.289761424064636, 
    -0.406423091888428), point2=(0.501152873039246, -0.110474899411201))
mdb.models['Model-hex'].sketches['__edit__'].Line(point1=(0.501152873039246, 
    -0.110474899411201), point2=(0.501152873039246, 0.35))
mdb.models['Model-hex'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-hex'].sketches['__edit__'].geometry[35])
mdb.models['Model-hex'].sketches['__edit__'].Line(point1=(0.501152873039246, 
    0.35), point2=(0.0816220194101334, 0.650535047054291))
mdb.models['Model-hex'].sketches['__edit__'].Line(point1=(0.0816220194101334, 
    0.650535047054291), point2=(-0.578570365905762, 0.195230051875114))
mdb.models['Model-hex'].sketches['__edit__'].Line(point1=(-0.578570365905762, 
    0.195230051875114), point2=(-0.292378664016724, -0.406423091888428))
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[37], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[38], textPoint=(
    -0.376935362815857, 0.139942929148674), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[37], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[36], textPoint=(
    0.12715257704258, 0.536708891391754), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[36], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[35], textPoint=(
    0.403587698936462, 0.231003925204277), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[35], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[34], textPoint=(
    0.4296053647995, -0.0942139178514481), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[34], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[33], textPoint=(
    0.224717989563942, -0.341379523277283), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].undo()
mdb.models['Model-hex'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-hex'].sketches['__edit__'].constraints[100], ))
mdb.models['Model-hex'].sketches['__edit__'].AngularDimension(line1=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[33], line2=
    mdb.models['Model-hex'].sketches['__edit__'].geometry[38], textPoint=(
    -0.242766097187996, -0.32206916809082), value=120.0)
mdb.models['Model-hex'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -0.371346294879913, -0.00527723133563995), value=0.56, vertex1=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[36], vertex2=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[31])
mdb.models['Model-hex'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.454176247119904, -0.622089803218842), value=0.56, vertex1=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[32], vertex2=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[33])
mdb.models['Model-hex'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.608845174312592, 0.0580811351537704), value=0.56, vertex1=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[33], vertex2=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[34])
mdb.models['Model-hex'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.450449287891388, 0.440094947814941), value=0.56, vertex1=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[34], vertex2=
    mdb.models['Model-hex'].sketches['__edit__'].vertices[35])
mdb.models['Model-hex'].sketches['__edit__'].ConstructionLine(point1=(
    0.192595562102561, 0.411631301961203), point2=(0.192595562102561, 
    -0.708368698038796))
mdb.models['Model-hex'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-hex'].sketches['__edit__'].geometry[39])
mdb.models['Model-hex'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-hex'].sketches['__edit__'].vertices[35], 
    entity2=mdb.models['Model-hex'].sketches['__edit__'].geometry[39])
mdb.models['Model-hex'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-hex'].sketches['__edit__'].vertices[32], 
    entity2=mdb.models['Model-hex'].sketches['__edit__'].geometry[39])
mdb.models['Model-hex'].sketches['__edit__'].ConstructionLine(point1=(
    -0.292378664016724, -0.428368698038798), point2=(0.677569788221847, 
    0.131631301961203))
mdb.models['Model-hex'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-hex'].sketches['__edit__'].vertices[31], 
    entity2=mdb.models['Model-hex'].sketches['__edit__'].geometry[40])
mdb.models['Model-hex'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-hex'].sketches['__edit__'].vertices[34], 
    entity2=mdb.models['Model-hex'].sketches['__edit__'].geometry[40])
mdb.models['Model-hex'].sketches['__edit__'].Spot(point=(0.192595562099914, 
    -0.148368698057311))
mdb.models['Model-hex'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-hex'].sketches['__edit__'].vertices[37], 
    entity2=mdb.models['Model-hex'].sketches['__edit__'].geometry[39])
mdb.models['Model-hex'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-hex'].sketches['__edit__'].vertices[8], ))
mdb.models['Model-hex'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-hex'].sketches['__edit__'].geometry[22], ))
mdb.models['Model-hex'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-hex'].sketches['__edit__'].geometry[23], ))
mdb.models['Model-hex'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-hex'].sketches['__edit__'].geometry[33], 
    mdb.models['Model-hex'].sketches['__edit__'].geometry[34], 
    mdb.models['Model-hex'].sketches['__edit__'].geometry[35], 
    mdb.models['Model-hex'].sketches['__edit__'].geometry[36], 
    mdb.models['Model-hex'].sketches['__edit__'].geometry[37], 
    mdb.models['Model-hex'].sketches['__edit__'].geometry[38], 
    mdb.models['Model-hex'].sketches['__edit__'].geometry[39], 
    mdb.models['Model-hex'].sketches['__edit__'].geometry[40], 
    mdb.models['Model-hex'].sketches['__edit__'].vertices[10], 
    mdb.models['Model-hex'].sketches['__edit__'].vertices[21], 
    mdb.models['Model-hex'].sketches['__edit__'].vertices[37]), vector=(
    -0.192595562099914, 0.148368698057311))
mdb.models['Model-hex'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-hex'].sketches['__edit__'].dimensions[17], ))
mdb.models['Model-hex'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-hex'].sketches['__edit__'])
del mdb.models['Model-hex'].sketches['__edit__']
mdb.models['Model-hex'].parts['Part-1'].regenerate()
mdb.models['Model-hex'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-hex', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-hex', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Model-hex'].parts['Part-1'].generateMesh()
mdb.models['Model-hex'].rootAssembly.regenerate()
mdb.jobs['Job-hex'].submit(consistencyChecking=OFF)
mdb.jobs['Job-hex']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\Job-hex.odb', 
    'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 4072, 'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-hex', 'memory': 27.0})
mdb.jobs['Job-hex']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-hex', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-hex']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-hex'})
mdb.jobs['Job-hex']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov  3 23:04:24 2019', 'jobName': 'Job-hex'})
mdb.Model(name='Model-circle', objectToCopy=mdb.models['Model-hex'])
mdb.models['Model-circle'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-circle'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['Model-circle'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-circle'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-circle'].parts['Part-1'].features['Partition face-1'])
mdb.models['Model-circle'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-circle'].sketches['__edit__'].geometry[38], point1=(
    -0.746053099632263, 0.182040870189667))
mdb.models['Model-circle'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-circle'].sketches['__edit__'].geometry[37], point1=(
    -0.0665894746780396, 0.519916236400604))
mdb.models['Model-circle'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-circle'].sketches['__edit__'].geometry[36], point1=(
    0.074501633644104, 0.519916236400604))
mdb.models['Model-circle'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-circle'].sketches['__edit__'].geometry[35], point1=(
    0.471783518791199, 0.204318344593048))
mdb.models['Model-circle'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-circle'].sketches['__edit__'].geometry[34], point1=(
    0.404951214790344, -0.33405464887619))
mdb.models['Model-circle'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-circle'].sketches['__edit__'].geometry[33], point1=(
    -0.170550942420959, -0.482571244239807))
mdb.models['Model-circle'].sketches['__edit__'].CircleByCenterPerimeter(center=
    (0.0, 0.0), point1=(0.449506163597107, -0.374896705150604))
mdb.models['Model-circle'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['Model-circle'].sketches['__edit__'].geometry[45], radius=0.6, 
    textPoint=(0.408664107322693, 0.850365817546844))
mdb.models['Model-circle'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-circle'].sketches['__edit__'])
del mdb.models['Model-circle'].sketches['__edit__']
mdb.models['Model-circle'].parts['Part-1'].regenerate()
mdb.models['Model-circle'].parts['Part-1'].generateMesh()
mdb.models['Model-circle'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-circle', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-circle', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-circle'].submit(consistencyChecking=OFF)
mdb.jobs['Job-circle']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\Job-circle.odb', 
    'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 9028, 'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-circle', 'memory': 28.0})
mdb.jobs['Job-circle']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-circle', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-circle']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-circle'})
mdb.jobs['Job-circle']._Message(JOB_COMPLETED, {
    'time': 'Sun Nov  3 23:08:27 2019', 'jobName': 'Job-circle'})
# Save by dche145 on 2019_11_03-23.24.36; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-circle'].predefinedFields['high_temp']
mdb.models['Model-circle'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-circle'].parts['Part-1'].faces.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['Model-circle'].ConstrainedSketch(gridSpacing=0.7, name=
    '__profile__', sheetSize=28.28, transform=
    mdb.models['Model-circle'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-circle'].parts['Part-1'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(0.00249, -0.002077, 
    0.0)))
mdb.models['Model-circle'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-circle'].sketches['__profile__'])
del mdb.models['Model-circle'].sketches['__profile__']
mdb.models['Model-square'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-square'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-square'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-square'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-square'].parts['Part-1'].features['Shell planar-1'])
mdb.models['Model-square'].sketches['__edit__'].dimensions[1].setValues(value=
    0.2)
mdb.models['Model-square'].sketches['__edit__'].dimensions[0].setValues(value=
    0.2)
mdb.models['Model-square'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-square'].sketches['__edit__'])
del mdb.models['Model-square'].sketches['__edit__']
mdb.models['Model-square'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-square'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['Model-square'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-square'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-square'].parts['Part-1'].features['Partition face-1'])
mdb.models['Model-square'].sketches['__edit__'].dimensions[3].setValues(value=
    0.05)
mdb.models['Model-square'].sketches['__edit__'].dimensions[4].setValues(value=
    0.05)
mdb.models['Model-square'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-square'].sketches['__edit__'])
del mdb.models['Model-square'].sketches['__edit__']
mdb.models['Model-square'].parts['Part-1'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-square'].parts['Part-1'].backup()
mdb.models['Model-square'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-square'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['Model-square'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-square'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-square'].parts['Part-1'].features['Partition face-1'])
mdb.models['Model-square'].sketches['__edit__'].ConstructionLine(point1=(
    0.283333333333333, -0.283333333333333), point2=(0.483333333333333, 
    -0.483333333333333))
mdb.models['Model-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[32], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[33])
mdb.models['Model-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[34], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[33])
mdb.models['Model-square'].sketches['__edit__'].ConstructionLine(point1=(
    0.483333333333333, -0.283333333333333), point2=(0.283333333333333, 
    -0.483333333333333))
mdb.models['Model-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[31], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[34])
mdb.models['Model-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[33], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[34])
mdb.models['Model-square'].sketches['__edit__'].Spot(point=(0.383333333333212, 
    -0.383333333331393))
mdb.models['Model-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-square'].sketches['__edit__'].vertices[35], entity2=
    mdb.models['Model-square'].sketches['__edit__'].geometry[33])
mdb.models['Model-square'].sketches['__edit__'].move(objectList=(
    mdb.models['Model-square'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[18], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[19], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[20], 
    mdb.models['Model-square'].sketches['__edit__'].geometry[23], 
    mdb.models['Model-square'].sketches['__edit__'].vertices[26]), vector=(
    0.288333333333212, -0.204188144892936))
mdb.models['Model-square'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-square'].sketches['__edit__'])
del mdb.models['Model-square'].sketches['__edit__']
mdb.models['Model-square'].parts['Part-1'].regenerate()
mdb.models['Model-square'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-square'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-square'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-square'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-square'].parts['Part-1'].features['Shell planar-1'])
mdb.models['Model-square'].sketches['__edit__'].dimensions[1].setValues(value=
    0.5)
mdb.models['Model-square'].sketches['__edit__'].dimensions[0].setValues(value=
    0.5)
mdb.models['Model-square'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-square'].sketches['__edit__'])
del mdb.models['Model-square'].sketches['__edit__']
mdb.models['Model-square'].parts['Part-1'].regenerate()
mdb.models['Model-square'].materials.changeKey(fromName='feldspar', toName=
    'calcite')
mdb.models['Model-square'].materials.changeKey(fromName='quartz', toName=
    'pyrite')
del mdb.models['Model-square'].materials['calcite'].conductivity
mdb.models['Model-square'].materials['calcite'].elastic.setValues(table=((
    69900000000.0, 0.0), ))
mdb.models['Model-square'].materials['calcite'].expansion.setValues(table=((
    1.3e-05, ), ))
mdb.models['Model-square'].materials['calcite'].Conductivity(table=((4.121, ), 
    ))
mdb.models['Model-square'].materials['calcite'].SpecificHeat(table=((837.0, ), 
    ))
mdb.models['Model-square'].materials['calcite'].Density(table=((2710.0, ), ))
mdb.models['Model-square'].materials['pyrite'].Density(table=((4930.0, ), ))
mdb.models['Model-square'].materials['pyrite'].SpecificHeat(table=((70.0, ), ))
mdb.models['Model-square'].materials['calcite'].elastic.setValues(table=((
    78000000000.0, 0.27), ))
mdb.models['Model-square'].materials['calcite'].Plastic(table=((150000000.0, 
    0.0), ))
mdb.models['Model-square'].materials['calcite'].conductivity.setValues(table=((
    4.65, ), ))
mdb.models['Model-square'].materials['calcite'].expansion.setValues(table=((
    9.0, ), ))
mdb.models['Model-square'].materials['calcite'].specificHeat.setValues(table=((
    860.0, ), ))
mdb.models['Model-square'].materials['pyrite'].expansion.setValues(table=((
    10.0, ), ))
del mdb.models['Model-square'].materials['calcite'].plastic
mdb.models['Model-square'].rootAssembly.regenerate()
del mdb.models['Model-square'].predefinedFields['high_temp']
mdb.models['Model-square'].Field(createStepName='Step-1', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, fieldVariableNum=1, magnitudes=(1000000000.0, ), name=
    'microwave_heat', region=Region(
    faces=mdb.models['Model-square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )))
del mdb.models['Model-square'].predefinedFields['microwave_heat']
# Save by dche145 on 2019_12_13-12.51.29; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-square'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=CPS4T, elemLibrary=STANDARD), ElemType(elemCode=CPE3T, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=(
    mdb.models['Model-square'].parts['Part-1'].faces.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['Model-square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-square'].parts['Part-1'].edges.getSequenceFromMask((
    '[#f ]', ), ), size=0.005)
mdb.models['Model-square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-square'].parts['Part-1'].edges.getSequenceFromMask((
    '[#f ]', ), ), size=0.01)
mdb.models['Model-square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-square'].parts['Part-1'].edges.getSequenceFromMask((
    '[#f0 ]', ), ), size=0.04)
mdb.models['Model-square'].parts['Part-1'].generateMesh()
mdb.models['Model-square'].rootAssembly.regenerate()
# Save by dche145 on 2019_12_13-12.59.33; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-circle'].rootAssembly.regenerate()
mdb.models['Model-circle'].rootAssembly.regenerate()
del mdb.models['Model-square'].steps['Step-1']
mdb.models['Model-square'].CoupledTempDisplacementStep(deltmx=100.0, name=
    'Step-1', previous='Initial')
mdb.models['Model-square'].BodyHeatFlux(createStepName='Step-1', magnitude=
    1000000000.0, name='Load-1', region=Region(
    faces=mdb.models['Model-square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )))
del mdb.jobs['Job-square']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-square', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='square', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['square'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *SOLIDSECTION, file "square.inp", line 861: Material with the name "QUARTZ" has not been defined in the model.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *SOLIDSECTION, file "square.inp", line 864: Material with the name "FELDSPAR" has not been defined in the model.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE IS NO MATERIAL BY THE NAME QUARTZ', 'jobName': 'square'})
mdb.jobs['square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE IS NO MATERIAL BY THE NAME FELDSPAR', 
    'jobName': 'square'})
mdb.jobs['square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '398 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO SECTION DEFINITIONS FOUND', 'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\square.odb', 
    'jobName': 'square'})
mdb.jobs['square']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'square'})
mdb.jobs['square']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'square'})
mdb.models['Model-square'].sections.changeKey(fromName='feldspar', toName=
    'calcite')
mdb.models['Model-square'].sections.changeKey(fromName='quartz', toName=
    'pyrite')
mdb.models['Model-square'].sections['pyrite'].setValues(material='pyrite', 
    thickness=1.0)
mdb.models['Model-square'].sections['calcite'].setValues(material='calcite', 
    thickness=1.0)
mdb.models['Model-square'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-square'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-square'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-square'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='pyrite', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-square'].rootAssembly.regenerate()
del mdb.models['Model-square'].parts['Part-1'].sectionAssignments[0]
del mdb.models['Model-square'].parts['Part-1'].sectionAssignments[0]
mdb.models['Model-square'].rootAssembly.regenerate()
mdb.jobs['square'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\square.odb', 
    'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 3312, 'jobName': 'square'})
mdb.jobs['square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 21.0, 'jobName': 'square'})
mdb.jobs['square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square'})
mdb.jobs['square']._Message(MINIMUM_MEMORY, {'minimum_memory': 12.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['square']._Message(JOB_COMPLETED, {'jobName': 'square', 
    'time': 'Fri Dec 13 16:38:23 2019'})
mdb.jobs['square'].submit(consistencyChecking=OFF)
mdb.jobs['square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\square.odb', 
    'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 8404, 'jobName': 'square'})
mdb.jobs['square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 26.0, 'jobName': 'square'})
mdb.jobs['square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square'})
mdb.jobs['square']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'square', 
    'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0304842367393161, 
    'increment': 1, 'attempts': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.0304842367393161, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0609684734786321, 
    'increment': 2, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.0609684734786321, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0914527102179482, 
    'increment': 3, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.0914527102179482, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.121936946957264, 
    'increment': 4, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.121936946957264, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.15242118369658, 
    'increment': 5, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.15242118369658, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.182905420435896, 
    'increment': 6, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.182905420435896, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.213389657175213, 
    'increment': 7, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.213389657175213, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.243873893914529, 
    'increment': 8, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.243873893914529, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.274358130653845, 
    'increment': 9, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.274358130653845, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.304842367393161, 
    'increment': 10, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.304842367393161, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.335326604132477, 
    'increment': 11, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.335326604132477, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.365810840871793, 
    'increment': 12, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.365810840871793, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.396295077611109, 
    'increment': 13, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.396295077611109, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.426779314350425, 
    'increment': 14, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.426779314350425, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.457263551089741, 
    'increment': 15, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.457263551089741, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.487747787829057, 
    'increment': 16, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.487747787829057, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.518232024568373, 
    'increment': 17, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.518232024568373, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.548716261307689, 
    'increment': 18, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.548716261307689, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.579200498047005, 
    'increment': 19, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.579200498047005, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.609684734786321, 
    'increment': 20, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.609684734786321, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.640168971525638, 
    'increment': 21, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.640168971525638, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.670653208264954, 
    'increment': 22, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.670653208264954, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.70113744500427, 
    'increment': 23, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.70113744500427, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.731621681743586, 
    'increment': 24, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.731621681743586, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.762105918482902, 
    'increment': 25, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.762105918482902, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.792590155222218, 
    'increment': 26, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.792590155222218, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.823074391961534, 
    'increment': 27, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.823074391961534, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.85355862870085, 
    'increment': 28, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.85355862870085, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.884042865440166, 
    'increment': 29, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.884042865440166, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.914527102179483, 
    'increment': 30, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.914527102179483, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.945011338918799, 
    'increment': 31, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.945011338918799, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.975495575658115, 
    'increment': 32, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0304842367393161, 'stepTime': 0.975495575658115, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 1.0, 'increment': 33, 
    'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0245044243418853, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['square']._Message(JOB_COMPLETED, {'jobName': 'square', 
    'time': 'Fri Dec 13 16:39:07 2019'})
mdb.models['Model-square'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'MISES', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'RF', 'CF', 
    'CSTRESS', 'CDISP', 'NT', 'HFL', 'RFL'))
mdb.models['Model-square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-square'].parts['Part-1'].faces.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['Model-square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-square'].parts['Part-1'].edges.getSequenceFromMask((
    '[#f ]', ), ), size=0.05)
mdb.models['Model-square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-square'].parts['Part-1'].edges.getSequenceFromMask((
    '[#f ]', ), ), size=0.005)
mdb.models['Model-square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-square'].parts['Part-1'].edges.getSequenceFromMask((
    '[#f0 ]', ), ), size=0.02)
mdb.models['Model-square'].parts['Part-1'].generateMesh()
mdb.models['Model-square'].rootAssembly.regenerate()
mdb.jobs['square'].submit(consistencyChecking=OFF)
mdb.jobs['square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\square.odb', 
    'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 2620, 'jobName': 'square'})
mdb.jobs['square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 36.0, 'jobName': 'square'})
mdb.jobs['square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square'})
mdb.jobs['square']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'square', 
    'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0297636842416532, 
    'increment': 1, 'attempts': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.0297636842416532, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0595273684833065, 
    'increment': 2, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.0595273684833065, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0892910527249597, 
    'increment': 3, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.0892910527249597, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.119054736966613, 
    'increment': 4, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.119054736966613, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.148818421208266, 
    'increment': 5, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.148818421208266, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.178582105449919, 
    'increment': 6, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.178582105449919, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.208345789691573, 
    'increment': 7, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.208345789691573, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.238109473933226, 
    'increment': 8, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.238109473933226, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.267873158174879, 
    'increment': 9, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.267873158174879, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.297636842416532, 
    'increment': 10, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.297636842416532, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.327400526658186, 
    'increment': 11, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.327400526658186, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.357164210899839, 
    'increment': 12, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.357164210899839, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.386927895141492, 
    'increment': 13, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.386927895141492, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.416691579383145, 
    'increment': 14, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.416691579383145, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.446455263624799, 
    'increment': 15, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.446455263624799, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.476218947866452, 
    'increment': 16, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.476218947866452, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.505982632108105, 
    'increment': 17, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.505982632108105, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.535746316349758, 
    'increment': 18, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.535746316349758, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.565510000591412, 
    'increment': 19, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.565510000591412, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.595273684833065, 
    'increment': 20, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.595273684833065, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.625037369074718, 
    'increment': 21, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.625037369074718, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.654801053316371, 
    'increment': 22, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.654801053316371, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.684564737558024, 
    'increment': 23, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.684564737558024, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.714328421799678, 
    'increment': 24, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.714328421799678, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.744092106041331, 
    'increment': 25, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.744092106041331, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.773855790282984, 
    'increment': 26, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.773855790282984, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.803619474524637, 
    'increment': 27, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.803619474524637, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.833383158766291, 
    'increment': 28, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.833383158766291, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.863146843007944, 
    'increment': 29, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.863146843007944, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.892910527249597, 
    'increment': 30, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.892910527249597, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.92267421149125, 
    'increment': 31, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.92267421149125, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.952437895732903, 
    'increment': 32, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.952437895732903, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.982201579974557, 
    'increment': 33, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0297636842416532, 'stepTime': 0.982201579974557, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 1.0, 'increment': 34, 
    'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0177984200254434, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square', 'severe': 0, 'equilibrium': 1})
mdb.jobs['square']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['square']._Message(JOB_COMPLETED, {'jobName': 'square', 
    'time': 'Fri Dec 13 16:52:40 2019'})
mdb.models['Model-square'].loads['Load-1'].setValues(magnitude=10000000.0)
mdb.jobs['square'].submit(consistencyChecking=OFF)
mdb.jobs['square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\square.odb', 
    'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 5708, 'jobName': 'square'})
mdb.jobs['square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 36.0, 'jobName': 'square'})
mdb.jobs['square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square'})
mdb.jobs['square']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 1.0, 'increment': 1, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 'jobName': 'square', 
    'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['square']._Message(JOB_COMPLETED, {'jobName': 'square', 
    'time': 'Fri Dec 13 17:09:29 2019'})
mdb.Model(name='Model-2-square', objectToCopy=mdb.models['Model-square'])
mdb.models['Model-2-square'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-2-square'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['Model-2-square'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-2-square'].sketches['__edit__'], upToFeature=
    mdb.models['Model-2-square'].parts['Part-1'].features['Partition face-1'])
mdb.models['Model-2-square'].sketches['__edit__'].rectangle(point1=(
    0.358333333333212, -0.383333333331393), point2=(0.307583451271057, 
    -0.432768911123276))
mdb.models['Model-2-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[36], entity2=
    mdb.models['Model-2-square'].sketches['__edit__'].geometry[18])
mdb.models['Model-2-square'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[5], entity2=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[18], midpoint=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[36])
mdb.models['Model-2-square'].sketches['__edit__'].undo()
mdb.models['Model-2-square'].sketches['__edit__'].rectangle(point1=(
    0.358333333333212, -0.383333333331393), point2=(0.305954873561859, 
    -0.434978604316711))
mdb.models['Model-2-square'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[36], entity2=
    mdb.models['Model-2-square'].sketches['__edit__'].geometry[18])
mdb.models['Model-2-square'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[5], entity2=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[18], midpoint=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[36])
mdb.models['Model-2-square'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.330865919589996, -0.484800755977631), value=0.05, vertex1=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[37], vertex2=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[38])
mdb.models['Model-2-square'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.293499350547791, -0.414911389350891), value=0.05, vertex1=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[38], vertex2=
    mdb.models['Model-2-square'].sketches['__edit__'].vertices[39])
mdb.models['Model-2-square'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-2-square'].sketches['__edit__'])
del mdb.models['Model-2-square'].sketches['__edit__']
mdb.models['Model-2-square'].parts['Part-1'].regenerate()
mdb.models['Model-2-square'].rootAssembly.regenerate()
mdb.models['Model-2-square'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-2-square'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )), sectionName='pyrite', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-2-square'].rootAssembly.regenerate()
mdb.models['Model-2-square'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['Model-2-square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#5 ]', ), )))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-2-square', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='job-2-square', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Model-2-square'].parts['Part-1'].generateMesh()
mdb.models['Model-2-square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-2-square'].parts['Part-1'].faces.getSequenceFromMask((
    '[#7 ]', ), ))
mdb.models['Model-2-square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-2-square'].parts['Part-1'].edges.getSequenceFromMask((
    '[#1e1f ]', ), ), size=0.005)
mdb.models['Model-2-square'].parts['Part-1'].generateMesh()
mdb.models['Model-2-square'].rootAssembly.regenerate()
mdb.jobs['job-2-square'].submit(consistencyChecking=OFF)
mdb.jobs['job-2-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST HFL IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 101 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 102 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 103 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 104 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 105 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 106 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 107 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 108 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 109 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 110 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 111 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 112 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 113 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 114 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 115 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 116 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 117 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 118 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 119 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 120 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 121 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 122 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 123 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 124 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 125 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 126 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 127 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 128 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 129 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 130 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 131 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 132 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 133 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 134 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 135 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 136 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 137 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 138 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 139 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 140 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 141 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 142 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 143 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 144 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 145 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 146 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 147 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 148 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 149 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 150 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\job-2-square.odb', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['job-2-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST HFL IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 101 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 102 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 103 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 104 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 105 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 106 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 107 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 108 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 109 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 110 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 111 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 112 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 113 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 114 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 115 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 116 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 117 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 118 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 119 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 120 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 121 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 122 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 123 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 124 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 125 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 126 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 127 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 128 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 129 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 130 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 131 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 132 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 133 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 134 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 135 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 136 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 137 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 138 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 139 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 140 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 141 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 142 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 143 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 144 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 145 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 146 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 147 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 148 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 149 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 150 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\job-2-square.odb', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'job-2-square'})
mdb.models['Model-2-square'].parts['Part-1'].setElementType(elemTypes=(
    ElemType(elemCode=CPE8RT, elemLibrary=STANDARD), ElemType(elemCode=CPE6MT, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-2-square'].parts['Part-1'].faces.getSequenceFromMask((
    '[#7 ]', ), ), ))
mdb.models['Model-2-square'].rootAssembly.regenerate()
mdb.models['Model-2-square'].parts['Part-1'].setElementType(elemTypes=(
    ElemType(elemCode=CPE4T, elemLibrary=STANDARD), ElemType(elemCode=CPE3T, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-2-square'].parts['Part-1'].faces.getSequenceFromMask((
    '[#7 ]', ), ), ))
mdb.models['Model-2-square'].rootAssembly.regenerate()
mdb.jobs['job-2-square'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['job-2-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\job-2-square.odb', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 3212, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 30.0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MINIMUM_MEMORY, {'minimum_memory': 13.0, 
    'phase': STANDARD_PHASE, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(JOB_COMPLETED, {'jobName': 'job-2-square', 
    'time': 'Fri Dec 13 17:17:54 2019'})
mdb.jobs['job-2-square'].submit(consistencyChecking=OFF)
mdb.jobs['job-2-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\job-2-square.odb', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 844, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 37.0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 1.0, 'increment': 1, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'job-2-square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(JOB_COMPLETED, {'jobName': 'job-2-square', 
    'time': 'Fri Dec 13 17:18:08 2019'})
mdb.models['Model-square'].steps['Step-1'].setValues(deltmx=10.0)
mdb.models['Model-2-square'].steps['Step-1'].setValues(deltmx=10.0)
mdb.jobs['job-2-square'].submit(consistencyChecking=OFF)
mdb.jobs['job-2-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'job-2-square'})
mdb.jobs['square'].submit(consistencyChecking=OFF)
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\job-2-square.odb', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 8600, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 37.0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'job-2-square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 2U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.258497061441632, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'job-2-square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.197750471120045, 
    'increment': 1, 'attempts': 3, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.197750471120045, 'stepTime': 0.197750471120045, 
    'step': 1, 'jobName': 'job-2-square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.395500942240091, 
    'increment': 2, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.197750471120045, 'stepTime': 0.395500942240091, 
    'step': 1, 'jobName': 'job-2-square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'c:\\users\\dche145\\AppData\\Local\\Temp\\4\\square.odb', 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.593251413360136, 
    'increment': 3, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.197750471120045, 'stepTime': 0.593251413360136, 
    'step': 1, 'jobName': 'job-2-square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.791001884480181, 
    'increment': 4, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.197750471120045, 'stepTime': 0.791001884480181, 
    'step': 1, 'jobName': 'job-2-square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 1.0, 'increment': 5, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.208998115519819, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'job-2-square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 1872, 'jobName': 'square'})
mdb.jobs['square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(JOB_COMPLETED, {'jobName': 'job-2-square', 
    'time': 'Fri Dec 13 17:27:55 2019'})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 36.0, 'jobName': 'square'})
mdb.jobs['square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square'})
mdb.jobs['square']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'square', 
    'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.297636842416532, 
    'increment': 1, 'attempts': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.297636842416532, 'stepTime': 0.297636842416532, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.595273684833065, 
    'increment': 2, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.297636842416532, 'stepTime': 0.595273684833065, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.892910527249597, 
    'increment': 3, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.297636842416532, 'stepTime': 0.892910527249597, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 1.0, 'increment': 4, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.107089472750403, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square', 'severe': 0, 'equilibrium': 2})
mdb.jobs['square']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['square']._Message(JOB_COMPLETED, {'jobName': 'square', 
    'time': 'Fri Dec 13 17:28:01 2019'})
# Save by dche145 on 2019_12_13-17.30.13; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['job-2-square'].submit(consistencyChecking=OFF)
mdb.jobs['job-2-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'job-2-square'})
mdb.jobs['square'].submit(consistencyChecking=OFF)
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\job-2-square.odb', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square.odb', 
    'jobName': 'square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 5464, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 4496, 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'job-2-square'})
mdb.jobs['square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'job-2-square', 'memory': 37.0})
mdb.jobs['square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square', 'memory': 36.0})
mdb.jobs['square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'job-2-square', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.258497061441632, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'job-2-square', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.297636842416532, 
    'attempts': 2, 'timeIncrement': 0.297636842416532, 'increment': 1, 
    'stepTime': 0.297636842416532, 'step': 1, 'jobName': 'square', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.197750471120045, 
    'attempts': 3, 'timeIncrement': 0.197750471120045, 'increment': 1, 
    'stepTime': 0.197750471120045, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.595273684833065, 
    'attempts': 1, 'timeIncrement': 0.297636842416532, 'increment': 2, 
    'stepTime': 0.595273684833065, 'step': 1, 'jobName': 'square', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.395500942240091, 
    'attempts': 1, 'timeIncrement': 0.197750471120045, 'increment': 2, 
    'stepTime': 0.395500942240091, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.892910527249597, 
    'attempts': 1, 'timeIncrement': 0.297636842416532, 'increment': 3, 
    'stepTime': 0.892910527249597, 'step': 1, 'jobName': 'square', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.593251413360136, 
    'attempts': 1, 'timeIncrement': 0.197750471120045, 'increment': 3, 
    'stepTime': 0.593251413360136, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.107089472750403, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.791001884480181, 
    'attempts': 1, 'timeIncrement': 0.197750471120045, 'increment': 4, 
    'stepTime': 0.791001884480181, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.208998115519819, 'increment': 5, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'job-2-square', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(JOB_COMPLETED, {
    'time': 'Fri Dec 13 17:31:35 2019', 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(JOB_COMPLETED, {'time': 'Fri Dec 13 17:31:35 2019', 
    'jobName': 'square'})
mdb.models['Model-2-square'].predefinedFields['initial_temp'].setValues(region=
    Region(
    faces=mdb.models['Model-2-square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#7 ]', ), ), 
    edges=mdb.models['Model-2-square'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#1fff ]', ), ), 
    vertices=mdb.models['Model-2-square'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#fff ]', ), )))
mdb.jobs['job-2-square'].submit(consistencyChecking=OFF)
mdb.jobs['job-2-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\job-2-square.odb', 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 32, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'job-2-square', 'memory': 37.0})
mdb.jobs['job-2-square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'job-2-square', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.29720785080448, 
    'attempts': 2, 'timeIncrement': 0.29720785080448, 'increment': 1, 
    'stepTime': 0.29720785080448, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.59441570160896, 
    'attempts': 1, 'timeIncrement': 0.29720785080448, 'increment': 2, 
    'stepTime': 0.59441570160896, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.89162355241344, 
    'attempts': 1, 'timeIncrement': 0.29720785080448, 'increment': 3, 
    'stepTime': 0.89162355241344, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.10837644758656, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'job-2-square', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(JOB_COMPLETED, {
    'time': 'Fri Dec 13 17:47:47 2019', 'jobName': 'job-2-square'})
# Save by dche145 on 2019_12_13-18.18.51; build 2019 2018_09_25-04.41.51 157541
# Save by dche145 on 2019_12_13-18.30.52; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['square'].submit(consistencyChecking=OFF)
mdb.jobs['job-2-square'].submit(consistencyChecking=OFF)
mdb.jobs['job-2-square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'job-2-square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'job-2-square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'job-2-square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'job-2-square'})
mdb.jobs['square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'job-2-square'})
mdb.jobs['square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\square.odb', 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\job-2-square.odb', 
    'jobName': 'job-2-square'})
mdb.jobs['square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 5332, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 3460, 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'job-2-square'})
mdb.jobs['square']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'job-2-square', 'memory': 37.0})
mdb.jobs['square']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square', 'memory': 36.0})
mdb.jobs['job-2-square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'job-2-square', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.297636842416532, 
    'attempts': 2, 'timeIncrement': 0.297636842416532, 'increment': 1, 
    'stepTime': 0.297636842416532, 'step': 1, 'jobName': 'square', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.29720785080448, 
    'attempts': 2, 'timeIncrement': 0.29720785080448, 'increment': 1, 
    'stepTime': 0.29720785080448, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.595273684833065, 
    'attempts': 1, 'timeIncrement': 0.297636842416532, 'increment': 2, 
    'stepTime': 0.595273684833065, 'step': 1, 'jobName': 'square', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.59441570160896, 
    'attempts': 1, 'timeIncrement': 0.29720785080448, 'increment': 2, 
    'stepTime': 0.59441570160896, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 0.892910527249597, 
    'attempts': 1, 'timeIncrement': 0.297636842416532, 'increment': 3, 
    'stepTime': 0.892910527249597, 'step': 1, 'jobName': 'square', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 0.89162355241344, 
    'attempts': 1, 'timeIncrement': 0.29720785080448, 'increment': 3, 
    'stepTime': 0.89162355241344, 'step': 1, 'jobName': 'job-2-square', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square'})
mdb.jobs['square']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.107089472750403, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['job-2-square']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.10837644758656, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'job-2-square', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square'})
mdb.jobs['job-2-square']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'job-2-square'})
mdb.jobs['job-2-square']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'job-2-square'})
mdb.jobs['square']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:29:58 2019', 
    'jobName': 'square'})
mdb.jobs['job-2-square']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 14 17:29:58 2019', 'jobName': 'job-2-square'})
mdb.Model(name='Model-2-square-dist-5', objectToCopy=
    mdb.models['Model-2-square'])
mdb.models['Model-2-square-dist-5'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['Model-2-square-dist-5'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['Model-2-square-dist-5'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'], upToFeature=
    mdb.models['Model-2-square-dist-5'].parts['Part-1'].features['Partition face-1'])
mdb.models['Model-2-square-dist-5'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].geometry[39], 
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].geometry[40], 
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].geometry[41], 
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].geometry[42], 
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].dimensions[6], 
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].constraints[153], 
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].constraints[154], 
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].constraints[157]))
mdb.models['Model-2-square-dist-5'].sketches['__edit__'].rectangle(point1=(
    0.276614308357239, -0.360884457826614), point2=(0.328730225563049, 
    -0.409659594297409))
mdb.models['Model-2-square-dist-5'].sketches['__edit__'].ObliqueDimension(
    textPoint=(0.292649984359741, -0.336830973625183), value=0.05, vertex1=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].vertices[43], 
    vertex2=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].vertices[40])
mdb.models['Model-2-square-dist-5'].sketches['__edit__'].ObliqueDimension(
    textPoint=(0.259910523891449, -0.38026088476181), value=0.05, vertex1=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].vertices[40], 
    vertex2=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].vertices[41])
mdb.models['Model-2-square-dist-5'].sketches['__edit__'].DistanceDimension(
    entity1=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].geometry[49], 
    entity2=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].geometry[18], 
    textPoint=(0.34409773349762, -0.319458991289139), value=0.01)
mdb.models['Model-2-square-dist-5'].sketches['__edit__'].ParallelConstraint(
    entity1=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].geometry[19], 
    entity2=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].geometry[50])
mdb.models['Model-2-square-dist-5'].sketches['__edit__'].DistanceDimension(
    entity1=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].geometry[50], 
    entity2=
    mdb.models['Model-2-square-dist-5'].sketches['__edit__'].vertices[25], 
    textPoint=(0.234520703554153, -0.362888932228088), value=0.0)
mdb.models['Model-2-square-dist-5'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-2-square-dist-5'].sketches['__edit__'])
del mdb.models['Model-2-square-dist-5'].sketches['__edit__']
mdb.models['Model-2-square-dist-5'].parts['Part-1'].regenerate()
# Save by dche145 on 2019_12_14-17.33.29; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models.changeKey(fromName='Model-2-square-dist-5', toName=
    '2-square-dist-1')
mdb.models.changeKey(fromName='Model-2-square', toName='2-square-touch')
mdb.models.changeKey(fromName='Model-square', toName='square')
mdb.Model(name='2-square-dist-2', objectToCopy=mdb.models['2-square-dist-1'])
mdb.Model(name='2-square-dist-3', objectToCopy=mdb.models['2-square-dist-1'])
mdb.Model(name='2-square-dist-4', objectToCopy=mdb.models['2-square-dist-1'])
mdb.Model(name='2-square-dist-5', objectToCopy=mdb.models['2-square-dist-1'])
mdb.Model(name='2-square-dist-6', objectToCopy=mdb.models['2-square-dist-1'])
mdb.models['2-square-dist-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2-square-dist-2'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2-square-dist-2'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2-square-dist-2'].sketches['__edit__'], upToFeature=
    mdb.models['2-square-dist-2'].parts['Part-1'].features['Partition face-1'])
mdb.models['2-square-dist-2'].sketches['__edit__'].dimensions[9].setValues(
    value=0.02)
mdb.models['2-square-dist-2'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2-square-dist-2'].sketches['__edit__'])
del mdb.models['2-square-dist-2'].sketches['__edit__']
mdb.models['2-square-dist-2'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2-square-dist-3'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2-square-dist-3'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2-square-dist-3'].sketches['__edit__'], upToFeature=
    mdb.models['2-square-dist-3'].parts['Part-1'].features['Partition face-1'])
mdb.models['2-square-dist-3'].sketches['__edit__'].dimensions[9].setValues(
    value=0.03)
mdb.models['2-square-dist-3'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2-square-dist-3'].sketches['__edit__'])
del mdb.models['2-square-dist-3'].sketches['__edit__']
mdb.models['2-square-dist-3'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2-square-dist-4'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2-square-dist-4'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2-square-dist-4'].sketches['__edit__'], upToFeature=
    mdb.models['2-square-dist-4'].parts['Part-1'].features['Partition face-1'])
mdb.models['2-square-dist-4'].sketches['__edit__'].dimensions[9].setValues(
    value=0.04)
mdb.models['2-square-dist-4'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2-square-dist-4'].sketches['__edit__'])
del mdb.models['2-square-dist-4'].sketches['__edit__']
mdb.models['2-square-dist-4'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-5'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2-square-dist-5'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2-square-dist-5'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2-square-dist-5'].sketches['__edit__'], upToFeature=
    mdb.models['2-square-dist-5'].parts['Part-1'].features['Partition face-1'])
mdb.models['2-square-dist-5'].sketches['__edit__'].dimensions[9].setValues(
    value=0.05)
mdb.models['2-square-dist-5'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2-square-dist-5'].sketches['__edit__'])
del mdb.models['2-square-dist-5'].sketches['__edit__']
mdb.models['2-square-dist-5'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-6'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2-square-dist-6'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2-square-dist-6'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2-square-dist-6'].sketches['__edit__'], upToFeature=
    mdb.models['2-square-dist-6'].parts['Part-1'].features['Partition face-1'])
mdb.models['2-square-dist-6'].sketches['__edit__'].dimensions[9].setValues(
    value=0.06)
mdb.models['2-square-dist-6'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2-square-dist-6'].sketches['__edit__'])
del mdb.models['2-square-dist-6'].sketches['__edit__']
mdb.models['2-square-dist-6'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-1'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['2-square-dist-1'].parts['Part-1'].faces.getSequenceFromMask((
    '[#7 ]', ), ))
mdb.models['2-square-dist-1'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['2-square-dist-1'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ff0 ]', ), ), size=0.005)
mdb.models['2-square-dist-1'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-2'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['2-square-dist-2'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ff0 ]', ), ), size=0.005)
mdb.models['2-square-dist-2'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-3'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['2-square-dist-3'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ff0 ]', ), ), size=0.005)
mdb.models['2-square-dist-3'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-4'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['2-square-dist-4'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ff0 ]', ), ), size=0.005)
mdb.models['2-square-dist-4'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-5'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['2-square-dist-5'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ff0 ]', ), ), size=0.005)
mdb.models['2-square-dist-5'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-6'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['2-square-dist-6'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ff0 ]', ), ), size=0.005)
mdb.models['2-square-dist-6'].parts['Part-1'].generateMesh()
mdb.Model(name='2-square-dist-7', objectToCopy=mdb.models['2-square-dist-6'])
mdb.models['2-square-dist-7'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2-square-dist-7'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2-square-dist-7'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2-square-dist-7'].sketches['__edit__'], upToFeature=
    mdb.models['2-square-dist-7'].parts['Part-1'].features['Partition face-1'])
mdb.models['2-square-dist-7'].sketches['__edit__'].dimensions[9].setValues(
    value=0.07)
mdb.models['2-square-dist-7'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2-square-dist-7'].sketches['__edit__'])
del mdb.models['2-square-dist-7'].sketches['__edit__']
mdb.models['2-square-dist-7'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-7'].parts['Part-1'].generateMesh()
mdb.Model(name='2-square-dist-8', objectToCopy=mdb.models['2-square-dist-7'])
mdb.models['2-square-dist-8'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2-square-dist-8'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2-square-dist-8'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2-square-dist-8'].sketches['__edit__'], upToFeature=
    mdb.models['2-square-dist-8'].parts['Part-1'].features['Partition face-1'])
mdb.models['2-square-dist-8'].sketches['__edit__'].dimensions[9].setValues(
    value=0.08)
mdb.models['2-square-dist-8'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2-square-dist-8'].sketches['__edit__'])
del mdb.models['2-square-dist-8'].sketches['__edit__']
mdb.models['2-square-dist-8'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-8'].parts['Part-1'].generateMesh()
mdb.Model(name='2-square-dist-9', objectToCopy=mdb.models['2-square-dist-8'])
mdb.models['2-square-dist-9'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2-square-dist-9'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2-square-dist-9'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2-square-dist-9'].sketches['__edit__'], upToFeature=
    mdb.models['2-square-dist-9'].parts['Part-1'].features['Partition face-1'])
mdb.models['2-square-dist-9'].sketches['__edit__'].dimensions[9].setValues(
    value=0.09)
mdb.models['2-square-dist-9'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2-square-dist-9'].sketches['__edit__'])
del mdb.models['2-square-dist-9'].sketches['__edit__']
mdb.models['2-square-dist-9'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-9'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-9'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-9'].rootAssembly.regenerate()
mdb.models['2-square-dist-1'].parts['Part-1'].sectionAssignments[0].setValues(
    region=Region(
    faces=mdb.models['2-square-dist-1'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )))
del mdb.models['2-square-dist-1'].parts['Part-1'].sectionAssignments[1]
del mdb.models['2-square-dist-1'].parts['Part-1'].sectionAssignments[1]
del mdb.models['2-square-dist-1'].parts['Part-1'].sectionAssignments[0]
mdb.models['2-square-dist-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['2-square-dist-1'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['2-square-dist-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['2-square-dist-1'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )), sectionName='pyrite', thicknessAssignment=
    FROM_SECTION)
mdb.models['2-square-dist-2'].parts['Part-1'].sectionAssignments[0].setValues(
    sectionName='pyrite')
mdb.models['2-square-dist-2'].parts['Part-1'].sectionAssignments[1].setValues(
    sectionName='calcite')
mdb.models['2-square-dist-3'].parts['Part-1'].sectionAssignments[0].setValues(
    sectionName='pyrite')
mdb.models['2-square-dist-3'].parts['Part-1'].sectionAssignments[1].setValues(
    sectionName='calcite')
mdb.models['2-square-dist-4'].parts['Part-1'].sectionAssignments[0].setValues(
    sectionName='pyrite')
mdb.models['2-square-dist-4'].parts['Part-1'].sectionAssignments[1].setValues(
    sectionName='calcite')
mdb.models['2-square-dist-5'].parts['Part-1'].sectionAssignments[0].setValues(
    sectionName='pyrite')
mdb.models['2-square-dist-5'].parts['Part-1'].sectionAssignments[1].setValues(
    sectionName='calcite')
mdb.models['2-square-dist-6'].parts['Part-1'].sectionAssignments[0].setValues(
    sectionName='pyrite')
mdb.models['2-square-dist-6'].parts['Part-1'].sectionAssignments[1].setValues(
    sectionName='calcite')
mdb.models['2-square-dist-7'].parts['Part-1'].sectionAssignments[0].setValues(
    sectionName='pyrite')
mdb.models['2-square-dist-7'].parts['Part-1'].sectionAssignments[1].setValues(
    sectionName='calcite')
mdb.models['2-square-dist-8'].parts['Part-1'].sectionAssignments[0].setValues(
    sectionName='pyrite')
mdb.models['2-square-dist-8'].parts['Part-1'].sectionAssignments[1].setValues(
    sectionName='calcite')
mdb.models['2-square-dist-9'].parts['Part-1'].sectionAssignments[0].setValues(
    sectionName='pyrite')
mdb.models['2-square-dist-9'].parts['Part-1'].sectionAssignments[1].setValues(
    sectionName='calcite')
mdb.models['2-square-dist-3'].rootAssembly.regenerate()
mdb.models['2-square-dist-2'].rootAssembly.regenerate()
mdb.models['2-square-dist-1'].rootAssembly.regenerate()
mdb.models['2-square-dist-7'].rootAssembly.regenerate()
mdb.models['2-square-dist-8'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s2', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-3', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s3', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-4', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s4', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-5', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s5', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-6', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s6', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-7', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s7', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-8', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s8', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-9', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s9', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['s1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['s1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s1.odb', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's1'})
mdb.jobs['s1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 10020, 'jobName': 's1'})
mdb.jobs['s1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's1'})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's1'})
mdb.jobs['s1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's1', 'memory': 30.0})
mdb.jobs['s1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's1'})
mdb.jobs['s1']._Message(MINIMUM_MEMORY, {'minimum_memory': 13.0, 
    'phase': STANDARD_PHASE, 'jobName': 's1'})
mdb.jobs['s1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's1'})
mdb.jobs['s1']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:55:46 2019', 
    'jobName': 's1'})
mdb.jobs['s1'].submit(consistencyChecking=OFF)
mdb.jobs['s2'].submit(consistencyChecking=OFF)
mdb.jobs['s1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s1.odb', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's1'})
mdb.jobs['s3'].submit(consistencyChecking=OFF)
mdb.jobs['s2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's2'})
mdb.jobs['s1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 7504, 'jobName': 's1'})
mdb.jobs['s2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s2.odb', 
    'jobName': 's2'})
mdb.jobs['s1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's1'})
mdb.jobs['s2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's2'})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's1'})
mdb.jobs['s1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's1', 'memory': 37.0})
mdb.jobs['s1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's1'})
mdb.jobs['s1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 0.2970203272865, 'attempts': 2, 
    'timeIncrement': 0.2970203272865, 'increment': 1, 
    'stepTime': 0.2970203272865, 'step': 1, 'jobName': 's1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's3'})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 0.594040654572999, 'attempts': 1, 
    'timeIncrement': 0.2970203272865, 'increment': 2, 
    'stepTime': 0.594040654572999, 'step': 1, 'jobName': 's1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 8924, 'jobName': 's2'})
mdb.jobs['s2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's2'})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's2'})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 0.891060981859499, 'attempts': 1, 
    'timeIncrement': 0.2970203272865, 'increment': 3, 
    'stepTime': 0.891060981859499, 'step': 1, 'jobName': 's1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's2', 'memory': 37.0})
mdb.jobs['s2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's2'})
mdb.jobs['s2']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's2'})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.108939018140501, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's1', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's3'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's3'})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's3'})
mdb.jobs['s1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's1'})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's3'})
mdb.jobs['s1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's1'})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's3'})
mdb.jobs['s3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s3.odb', 
    'jobName': 's3'})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.297035228279562, 'attempts': 2, 
    'timeIncrement': 0.297035228279562, 'increment': 1, 
    'stepTime': 0.297035228279562, 'step': 1, 'jobName': 's2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's3'})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.594070456559125, 'attempts': 1, 
    'timeIncrement': 0.297035228279562, 'increment': 2, 
    'stepTime': 0.594070456559125, 'step': 1, 'jobName': 's2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.891105684838687, 'attempts': 1, 
    'timeIncrement': 0.297035228279562, 'increment': 3, 
    'stepTime': 0.891105684838687, 'step': 1, 'jobName': 's2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.108894315161313, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's2'})
mdb.jobs['s3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 9964, 'jobName': 's3'})
mdb.jobs['s1']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:56:12 2019', 
    'jobName': 's1'})
mdb.jobs['s2']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's2'})
mdb.jobs['s3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's3'})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's3'})
mdb.jobs['s3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's3', 'memory': 38.0})
mdb.jobs['s3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's3'})
mdb.jobs['s3']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's3'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's3'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 0.296982382869792, 'attempts': 2, 
    'timeIncrement': 0.296982382869792, 'increment': 1, 
    'stepTime': 0.296982382869792, 'step': 1, 'jobName': 's3', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's3'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 0.593964765739585, 'attempts': 1, 
    'timeIncrement': 0.296982382869792, 'increment': 2, 
    'stepTime': 0.593964765739585, 'step': 1, 'jobName': 's3', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's3'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 0.890947148609377, 'attempts': 1, 
    'timeIncrement': 0.296982382869792, 'increment': 3, 
    'stepTime': 0.890947148609377, 'step': 1, 'jobName': 's3', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:56:15 2019', 
    'jobName': 's2'})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's3'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.109052851390623, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's3', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's3'})
mdb.jobs['s3']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's3'})
mdb.models['2-square-dist-4'].rootAssembly.regenerate()
mdb.jobs['s3']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:56:19 2019', 
    'jobName': 's3'})
mdb.models['2-square-dist-4'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-4'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-4'].rootAssembly.regenerate()
mdb.jobs['s4'].submit(consistencyChecking=OFF)
mdb.jobs['s4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's4'})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s4.odb', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's4'})
mdb.jobs['s4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 9616, 'jobName': 's4'})
mdb.jobs['s4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's4'})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's4'})
mdb.jobs['s4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's4', 'memory': 37.0})
mdb.jobs['s4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's4'})
mdb.jobs['s4']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's4', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 0.296998677389645, 'attempts': 2, 
    'timeIncrement': 0.296998677389645, 'increment': 1, 
    'stepTime': 0.296998677389645, 'step': 1, 'jobName': 's4', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 0.593997354779289, 'attempts': 1, 
    'timeIncrement': 0.296998677389645, 'increment': 2, 
    'stepTime': 0.593997354779289, 'step': 1, 'jobName': 's4', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 0.890996032168934, 'attempts': 1, 
    'timeIncrement': 0.296998677389645, 'increment': 3, 
    'stepTime': 0.890996032168934, 'step': 1, 'jobName': 's4', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.109003967831066, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's4', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's4'})
mdb.jobs['s4']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's4'})
mdb.jobs['s4']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:57:00 2019', 
    'jobName': 's4'})
mdb.models['2-square-dist-5'].rootAssembly.regenerate()
mdb.models['2-square-dist-5'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-5'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-5'].rootAssembly.regenerate()
mdb.jobs['s5'].submit(consistencyChecking=OFF)
mdb.jobs['s5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's5'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s5.odb', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's5'})
mdb.jobs['s7'].submit(consistencyChecking=OFF)
mdb.jobs['s5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 9512, 'jobName': 's5'})
mdb.jobs['s5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's5'})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's5'})
mdb.jobs['s5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's5', 'memory': 38.0})
mdb.jobs['s5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's5'})
mdb.jobs['s5']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 0.297081226835779, 'attempts': 2, 
    'timeIncrement': 0.297081226835779, 'increment': 1, 
    'stepTime': 0.297081226835779, 'step': 1, 'jobName': 's5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 0.594162453671557, 'attempts': 1, 
    'timeIncrement': 0.297081226835779, 'increment': 2, 
    'stepTime': 0.594162453671557, 'step': 1, 'jobName': 's5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 0.891243680507336, 'attempts': 1, 
    'timeIncrement': 0.297081226835779, 'increment': 3, 
    'stepTime': 0.891243680507336, 'step': 1, 'jobName': 's5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.108756319492664, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's5'})
mdb.jobs['s5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's5'})
mdb.jobs['s7']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's7'})
mdb.jobs['s5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:57:56 2019', 
    'jobName': 's5'})
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s7.odb', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's7'})
mdb.jobs['s8'].submit(consistencyChecking=OFF)
mdb.jobs['s7']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 7640, 'jobName': 's7'})
mdb.jobs['s7']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's7'})
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's7'})
mdb.jobs['s7']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's7', 'memory': 38.0})
mdb.jobs['s7']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's7'})
mdb.jobs['s7']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's7'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's7', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's7'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 0.297010399616004, 'attempts': 2, 
    'timeIncrement': 0.297010399616004, 'increment': 1, 
    'stepTime': 0.297010399616004, 'step': 1, 'jobName': 's7', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's7'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 0.594020799232009, 'attempts': 1, 
    'timeIncrement': 0.297010399616004, 'increment': 2, 
    'stepTime': 0.594020799232009, 'step': 1, 'jobName': 's7', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's7'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 0.891031198848013, 'attempts': 1, 
    'timeIncrement': 0.297010399616004, 'increment': 3, 
    'stepTime': 0.891031198848013, 'step': 1, 'jobName': 's7', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's7'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.108968801151987, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's7', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s7']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's7'})
mdb.jobs['s7']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's7'})
mdb.jobs['s8']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's8'})
mdb.jobs['s7']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:58:04 2019', 
    'jobName': 's7'})
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s8.odb', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's8'})
mdb.jobs['s8']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 4272, 'jobName': 's8'})
mdb.jobs['s9'].submit(consistencyChecking=OFF)
mdb.jobs['s8']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's8'})
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's8'})
mdb.jobs['s8']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's8', 'memory': 39.0})
mdb.jobs['s8']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's8'})
mdb.jobs['s8']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's8', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 0.297068843077958, 'attempts': 2, 
    'timeIncrement': 0.297068843077958, 'increment': 1, 
    'stepTime': 0.297068843077958, 'step': 1, 'jobName': 's8', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 0.594137686155917, 'attempts': 1, 
    'timeIncrement': 0.297068843077958, 'increment': 2, 
    'stepTime': 0.594137686155917, 'step': 1, 'jobName': 's8', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 0.891206529233875, 'attempts': 1, 
    'timeIncrement': 0.297068843077958, 'increment': 3, 
    'stepTime': 0.891206529233875, 'step': 1, 'jobName': 's8', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.108793470766125, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's8', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s8']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's8'})
mdb.jobs['s8']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's8'})
mdb.jobs['s9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's9'})
mdb.jobs['s8']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:58:14 2019', 
    'jobName': 's8'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s9.odb', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's9'})
mdb.jobs['s9']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 7644, 'jobName': 's9'})
mdb.jobs['s9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's9'})
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's9'})
mdb.jobs['s9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's9', 'memory': 39.0})
mdb.jobs['s9']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's9'})
mdb.jobs['s9']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's9', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 0.297047092357558, 'attempts': 2, 
    'timeIncrement': 0.297047092357558, 'increment': 1, 
    'stepTime': 0.297047092357558, 'step': 1, 'jobName': 's9', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 0.594094184715116, 'attempts': 1, 
    'timeIncrement': 0.297047092357558, 'increment': 2, 
    'stepTime': 0.594094184715116, 'step': 1, 'jobName': 's9', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 0.891141277072674, 'attempts': 1, 
    'timeIncrement': 0.297047092357558, 'increment': 3, 
    'stepTime': 0.891141277072674, 'step': 1, 'jobName': 's9', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.108858722927326, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's9', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's9'})
mdb.jobs['s9']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's9'})
mdb.models['2-square-dist-6'].rootAssembly.regenerate()
mdb.jobs['s9']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:58:23 2019', 
    'jobName': 's9'})
mdb.models['2-square-dist-6'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-6'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-6'].rootAssembly.regenerate()
mdb.jobs['s6'].submit(consistencyChecking=OFF)
mdb.jobs['s6']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's6'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s6.odb', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's6'})
mdb.jobs['s6']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 9064, 'jobName': 's6'})
mdb.jobs['s6']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's6'})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's6'})
mdb.jobs['s6']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's6', 'memory': 38.0})
mdb.jobs['s6']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's6'})
mdb.jobs['s6']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's6'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's6', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's6'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 0.297015998069122, 'attempts': 2, 
    'timeIncrement': 0.297015998069122, 'increment': 1, 
    'stepTime': 0.297015998069122, 'step': 1, 'jobName': 's6', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's6'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 0.594031996138245, 'attempts': 1, 
    'timeIncrement': 0.297015998069122, 'increment': 2, 
    'stepTime': 0.594031996138245, 'step': 1, 'jobName': 's6', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's6'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 0.891047994207367, 'attempts': 1, 
    'timeIncrement': 0.297015998069122, 'increment': 3, 
    'stepTime': 0.891047994207367, 'step': 1, 'jobName': 's6', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's6'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.108952005792633, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's6', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s6']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's6'})
mdb.jobs['s6']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's6'})
mdb.jobs['s6']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:59:03 2019', 
    'jobName': 's6'})
mdb.jobs['s2'].submit(consistencyChecking=OFF)
mdb.jobs['s2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s2.odb', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's2'})
mdb.jobs['s2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 9744, 'jobName': 's2'})
mdb.jobs['s2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's2'})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's2'})
mdb.jobs['s2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's2', 'memory': 37.0})
mdb.jobs['s2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's2'})
mdb.jobs['s2']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.297035228279562, 'attempts': 2, 
    'timeIncrement': 0.297035228279562, 'increment': 1, 
    'stepTime': 0.297035228279562, 'step': 1, 'jobName': 's2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.594070456559125, 'attempts': 1, 
    'timeIncrement': 0.297035228279562, 'increment': 2, 
    'stepTime': 0.594070456559125, 'step': 1, 'jobName': 's2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.891105684838687, 'attempts': 1, 
    'timeIncrement': 0.297035228279562, 'increment': 3, 
    'stepTime': 0.891105684838687, 'step': 1, 'jobName': 's2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.108894315161313, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's2'})
mdb.jobs['s2']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's2'})
mdb.jobs['s2']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 17:59:54 2019', 
    'jobName': 's2'})
mdb.models['2-square-dist-3'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-3'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.models['2-square-dist-2'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-2'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.models['2-square-dist-1'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.models['2-square-dist-4'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-4'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.models['2-square-dist-5'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-5'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.models['2-square-dist-6'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-6'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.models['2-square-dist-7'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-7'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.models['2-square-dist-8'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-8'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.models['2-square-dist-9'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-9'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.jobs['s9'].submit(consistencyChecking=OFF)
mdb.jobs['s9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's9'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s9.odb', 
    'jobName': 's9'})
mdb.jobs['s9']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's9'})
mdb.jobs['s9']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 4368, 'jobName': 's9'})
mdb.jobs['s9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's9'})
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's9'})
mdb.jobs['s9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's9', 'memory': 39.0})
mdb.jobs['s9']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's9'})
mdb.jobs['s9']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's9', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 0.29769091309041, 'attempts': 2, 
    'timeIncrement': 0.29769091309041, 'increment': 1, 
    'stepTime': 0.29769091309041, 'step': 1, 'jobName': 's9', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
del mdb.jobs['Job-circle']
del mdb.jobs['Job-hex']
del mdb.jobs['Job-pen']
del mdb.jobs['Job-tri']
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 0.59538182618082, 'attempts': 1, 
    'timeIncrement': 0.29769091309041, 'increment': 2, 
    'stepTime': 0.59538182618082, 'step': 1, 'jobName': 's9', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 0.89307273927123, 'attempts': 1, 
    'timeIncrement': 0.29769091309041, 'increment': 3, 
    'stepTime': 0.89307273927123, 'step': 1, 'jobName': 's9', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's9'})
mdb.jobs['s9']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.10692726072877, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's9', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's9'})
mdb.jobs['s9']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's9'})
mdb.jobs['s9']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:03:31 2019', 
    'jobName': 's9'})
mdb.jobs['s8'].submit(consistencyChecking=OFF)
mdb.jobs['s7'].submit(consistencyChecking=OFF)
mdb.jobs['s8']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's8'})
mdb.jobs['s6'].submit(consistencyChecking=OFF)
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s8.odb', 
    'jobName': 's8'})
mdb.jobs['s8']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's8'})
mdb.jobs['s7']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's7'})
mdb.jobs['s5'].submit(consistencyChecking=OFF)
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s7.odb', 
    'jobName': 's7'})
mdb.jobs['s7']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's7'})
mdb.jobs['s8']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 10196, 'jobName': 's8'})
mdb.jobs['s8']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's8'})
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's8'})
mdb.jobs['s8']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's8', 'memory': 39.0})
mdb.jobs['s8']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's8'})
mdb.jobs['s8']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's8', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s6']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's6'})
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 0.2977275409421, 'attempts': 2, 
    'timeIncrement': 0.2977275409421, 'increment': 1, 
    'stepTime': 0.2977275409421, 'step': 1, 'jobName': 's8', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 0.595455081884199, 'attempts': 1, 
    'timeIncrement': 0.2977275409421, 'increment': 2, 
    'stepTime': 0.595455081884199, 'step': 1, 'jobName': 's8', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4'].submit(consistencyChecking=OFF)
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 0.893182622826299, 'attempts': 1, 
    'timeIncrement': 0.2977275409421, 'increment': 3, 
    'stepTime': 0.893182622826299, 'step': 1, 'jobName': 's8', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's8'})
mdb.jobs['s8']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.106817377173701, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's8', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s8']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's8'})
mdb.jobs['s8']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's8'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s6.odb', 
    'jobName': 's6'})
mdb.jobs['s6']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's6'})
mdb.jobs['s7']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 9012, 'jobName': 's7'})
mdb.jobs['s7']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's7'})
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's7'})
mdb.jobs['s7']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's7', 'memory': 38.0})
mdb.jobs['s7']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's7'})
mdb.jobs['s7']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's7'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's7', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's5'})
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's7'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 0.297658637245306, 'attempts': 2, 
    'timeIncrement': 0.297658637245306, 'increment': 1, 
    'stepTime': 0.297658637245306, 'step': 1, 'jobName': 's7', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's7'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's5'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 0.595317274490612, 'attempts': 1, 
    'timeIncrement': 0.297658637245306, 'increment': 2, 
    'stepTime': 0.595317274490612, 'step': 1, 'jobName': 's7', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3'].submit(consistencyChecking=OFF)
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's7'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 0.892975911735918, 'attempts': 1, 
    'timeIncrement': 0.297658637245306, 'increment': 3, 
    'stepTime': 0.892975911735918, 'step': 1, 'jobName': 's7', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's7'})
mdb.jobs['s7']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.107024088264082, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's7', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s7']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's7'})
mdb.jobs['s7']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's7'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s5.odb', 
    'jobName': 's5'})
mdb.jobs['s5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's5'})
mdb.jobs['s6']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 5580, 'jobName': 's6'})
mdb.jobs['s6']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's6'})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's6'})
mdb.jobs['s6']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's6', 'memory': 38.0})
mdb.jobs['s6']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's6'})
mdb.jobs['s6']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's6'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's6', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's6'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 0.297665237504736, 'attempts': 2, 
    'timeIncrement': 0.297665237504736, 'increment': 1, 
    'stepTime': 0.297665237504736, 'step': 1, 'jobName': 's6', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s8']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:03:50 2019', 
    'jobName': 's8'})
mdb.jobs['s4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's4'})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's6'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 0.595330475009473, 'attempts': 1, 
    'timeIncrement': 0.297665237504736, 'increment': 2, 
    'stepTime': 0.595330475009473, 'step': 1, 'jobName': 's6', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's4'})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's6'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 0.892995712514209, 'attempts': 1, 
    'timeIncrement': 0.297665237504736, 'increment': 3, 
    'stepTime': 0.892995712514209, 'step': 1, 'jobName': 's6', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's4'})
mdb.jobs['s4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s4.odb', 
    'jobName': 's4'})
mdb.jobs['s6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's6'})
mdb.jobs['s5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 7968, 'jobName': 's5'})
mdb.jobs['s6']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.107004287485791, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's6', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's4'})
mdb.jobs['s6']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's6'})
mdb.jobs['s5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's5'})
mdb.jobs['s6']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's6'})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's5'})
mdb.jobs['s7']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:03:55 2019', 
    'jobName': 's7'})
mdb.jobs['s2'].submit(consistencyChecking=OFF)
mdb.jobs['s5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's5', 'memory': 38.0})
mdb.jobs['s5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's5'})
mdb.jobs['s5']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's5', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 0.297684571677469, 'attempts': 2, 
    'timeIncrement': 0.297684571677469, 'increment': 1, 
    'stepTime': 0.297684571677469, 'step': 1, 'jobName': 's5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 0.595369143354939, 'attempts': 1, 
    'timeIncrement': 0.297684571677469, 'increment': 2, 
    'stepTime': 0.595369143354939, 'step': 1, 'jobName': 's5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 0.893053715032408, 'attempts': 1, 
    'timeIncrement': 0.297684571677469, 'increment': 3, 
    'stepTime': 0.893053715032408, 'step': 1, 'jobName': 's5', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's5'})
mdb.jobs['s5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.106946284967592, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's5'})
mdb.jobs['s5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's5'})
mdb.jobs['s3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's3'})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's3'})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's3'})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's3'})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's3'})
mdb.jobs['s3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's3'})
mdb.jobs['s3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s3.odb', 
    'jobName': 's3'})
mdb.jobs['s3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's3'})
mdb.jobs['s4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 8404, 'jobName': 's4'})
mdb.jobs['s4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's4'})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's4'})
mdb.jobs['s4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's4', 'memory': 37.0})
mdb.jobs['s4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's4'})
mdb.jobs['s4']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's4', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 0.297644817545625, 'attempts': 2, 
    'timeIncrement': 0.297644817545625, 'increment': 1, 
    'stepTime': 0.297644817545625, 'step': 1, 'jobName': 's4', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 0.595289635091251, 'attempts': 1, 
    'timeIncrement': 0.297644817545625, 'increment': 2, 
    'stepTime': 0.595289635091251, 'step': 1, 'jobName': 's4', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 0.892934452636876, 'attempts': 1, 
    'timeIncrement': 0.297644817545625, 'increment': 3, 
    'stepTime': 0.892934452636876, 'step': 1, 'jobName': 's4', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's4'})
mdb.jobs['s4']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.107065547363124, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's4', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s4']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's4'})
mdb.jobs['s1'].submit(consistencyChecking=OFF)
mdb.jobs['s4']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's4'})
mdb.jobs['s3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 5408, 'jobName': 's3'})
mdb.jobs['s3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's3'})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's3'})
mdb.jobs['s3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's3', 'memory': 38.0})
mdb.jobs['s3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's3'})
mdb.jobs['s3']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's3'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's3', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s5']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:04:02 2019', 
    'jobName': 's5'})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's3'})
mdb.jobs['s6']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:04:03 2019', 
    'jobName': 's6'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 0.297625607696557, 'attempts': 2, 
    'timeIncrement': 0.297625607696557, 'increment': 1, 
    'stepTime': 0.297625607696557, 'step': 1, 'jobName': 's3', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's2'})
mdb.jobs['s4']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:04:05 2019', 
    'jobName': 's4'})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's3'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 0.595251215393114, 'attempts': 1, 
    'timeIncrement': 0.297625607696557, 'increment': 2, 
    'stepTime': 0.595251215393114, 'step': 1, 'jobName': 's3', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's3'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 0.892876823089672, 'attempts': 1, 
    'timeIncrement': 0.297625607696557, 'increment': 3, 
    'stepTime': 0.892876823089672, 'step': 1, 'jobName': 's3', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's3'})
mdb.jobs['s3']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.107123176910328, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's3', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s3']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's3'})
mdb.jobs['s3']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's3'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s2.odb', 
    'jobName': 's2'})
mdb.jobs['s2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's2'})
mdb.jobs['s1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's1'})
mdb.jobs['s2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 7940, 'jobName': 's2'})
mdb.jobs['s3']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:04:09 2019', 
    'jobName': 's3'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s1.odb', 
    'jobName': 's1'})
mdb.jobs['s1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's1'})
mdb.jobs['s2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's2'})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's2'})
mdb.jobs['s2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's2', 'memory': 37.0})
mdb.jobs['s2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's2'})
mdb.jobs['s2']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.297673317722052, 'attempts': 2, 
    'timeIncrement': 0.297673317722052, 'increment': 1, 
    'stepTime': 0.297673317722052, 'step': 1, 'jobName': 's2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.595346635444103, 'attempts': 1, 
    'timeIncrement': 0.297673317722052, 'increment': 2, 
    'stepTime': 0.595346635444103, 'step': 1, 'jobName': 's2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 0.893019953166155, 'attempts': 1, 
    'timeIncrement': 0.297673317722052, 'increment': 3, 
    'stepTime': 0.893019953166155, 'step': 1, 'jobName': 's2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's2'})
mdb.jobs['s2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.106980046833845, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's2'})
mdb.jobs['s2']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's2'})
mdb.jobs['s1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 8056, 'jobName': 's1'})
mdb.jobs['s1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's1'})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's1'})
mdb.jobs['s1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's1', 'memory': 37.0})
mdb.jobs['s1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's1'})
mdb.jobs['s1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s2']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:04:14 2019', 
    'jobName': 's2'})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 0.297667989027094, 'attempts': 2, 
    'timeIncrement': 0.297667989027094, 'increment': 1, 
    'stepTime': 0.297667989027094, 'step': 1, 'jobName': 's1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 0.595335978054187, 'attempts': 1, 
    'timeIncrement': 0.297667989027094, 'increment': 2, 
    'stepTime': 0.595335978054187, 'step': 1, 'jobName': 's1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 0.893003967081281, 'attempts': 1, 
    'timeIncrement': 0.297667989027094, 'increment': 3, 
    'stepTime': 0.893003967081281, 'step': 1, 'jobName': 's1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's1'})
mdb.jobs['s1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.106996032918719, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's1', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's1'})
mdb.jobs['s1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's1'})
mdb.jobs['s1']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:04:19 2019', 
    'jobName': 's1'})
# Save by dche145 on 2019_12_14-18.08.57; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='2-square-dist-0', objectToCopy=mdb.models['2-square-dist-1'])
mdb.models['2-square-dist-0'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['2-square-dist-0'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['2-square-dist-0'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['2-square-dist-0'].sketches['__edit__'], upToFeature=
    mdb.models['2-square-dist-0'].parts['Part-1'].features['Partition face-1'])
mdb.models['2-square-dist-0'].sketches['__edit__'].dimensions[9].setValues(
    value=0)
mdb.models['2-square-dist-0'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['2-square-dist-0'].sketches['__edit__'])
del mdb.models['2-square-dist-0'].sketches['__edit__']
mdb.models['2-square-dist-0'].parts['Part-1'].regenerate()
mdb.models['2-square-dist-0'].rootAssembly.regenerate()
mdb.models['2-square-dist-0'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-0'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3 ]', ), )))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='2-square-dist-0', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='s0', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['2-square-dist-0'].parts['Part-1'].generateMesh()
mdb.models['2-square-dist-0'].rootAssembly.regenerate()
mdb.jobs['s0'].submit(consistencyChecking=OFF)
mdb.jobs['s0']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s0.odb', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's0'})
mdb.jobs['s0']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 1708, 'jobName': 's0'})
mdb.jobs['s0']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's0'})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's0'})
mdb.jobs['s0']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's0', 'memory': 37.0})
mdb.jobs['s0']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's0'})
mdb.jobs['s0']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's0', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.296314257635149, 'attempts': 2, 
    'timeIncrement': 0.296314257635149, 'increment': 1, 
    'stepTime': 0.296314257635149, 'step': 1, 'jobName': 's0', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.592628515270297, 'attempts': 1, 
    'timeIncrement': 0.296314257635149, 'increment': 2, 
    'stepTime': 0.592628515270297, 'step': 1, 'jobName': 's0', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.888942772905446, 'attempts': 1, 
    'timeIncrement': 0.296314257635149, 'increment': 3, 
    'stepTime': 0.888942772905446, 'step': 1, 'jobName': 's0', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.111057227094554, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's0', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's0'})
mdb.jobs['s0']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's0'})
mdb.jobs['s0']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:42:05 2019', 
    'jobName': 's0'})
mdb.models['2-square-dist-0'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['2-square-dist-0'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3 ]', ), )))
mdb.jobs['s0'].submit(consistencyChecking=OFF)
mdb.jobs['s0']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s0.odb', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's0'})
mdb.jobs['s0']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 3600, 'jobName': 's0'})
mdb.jobs['s0']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's0'})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's0'})
mdb.jobs['s0']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's0', 'memory': 37.0})
mdb.jobs['s0']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's0'})
mdb.jobs['s0']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's0', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.296314257635149, 'attempts': 2, 
    'timeIncrement': 0.296314257635149, 'increment': 1, 
    'stepTime': 0.296314257635149, 'step': 1, 'jobName': 's0', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.592628515270297, 'attempts': 1, 
    'timeIncrement': 0.296314257635149, 'increment': 2, 
    'stepTime': 0.592628515270297, 'step': 1, 'jobName': 's0', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.888942772905446, 'attempts': 1, 
    'timeIncrement': 0.296314257635149, 'increment': 3, 
    'stepTime': 0.888942772905446, 'step': 1, 'jobName': 's0', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.111057227094554, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's0', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's0'})
mdb.jobs['s0']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's0'})
mdb.jobs['s0']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:44:47 2019', 
    'jobName': 's0'})
mdb.models['2-square-dist-0'].parts['Part-1'].sectionAssignments[0].setValues(
    region=Region(
    faces=mdb.models['2-square-dist-0'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )))
mdb.models['2-square-dist-0'].parts['Part-1'].sectionAssignments[1].setValues(
    region=Region(
    faces=mdb.models['2-square-dist-0'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#3 ]', ), )))
mdb.models['2-square-dist-0'].rootAssembly.regenerate()
mdb.jobs['s0'].submit(consistencyChecking=OFF)
mdb.jobs['s0']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\s0.odb', 
    'jobName': 's0'})
mdb.jobs['s0']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's0'})
mdb.jobs['s0']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 7004, 'jobName': 's0'})
mdb.jobs['s0']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's0'})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 's0'})
mdb.jobs['s0']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 's0', 'memory': 37.0})
mdb.jobs['s0']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 's0'})
mdb.jobs['s0']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 's0', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.295588442752096, 'attempts': 2, 
    'timeIncrement': 0.295588442752096, 'increment': 1, 
    'stepTime': 0.295588442752096, 'step': 1, 'jobName': 's0', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.591176885504191, 'attempts': 1, 
    'timeIncrement': 0.295588442752096, 'increment': 2, 
    'stepTime': 0.591176885504191, 'step': 1, 'jobName': 's0', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 0.886765328256287, 'attempts': 1, 
    'timeIncrement': 0.295588442752096, 'increment': 3, 
    'stepTime': 0.886765328256287, 'step': 1, 'jobName': 's0', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 's0'})
mdb.jobs['s0']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.113234671743713, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 's0', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['s0']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 's0'})
mdb.jobs['s0']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 's0'})
mdb.jobs['s0']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 18:46:05 2019', 
    'jobName': 's0'})
mdb.Model(name='3-square-dist-1', objectToCopy=mdb.models['2-square-dist-1'])
mdb.models['3-square-dist-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['3-square-dist-1'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['3-square-dist-1'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['3-square-dist-1'].sketches['__edit__'], upToFeature=
    mdb.models['3-square-dist-1'].parts['Part-1'].features['Partition face-1'])
del mdb.models['3-square-dist-1'].sketches['__edit__']
mdb.models['3-square-dist-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['3-square-dist-1'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['3-square-dist-1'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['3-square-dist-1'].sketches['__edit__'], upToFeature=
    mdb.models['3-square-dist-1'].parts['Part-1'].features['Partition face-1'])
mdb.models['3-square-dist-1'].sketches['__edit__'].rectangle(point1=(
    0.390348017215729, -0.481084138154984), point2=(0.332113981246948, 
    -0.434783309698105))
mdb.models['3-square-dist-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.286767810583115, -0.453399121761322), value=0.05, vertex1=
    mdb.models['3-square-dist-1'].sketches['__edit__'].vertices[46], vertex2=
    mdb.models['3-square-dist-1'].sketches['__edit__'].vertices[47])
mdb.models['3-square-dist-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.358367025852203, -0.511633157730103), value=0.05, vertex1=
    mdb.models['3-square-dist-1'].sketches['__edit__'].vertices[47], vertex2=
    mdb.models['3-square-dist-1'].sketches['__edit__'].vertices[44])
mdb.models['3-square-dist-1'].sketches['__edit__'].ConstructionLine(point1=(
    0.348333333333212, -0.408333333331393), point2=(0.358333333333212, 
    -0.408333333331393))
mdb.models['3-square-dist-1'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[59])
mdb.models['3-square-dist-1'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['3-square-dist-1'].sketches['__edit__'].vertices[42], entity2=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[59])
mdb.models['3-square-dist-1'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['3-square-dist-1'].sketches['__edit__'].vertices[5], entity2=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[59])
mdb.models['3-square-dist-1'].sketches['__edit__'].ConstructionLine(point1=(
    0.353185623884201, -0.408333333331393), point2=(0.353185623884201, 
    -0.38907578587532))
mdb.models['3-square-dist-1'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[60])
mdb.models['3-square-dist-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[49], entity2=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[60], textPoint=
    (0.353018879890442, -0.415584444999695), value=0.005)
mdb.models['3-square-dist-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[57], entity2=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[60], textPoint=
    (0.345953494310379, -0.458920001983643), value=0.025)
mdb.models['3-square-dist-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[48], entity2=
    mdb.models['3-square-dist-1'].sketches['__edit__'].geometry[56], textPoint=
    (0.313971757888794, -0.423634648323059), value=0.01)
mdb.models['3-square-dist-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['3-square-dist-1'].sketches['__edit__'].dimensions[13], ))
mdb.models['3-square-dist-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['3-square-dist-1'].sketches['__edit__'].dimensions[8], ))
mdb.models['3-square-dist-1'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['3-square-dist-1'].sketches['__edit__'])
del mdb.models['3-square-dist-1'].sketches['__edit__']
mdb.models['3-square-dist-1'].parts['Part-1'].regenerate()
mdb.models['3-square-dist-1'].rootAssembly.regenerate()
mdb.models['3-square-dist-1'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['3-square-dist-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#e ]', ), )))
mdb.models['3-square-dist-1'].predefinedFields['initial_temp'].setValues(
    region=Region(
    faces=mdb.models['3-square-dist-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#f ]', ), ), 
    edges=mdb.models['3-square-dist-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#f0f0 ]', ), ), 
    vertices=mdb.models['3-square-dist-1'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#f0f0 ]', ), )))
mdb.models['3-square-dist-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['3-square-dist-1'].parts['Part-1'].faces.getSequenceFromMask((
    '[#c ]', ), ))
mdb.models['3-square-dist-1'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['3-square-dist-1'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.005)
mdb.models['3-square-dist-1'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['3-square-dist-1'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.003)
mdb.models['3-square-dist-1'].parts['Part-1'].generateMesh()
mdb.models['3-square-dist-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='3-square-dist-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='3s1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['3-square-dist-1'].parts['Part-1'].sectionAssignments[1].setValues(
    region=Region(
    faces=mdb.models['3-square-dist-1'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#e ]', ), )))
mdb.models['3-square-dist-1'].rootAssembly.regenerate()
mdb.jobs['3s1'].submit(consistencyChecking=OFF)
mdb.jobs['3s1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST HFL IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 579 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 580 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 581 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 582 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 583 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 584 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 585 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 586 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 587 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 588 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 589 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 590 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 591 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 592 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 593 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 594 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 595 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 596 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 597 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 598 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 599 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 600 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 601 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 602 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 603 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 604 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 605 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 606 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 607 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 608 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 609 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 610 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 611 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 612 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 613 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 614 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 615 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 616 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 617 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 618 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 619 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 620 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 621 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 622 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 623 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 624 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 625 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 626 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 627 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'INVALID LOAD TYPE ON ELEMENT 628 INSTANCE PART-1-1. LOAD TYPE BF IS NOT VALID FOR ELEMENT TYPE CPS4R', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\3s1.odb', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': '3s1'})
mdb.jobs['3s1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': '3s1'})
mdb.models['3-square-dist-1'].parts['Part-1'].setElementType(elemTypes=(
    ElemType(elemCode=CPE4T, elemLibrary=STANDARD), ElemType(elemCode=CPE3T, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['3-square-dist-1'].parts['Part-1'].faces.getSequenceFromMask((
    '[#f ]', ), ), ))
mdb.models['3-square-dist-1'].rootAssembly.regenerate()
mdb.models['3-square-dist-1'].parts['Part-1'].generateMesh()
mdb.models['3-square-dist-1'].rootAssembly.regenerate()
mdb.jobs['3s1'].submit(consistencyChecking=OFF)
mdb.jobs['3s1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\3s1.odb', 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '3s1'})
mdb.jobs['3s1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 4368, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '3s1', 'memory': 49.0})
mdb.jobs['3s1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': '3s1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['3s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(STATUS, {'totalTime': 0.297124758793937, 
    'attempts': 2, 'timeIncrement': 0.297124758793937, 'increment': 1, 
    'stepTime': 0.297124758793937, 'step': 1, 'jobName': '3s1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
# Save by dche145 on 2019_12_14-19.47.04; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['3s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(STATUS, {'totalTime': 0.594249517587875, 
    'attempts': 1, 'timeIncrement': 0.297124758793937, 'increment': 2, 
    'stepTime': 0.594249517587875, 'step': 1, 'jobName': '3s1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['3s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(STATUS, {'totalTime': 0.891374276381812, 
    'attempts': 1, 'timeIncrement': 0.297124758793937, 'increment': 3, 
    'stepTime': 0.891374276381812, 'step': 1, 'jobName': '3s1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['3s1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': '3s1'})
mdb.jobs['3s1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.108625723618188, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': '3s1', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['3s1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '3s1'})
mdb.jobs['3s1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '3s1'})
mdb.jobs['3s1']._Message(JOB_COMPLETED, {'time': 'Sat Dec 14 19:47:06 2019', 
    'jobName': '3s1'})
# Save by dche145 on 2019_12_14-19.49.17; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='square-3d', objectToCopy=mdb.models['square'])
mdb.models['square-3d'].parts['Part-1'].setValues(space=THREE_D, type=
    DEFORMABLE_BODY)
# Save by dche145 on 2019_12_15-15.58.43; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].parts['Part-1'].setValues(space=THREE_D, type=
    DEFORMABLE_BODY)
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['square-3d'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['square-3d'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['square-3d'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].ConstrainedSketch(gridSpacing=0.7, name='__profile__', 
    sheetSize=28.28, transform=
    mdb.models['square-3d'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['square-3d'].parts['Part-1'].faces[1], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['square-3d'].parts['Part-1'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.332828, -0.332828, 0.0)))
mdb.models['square-3d'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__profile__'])
mdb.models['square-3d'].sketches['__profile__'].rectangle(point1=(
    -0.249494666666667, 0.249494666666667), point2=(0.250505333333333, 
    -0.250505333333333))
mdb.models['square-3d'].sketches['__profile__'].rectangle(point1=(
    -0.249494666666667, 0.249494666666667), point2=(0.250505333333333, 
    -0.250505333333333))
mdb.models['square-3d'].sketches['__profile__'].undo()
mdb.models['square-3d'].parts['Part-1'].SolidExtrude(depth=0.15, 
    flipExtrudeDirection=OFF, sketch=
    mdb.models['square-3d'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['square-3d'].parts['Part-1'].faces[1], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['square-3d'].parts['Part-1'].edges[7])
del mdb.models['square-3d'].sketches['__profile__']
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['square-3d'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].parts['Part-1'].regenerate()
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['square-3d'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['square-3d'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].parts['Part-1'].features['Solid extrude-1'].setValues(
    depth=0.25)
mdb.models['square-3d'].parts['Part-1'].regenerate()
mdb.models['square-3d'].parts['Part-1'].features['Solid extrude-1'].setValues(
    depth=0.5)
mdb.models['square-3d'].parts['Part-1'].regenerate()
mdb.models['square-3d'].parts['Part-1'].regenerate()
mdb.models['square-3d'].parts['Part-1'].deleteFeatures(('Shell planar-1', 
    'Solid extrude-1', 'Partition face-1'))
mdb.models['square-3d'].parts['Part-1'].DatumPlaneByPrincipalPlane(offset=0.0, 
    principalPlane=XYPLANE)
mdb.models['square-3d'].parts['Part-1'].regenerate()
del mdb.models['square-3d'].parts['Part-1'].features['Datum plane-1']
mdb.models['square-3d'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['square-3d'].sketches['__profile__'].rectangle(point1=(-5.0, 5.0), 
    point2=(5.0, -5.0))
mdb.models['square-3d'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.332355499267578, 10.7606010437012), value=0.5, vertex1=
    mdb.models['square-3d'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['square-3d'].sketches['__profile__'].vertices[0])
mdb.models['square-3d'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.359174728393555, 1.30969953536987), value=0.5, vertex1=
    mdb.models['square-3d'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['square-3d'].sketches['__profile__'].vertices[1])
mdb.models['square-3d'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['square-3d'].parts['Part-2'].BaseSolidExtrude(depth=0.5, sketch=
    mdb.models['square-3d'].sketches['__profile__'])
del mdb.models['square-3d'].sketches['__profile__']
del mdb.models['square-3d'].parts['Part-1']
mdb.models['square-3d'].parts['Part-2'].DatumPlaneByPrincipalPlane(offset=0.225
    , principalPlane=XYPLANE)
mdb.models['square-3d'].ConstrainedSketch(gridSpacing=0.35, name='__profile__', 
    sheetSize=14.24, transform=
    mdb.models['square-3d'].parts['Part-2'].MakeSketchTransform(
    sketchPlane=mdb.models['square-3d'].parts['Part-2'].datums[2], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['square-3d'].parts['Part-2'].edges[2], 
    sketchOrientation=RIGHT, origin=(4.75, -4.75, 0.225)))
mdb.models['square-3d'].parts['Part-2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__profile__'])
mdb.models['square-3d'].sketches['__profile__'].rectangle(point1=(
    -0.0267620086669922, 0.0230059623718262), point2=(0.0258231163024902, 
    -0.0258231163024902))
mdb.models['square-3d'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.00892066955566406, 0.0718355178833008), value=0.05, vertex1=
    mdb.models['square-3d'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['square-3d'].sketches['__profile__'].vertices[0])
mdb.models['square-3d'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.0802865028381348, 0.000469684600830078), value=0.05, vertex1=
    mdb.models['square-3d'].sketches['__profile__'].vertices[2], vertex2=
    mdb.models['square-3d'].sketches['__profile__'].vertices[3])
mdb.models['square-3d'].parts['Part-2'].SolidExtrude(depth=0.05, 
    flipExtrudeDirection=OFF, sketch=
    mdb.models['square-3d'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['square-3d'].parts['Part-2'].datums[2], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['square-3d'].parts['Part-2'].edges[2])
del mdb.models['square-3d'].sketches['__profile__']
mdb.models['square-3d'].rootAssembly.suppressFeatures(featureNames=('Part-1-1', 
    ))
mdb.models['square-3d'].rootAssembly.Instance(dependent=ON, name='Part-2-1', 
    part=mdb.models['square-3d'].parts['Part-2'])
del mdb.models['square-3d'].parts['Part-2'].features['Solid extrude-2']
mdb.models['square-3d'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['square-3d'].sketches['__profile__'].rectangle(point1=(
    -0.680803775787354, 0.460809946060181), point2=(0.685563564300537, 
    -0.647752046585083))
mdb.models['square-3d'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.0878510475158691, 1.36312794685364), value=0.05, vertex1=
    mdb.models['square-3d'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['square-3d'].sketches['__profile__'].vertices[0])
mdb.models['square-3d'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.202528953552246, 0.0823889970779419), value=0.05, vertex1=
    mdb.models['square-3d'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['square-3d'].sketches['__profile__'].vertices[1])
mdb.models['square-3d'].Part(dimensionality=THREE_D, name='Part-3', type=
    DEFORMABLE_BODY)
mdb.models['square-3d'].parts['Part-3'].BaseSolidExtrude(depth=0.05, sketch=
    mdb.models['square-3d'].sketches['__profile__'])
del mdb.models['square-3d'].sketches['__profile__']
mdb.models['square-3d'].rootAssembly.regenerate()
del mdb.models['square-3d'].rootAssembly.features['Part-1-1']
del mdb.models['square-3d'].rootAssembly.features['Part-2-1']
mdb.models['square-3d'].rootAssembly.Instance(dependent=ON, name='Part-2-1', 
    part=mdb.models['square-3d'].parts['Part-2'])
mdb.models['square-3d'].rootAssembly.Instance(dependent=ON, name='Part-3-1', 
    part=mdb.models['square-3d'].parts['Part-3'])
mdb.models['square-3d'].rootAssembly.translate(instanceList=('Part-3-1', ), 
    vector=(4.064436, -3.902248, 0.45))
mdb.models['square-3d'].parts['Part-2'].DatumPointByCoordinate(coords=(0.0, 
    0.0, 0.0))
del mdb.models['square-3d'].parts['Part-2'].features['Datum pt-1']
mdb.models['square-3d'].parts['Part-2'].DatumPointByMidPoint(point1=
    mdb.models['square-3d'].parts['Part-2'].vertices[6], point2=
    mdb.models['square-3d'].parts['Part-2'].vertices[2])
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].rootAssembly.translate(instanceList=('Part-3-1', ), 
    vector=(0.05, -0.25, -0.25))
mdb.models['square-3d'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['square-3d'].rootAssembly.instances['Part-2-1'], 
    mdb.models['square-3d'].rootAssembly.instances['Part-3-1']), 
    keepIntersections=ON, name='Part-1', originalInstances=SUPPRESS)
mdb.models['square-3d'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d'].parts['Part-1'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d'].parts['Part-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='pyrite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), size=0.005)
mdb.models['square-3d'].parts['Part-1'].Set(edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), name='pyrite')
mdb.models['square-3d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), size=0.003)
mdb.models['square-3d'].parts['Part-1'].Set(edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), name='pyrite')
mdb.models['square-3d'].parts['Part-1'].Set(edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), name='pyrite')
mdb.models['square-3d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.03)
mdb.models['square-3d'].parts['Part-1'].Set(edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), name='Edge Seeds-1')
mdb.models['square-3d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.05)
mdb.models['square-3d'].parts['Part-1'].Set(edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), name='Edge Seeds-1')
mdb.models['square-3d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.03)
mdb.models['square-3d'].parts['Part-1'].Set(edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), name='Edge Seeds-1')
mdb.models['square-3d'].parts['Part-1'].Set(edges=
    mdb.models['square-3d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), name='Edge Seeds-1')
mdb.models['square-3d'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4T, elemLibrary=STANDARD)), regions=(
    mdb.models['square-3d'].parts['Part-1'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), ))
mdb.models['square-3d'].parts['Part-1'].setMeshControls(elemShape=TET, regions=
    mdb.models['square-3d'].parts['Part-1'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), technique=FREE)
mdb.models['square-3d'].parts['Part-1'].generateMesh()
# Save by dche145 on 2019_12_15-16.38.37; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].rootAssembly.Set(cells=
    mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='pyrite')
mdb.models['square-3d'].loads['Load-1'].setValues(region=
    mdb.models['square-3d'].rootAssembly.sets['pyrite'])
mdb.models['square-3d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    faces=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#fff ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#fff7ef ]', ), ), 
    vertices=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#ff65 ]', ), )))
mdb.models['square-3d'].boundaryConditions['BC-1'].setValues(region=Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), 
    faces=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3f ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#2f0 ]', ), ), 
    vertices=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#30 ]', ), )))
mdb.models['square-3d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3b ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#7e6 ]', ), ), 
    vertices=mdb.models['square-3d'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#60 ]', ), )))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='square-3d', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01005', 'handle': 4288, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.298275632741982, 
    'attempts': 2, 'timeIncrement': 0.298275632741982, 'increment': 1, 
    'stepTime': 0.298275632741982, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.596551265483963, 
    'attempts': 1, 'timeIncrement': 0.298275632741982, 'increment': 2, 
    'stepTime': 0.596551265483963, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.894826898225945, 
    'attempts': 1, 'timeIncrement': 0.298275632741982, 'increment': 3, 
    'stepTime': 0.894826898225945, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.105173101774055, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(JOB_COMPLETED, {
    'time': 'Sun Dec 15 16:50:35 2019', 'jobName': 'square-3d'})
# Save by dche145 on 2019_12_15-17.13.50; build 2019 2018_09_25-04.41.51 157541
# Save by dche145 on 2019_12_15-17.24.07; build 2019 2018_09_25-04.41.51 157541
# Save by dche145 on 2019_12_15-18.58.06; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='prism-3d', objectToCopy=mdb.models['square-3d'])
mdb.openStep(
    '//ad.monash.edu/home/User045/dche145/Documents/Abaqus/geometry_shapes/prism.STEP'
    , scaleFromFile=OFF)
mdb.models['prism-3d'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, mergeSolidRegions=True, name='prism', type=
    DEFORMABLE_BODY)
del mdb.models['prism-3d'].parts['Part-1']
mdb.models['prism-3d'].rootAssembly.suppressFeatures(featureNames=('Part-1-1', 
    ))
mdb.models['prism-3d'].rootAssembly.deleteFeatures(('Part-2-1', 'Part-3-1', 
    'Part-1-1'))
mdb.models['prism-3d'].rootAssembly.Instance(dependent=ON, name='Part-2-1', 
    part=mdb.models['prism-3d'].parts['Part-2'])
mdb.models['prism-3d'].rootAssembly.Instance(dependent=ON, name='prism-1', 
    part=mdb.models['prism-3d'].parts['prism'])
mdb.models['prism-3d'].rootAssembly.translate(instanceList=('Part-2-1', ), 
    vector=(-4.75, 4.775, -0.25))
mdb.models['prism-3d'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['prism-3d'].rootAssembly.instances['Part-2-1'], 
    mdb.models['prism-3d'].rootAssembly.instances['prism-1']), 
    keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['prism-3d'].loads['Load-1'].setValues(region=Region(
    cells=mdb.models['prism-3d'].rootAssembly.instances['merged-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['prism-3d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['prism-3d'].rootAssembly.instances['merged-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    faces=mdb.models['prism-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#7ffff ]', ), ), 
    edges=mdb.models['prism-3d'].rootAssembly.instances['merged-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #f ]', ), ), 
    vertices=mdb.models['prism-3d'].rootAssembly.instances['merged-1'].vertices.getSequenceFromMask(
    mask=('[#1fffff ]', ), )))
mdb.models['prism-3d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['prism-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#3b ]', ), ), 
    edges=mdb.models['prism-3d'].rootAssembly.instances['merged-1'].edges.getSequenceFromMask(
    mask=('[#fff ]', ), ), 
    vertices=mdb.models['prism-3d'].rootAssembly.instances['merged-1'].vertices.getSequenceFromMask(
    mask=('[#ff ]', ), )))
mdb.models['prism-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['prism-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#fffff000 #f ]', ), ), size=0.005)
mdb.models['prism-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['prism-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#fffff000 #f ]', ), ), size=0.003)
mdb.models['prism-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['prism-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#fffff000 #f ]', ), ), size=0.002)
mdb.models['prism-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['prism-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#ffffffff #f ]', ), ), size=0.05)
mdb.models['prism-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['prism-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#fffff000 #f ]', ), ), size=0.002)
mdb.models['prism-3d'].parts['merged'].setMeshControls(elemShape=TET, regions=
    mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), technique=FREE)
mdb.models['prism-3d'].parts['merged'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['prism-3d'].parts['merged'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20RT, elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_WEDGE, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10MT, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), ))
mdb.models['prism-3d'].parts['merged'].generateMesh()
mdb.models['prism-3d'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='prism-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='prism_3d', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['prism-3d'].parts['merged'].deleteMesh(regions=
    mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ))
mdb.models['prism-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['prism-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#fffff000 #f ]', ), ), size=0.003)
mdb.models['prism-3d'].parts['merged'].generateMesh()
mdb.models['prism-3d'].parts['merged'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20RT, elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_WEDGE, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10MT, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), ))
mdb.models['prism-3d'].parts['merged'].deleteMesh(regions=
    mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ))
mdb.models['prism-3d'].parts['merged'].setMeshControls(elemShape=HEX, regions=
    mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), technique=SYSTEM_ASSIGN)
mdb.models['prism-3d'].parts['merged'].setMeshControls(elemShape=TET, regions=
    mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), technique=FREE)
mdb.models['prism-3d'].parts['merged'].generateMesh()
mdb.models['prism-3d'].parts['merged'].generateMesh(regions=
    mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['prism-3d'].parts['merged'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['prism-3d'].parts['merged'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='pyrite', thicknessAssignment=
    FROM_SECTION)
mdb.models['prism-3d'].parts['merged'].deleteMesh(regions=
    mdb.models['prism-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ))
mdb.models['prism-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['prism-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#fffff000 #f ]', ), ), size=0.005)
mdb.models['prism-3d'].parts['merged'].generateMesh()
mdb.models['prism-3d'].rootAssembly.regenerate()
mdb.jobs['prism_3d'].submit(consistencyChecking=OFF)
mdb.jobs['prism_3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\prism_3d.odb', 
    'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 4284, 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'prism_3d', 'memory': 7091.0})
mdb.jobs['prism_3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 946.0, 
    'phase': STANDARD_PHASE, 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'prism_3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['prism_3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(STATUS, {'totalTime': 0.29802275889739, 
    'attempts': 2, 'timeIncrement': 0.29802275889739, 'increment': 1, 
    'stepTime': 0.29802275889739, 'step': 1, 'jobName': 'prism_3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['prism_3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(STATUS, {'totalTime': 0.59604551779478, 
    'attempts': 1, 'timeIncrement': 0.29802275889739, 'increment': 2, 
    'stepTime': 0.59604551779478, 'step': 1, 'jobName': 'prism_3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['prism_3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(STATUS, {'totalTime': 0.894068276692169, 
    'attempts': 1, 'timeIncrement': 0.29802275889739, 'increment': 3, 
    'stepTime': 0.894068276692169, 'step': 1, 'jobName': 'prism_3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['prism_3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.105931723307831, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'prism_3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['prism_3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'prism_3d'})
mdb.jobs['prism_3d']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 11:04:22 2019', 'jobName': 'prism_3d'})
mdb.models['square-3d'].steps['Step-1'].setValues(initialInc=2.0, maxInc=2.0, 
    minInc=2e-05, timePeriod=2.0)
mdb.models['square-3d'].steps['Step-1'].setValues(initialInc=10.0, maxInc=10.0, 
    minInc=0.0001, timePeriod=10.0)
# Save by dche145 on 2019_12_16-11.38.47; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].steps['Step-1'].setValues(cetol=None, creepIntegration=
    None, deltmx=None, initialInc=5.0, timeIncrementationMethod=FIXED, 
    timePeriod=5.0)
mdb.models['square-3d'].CoupledTempDisplacementStep(cetol=None, 
    creepIntegration=None, deltmx=None, initialInc=5.0, name='cool_down', 
    previous='Step-1', timeIncrementationMethod=FIXED, timePeriod=5.0)
mdb.models['square-3d'].steps.changeKey(fromName='Step-1', toName='heat_up')
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 3180, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.models['square-3d'].loads['Load-1'].deactivate('cool_down')
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 5.0, 'increment': 1, 'stepTime': 5.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 8880, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 5.0, 'increment': 1, 'stepTime': 5.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 10.0, 'attempts': 1, 
    'timeIncrement': 5.0, 'increment': 1, 'stepTime': 5.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 13:44:18 2019', 'jobName': 'square-3d'})
mdb.models['square-3d'].steps['heat_up'].setValues(creepIntegration=None, 
    initialInc=0.05)
mdb.models['square-3d'].steps['cool_down'].setValues(creepIntegration=None, 
    initialInc=0.05, timePeriod=0.05)
mdb.models['square-3d'].steps['cool_down'].setValues(creepIntegration=None, 
    initialInc=0.05, timePeriod=5.0)
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 7328, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.05, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 1, 'stepTime': 0.05, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
# Save by dche145 on 2019_12_16-13.48.58; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='square_1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['square_1'].submit(consistencyChecking=OFF)
mdb.jobs['square_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square_1.odb', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 1156, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square_1', 'memory': 36.0})
mdb.jobs['square_1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square_1', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.297636842416532, 
    'attempts': 2, 'timeIncrement': 0.297636842416532, 'increment': 1, 
    'stepTime': 0.297636842416532, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.595273684833065, 
    'attempts': 1, 'timeIncrement': 0.297636842416532, 'increment': 2, 
    'stepTime': 0.595273684833065, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.892910527249597, 
    'attempts': 1, 'timeIncrement': 0.297636842416532, 'increment': 3, 
    'stepTime': 0.892910527249597, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.107089472750403, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square_1', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square_1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 14:23:26 2019', 'jobName': 'square_1'})
mdb.models['square'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=CPE8RT, elemLibrary=STANDARD), ElemType(elemCode=CPE6MT, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ), ))
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].rootAssembly.regenerate()
mdb.models['square'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=CPE8RT, elemLibrary=STANDARD), ElemType(elemCode=CPE6MT, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ), ))
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].setMeshControls(elemShape=TRI, regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].rootAssembly.regenerate()
mdb.jobs['square_1'].submit(consistencyChecking=OFF)
mdb.jobs['square_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square_1.odb', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 8356, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square_1', 'memory': 96.0})
mdb.jobs['square_1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MINIMUM_MEMORY, {'minimum_memory': 28.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.296562304208639, 
    'attempts': 2, 'timeIncrement': 0.296562304208639, 'increment': 1, 
    'stepTime': 0.296562304208639, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.593124608417278, 
    'attempts': 1, 'timeIncrement': 0.296562304208639, 'increment': 2, 
    'stepTime': 0.593124608417278, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.889686912625917, 
    'attempts': 1, 'timeIncrement': 0.296562304208639, 'increment': 3, 
    'stepTime': 0.889686912625917, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.110313087374083, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 14:31:14 2019', 'jobName': 'square_1'})
mdb.models['square'].materials['calcite'].expansion.setValues(table=((9e-06, ), 
    ))
mdb.models['square'].materials['pyrite'].expansion.setValues(table=((1e-05, ), 
    ))
del mdb.jobs['square']
mdb.jobs['square_1'].submit(consistencyChecking=OFF)
mdb.jobs['square_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square_1.odb', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 460, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square_1', 'memory': 96.0})
mdb.jobs['square_1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MINIMUM_MEMORY, {'minimum_memory': 28.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.296562304208639, 
    'attempts': 2, 'timeIncrement': 0.296562304208639, 'increment': 1, 
    'stepTime': 0.296562304208639, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.593124608417278, 
    'attempts': 1, 'timeIncrement': 0.296562304208639, 'increment': 2, 
    'stepTime': 0.593124608417278, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.889686912625917, 
    'attempts': 1, 'timeIncrement': 0.296562304208639, 'increment': 3, 
    'stepTime': 0.889686912625917, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.110313087374083, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 14:47:37 2019', 'jobName': 'square_1'})
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 712, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.05, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 1, 'stepTime': 0.05, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 2, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.15, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 3, 'stepTime': 0.15, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 4, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.25, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 5, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 6, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 7, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 8, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.45, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 9, 'stepTime': 0.45, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 10, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.55, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 11, 'stepTime': 0.55, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 12, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.65, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 13, 'stepTime': 0.65, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.7, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 14, 'stepTime': 0.7, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.75, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 15, 'stepTime': 0.75, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 16, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.85, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 17, 'stepTime': 0.85, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 18, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.95, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 19, 'stepTime': 0.95, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 20, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.05, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 21, 'stepTime': 1.05, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 22, 'stepTime': 1.1, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.15, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 23, 'stepTime': 1.15, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 24, 'stepTime': 1.2, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.25, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 25, 'stepTime': 1.25, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.3, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 26, 'stepTime': 1.3, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 27, 'stepTime': 1.35, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.4, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 28, 'stepTime': 1.4, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.45, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 29, 'stepTime': 1.45, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 30, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.55, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 31, 'stepTime': 1.55, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.6, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 32, 'stepTime': 1.6, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.65, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 33, 'stepTime': 1.65, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.7, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 34, 'stepTime': 1.7, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.75, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 35, 'stepTime': 1.75, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 36, 'stepTime': 1.8, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.85, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 37, 'stepTime': 1.85, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.9, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 38, 'stepTime': 1.9, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.95, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 39, 'stepTime': 1.95, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 40, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.05, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 41, 'stepTime': 2.05, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 42, 'stepTime': 2.1, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.15, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 43, 'stepTime': 2.15, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.2, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 44, 'stepTime': 2.2, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.25, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 45, 'stepTime': 2.25, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.3, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 46, 'stepTime': 2.3, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.35, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 47, 'stepTime': 2.35, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 48, 'stepTime': 2.4, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.45, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 49, 'stepTime': 2.45, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 50, 'stepTime': 2.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.55, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 51, 'stepTime': 2.55, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.6, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 52, 'stepTime': 2.6, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.65, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 53, 'stepTime': 2.65, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.7, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 54, 'stepTime': 2.7, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.75, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 55, 'stepTime': 2.75, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.8, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 56, 'stepTime': 2.8, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.85, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 57, 'stepTime': 2.85, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.9, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 58, 'stepTime': 2.9, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.95, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 59, 'stepTime': 2.95, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 60, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.05, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 61, 'stepTime': 3.05, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.1, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 62, 'stepTime': 3.1, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.15, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 63, 'stepTime': 3.15, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.2, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 64, 'stepTime': 3.2, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.25, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 65, 'stepTime': 3.25, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.3, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 66, 'stepTime': 3.3, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.35, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 67, 'stepTime': 3.35, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.4, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 68, 'stepTime': 3.4, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.45, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 69, 'stepTime': 3.45, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.5, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 70, 'stepTime': 3.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.55, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 71, 'stepTime': 3.55, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.6, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 72, 'stepTime': 3.6, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.65, 'attempts': 1, 
    'timeIncrement': 0.05, 'increment': 73, 'stepTime': 3.65, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.69999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 74, 
    'stepTime': 3.69999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.74999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 75, 
    'stepTime': 3.74999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.79999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 76, 
    'stepTime': 3.79999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.84999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 77, 
    'stepTime': 3.84999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.89999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 78, 
    'stepTime': 3.89999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.94999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 79, 
    'stepTime': 3.94999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.99999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 80, 
    'stepTime': 3.99999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.04999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 81, 
    'stepTime': 4.04999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.09999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 82, 
    'stepTime': 4.09999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.14999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 83, 
    'stepTime': 4.14999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.19999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 84, 
    'stepTime': 4.19999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.24999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 85, 
    'stepTime': 4.24999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.29999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 86, 
    'stepTime': 4.29999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.34999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 87, 
    'stepTime': 4.34999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.39999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 88, 
    'stepTime': 4.39999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.44999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 89, 
    'stepTime': 4.44999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.49999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 90, 
    'stepTime': 4.49999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.54999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 91, 
    'stepTime': 4.54999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.59999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 92, 
    'stepTime': 4.59999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.64999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 93, 
    'stepTime': 4.64999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.69999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 94, 
    'stepTime': 4.69999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.74999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 95, 
    'stepTime': 4.74999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.79999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 96, 
    'stepTime': 4.79999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.84999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 97, 
    'stepTime': 4.84999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.89999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 98, 
    'stepTime': 4.89999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.94999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 99, 
    'stepTime': 4.94999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.99999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 100, 
    'stepTime': 4.99999999999999, 'step': 1, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.04999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 1, 'stepTime': 0.05, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.09999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 2, 'stepTime': 0.1, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.14999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 3, 'stepTime': 0.15, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.19999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 4, 'stepTime': 0.2, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.24999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 5, 'stepTime': 0.25, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.29999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 6, 'stepTime': 0.3, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.34999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 7, 'stepTime': 0.35, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.39999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 8, 'stepTime': 0.4, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.44999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 9, 'stepTime': 0.45, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.49999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 10, 'stepTime': 0.5, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 11, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.54999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 11, 'stepTime': 0.55, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 12, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.59999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 12, 'stepTime': 0.6, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 13, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.64999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 13, 'stepTime': 0.65, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 14, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.69999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 14, 'stepTime': 0.7, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 15, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.74999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 15, 'stepTime': 0.75, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 16, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.79999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 16, 'stepTime': 0.8, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 17, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.84999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 17, 'stepTime': 0.85, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 18, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.89999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 18, 'stepTime': 0.9, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 19, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.94999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 19, 'stepTime': 0.95, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 20, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.99999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 20, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 21, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.04999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 21, 'stepTime': 1.05, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 22, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.09999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 22, 'stepTime': 1.1, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 23, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.14999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 23, 'stepTime': 1.15, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 24, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.19999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 24, 'stepTime': 1.2, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 25, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.24999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 25, 'stepTime': 1.25, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 26, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.29999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 26, 'stepTime': 1.3, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 27, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.34999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 27, 'stepTime': 1.35, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 28, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.39999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 28, 'stepTime': 1.4, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 29, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.44999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 29, 'stepTime': 1.45, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 30, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.49999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 30, 'stepTime': 1.5, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 31, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.54999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 31, 'stepTime': 1.55, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 32, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.59999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 32, 'stepTime': 1.6, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 33, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.64999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 33, 'stepTime': 1.65, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 34, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.69999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 34, 'stepTime': 1.7, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 35, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.74999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 35, 'stepTime': 1.75, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 36, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.79999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 36, 'stepTime': 1.8, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 37, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.84999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 37, 'stepTime': 1.85, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 38, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.89999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 38, 'stepTime': 1.9, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 39, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.94999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 39, 'stepTime': 1.95, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 40, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.99999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 40, 'stepTime': 2.0, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 41, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.04999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 41, 'stepTime': 2.05, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 42, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.09999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 42, 'stepTime': 2.1, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 43, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.14999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 43, 'stepTime': 2.15, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 44, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.19999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 44, 'stepTime': 2.2, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 45, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.24999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 45, 'stepTime': 2.25, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 46, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.29999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 46, 'stepTime': 2.3, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 47, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.34999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 47, 'stepTime': 2.35, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 48, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.39999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 48, 'stepTime': 2.4, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 49, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.44999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 49, 'stepTime': 2.45, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 50, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.49999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 50, 'stepTime': 2.5, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 51, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.54999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 51, 'stepTime': 2.55, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 52, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.59999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 52, 'stepTime': 2.6, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 53, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.64999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 53, 'stepTime': 2.65, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 54, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.69999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 54, 'stepTime': 2.7, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 55, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.74999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 55, 'stepTime': 2.75, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 56, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.79999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 56, 'stepTime': 2.8, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 57, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.84999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 57, 'stepTime': 2.85, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 58, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.89999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 58, 'stepTime': 2.9, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 59, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.94999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 59, 'stepTime': 2.95, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 60, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.99999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 60, 'stepTime': 3.0, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 61, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.04999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 61, 'stepTime': 3.05, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 62, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.09999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 62, 'stepTime': 3.1, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 63, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.14999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 63, 'stepTime': 3.15, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 64, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.19999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 64, 'stepTime': 3.2, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 65, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.24999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 65, 'stepTime': 3.25, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 66, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.29999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 66, 'stepTime': 3.3, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 67, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.34999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 67, 'stepTime': 3.35, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 68, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.39999999999998, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 68, 'stepTime': 3.4, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 69, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.44999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 69, 'stepTime': 3.45, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 70, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.49999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 70, 'stepTime': 3.5, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 71, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.54999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 71, 'stepTime': 3.55, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 72, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.59999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 72, 'stepTime': 3.6, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 73, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.64999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 73, 'stepTime': 3.65, 
    'step': 2, 'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 74, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.69999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 74, 
    'stepTime': 3.69999999999999, 'step': 2, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 75, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.74999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 75, 
    'stepTime': 3.74999999999999, 'step': 2, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 76, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.79999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 76, 
    'stepTime': 3.79999999999999, 'step': 2, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 77, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.84999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 77, 
    'stepTime': 3.84999999999999, 'step': 2, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 78, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.89999999999999, 
    'attempts': 1, 'timeIncrement': 0.05, 'increment': 78, 
    'stepTime': 3.89999999999999, 'step': 2, 'jobName': 'square-3d', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'square-3d'})
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.5)
mdb.models['square-3d'].steps['cool_down'].setValues(initialInc=0.5)
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.Model(name='square-backup', objectToCopy=mdb.models['square-3d'])
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 9200, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.models.changeKey(fromName='square-backup', toName='square-3d-backup')
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.Model(name='square-25d', objectToCopy=mdb.models['square-3d-backup'])
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.models['square-25d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-25d'].parts['Part-3'].features['Solid extrude-1'].sketch)
mdb.models['square-25d'].parts['Part-3'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-25d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-25d'].parts['Part-3'].features['Solid extrude-1'])
del mdb.models['square-25d'].sketches['__edit__']
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.models['square-25d'].parts['Part-3'].features['Solid extrude-1'].setValues(
    depth=0.005)
mdb.models['square-25d'].parts['Part-3'].regenerate()
mdb.models['square-25d'].parts['Part-3'].regenerate()
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.models['square-25d'].parts['Part-2'].features['Solid extrude-1'].setValues(
    depth=0.05)
mdb.models['square-25d'].parts['Part-2'].regenerate()
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
del mdb.models['square-25d'].rootAssembly.features['Part-1-1']
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.models['square-25d'].rootAssembly.resumeFeatures(('Part-2-1', 'Part-3-1'))
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 1835.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 262.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.models['square-25d'].rootAssembly.translate(instanceList=('Part-3-1', ), 
    vector=(0.0, 0.0, -0.1775))
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
del mdb.models['square-25d'].parts['Part-1']
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 10.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 16:34:54 2019', 'jobName': 'square-3d'})
mdb.models['square-25d'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['square-25d'].rootAssembly.instances['Part-2-1'], 
    mdb.models['square-25d'].rootAssembly.instances['Part-3-1']), 
    keepIntersections=ON, name='Part-1', originalInstances=SUPPRESS)
del mdb.models['square-25d'].steps['cool_down']
mdb.models['square-25d'].steps['heat_up'].setValues(cetol=None, 
    creepIntegration=None, deltmx=10.0, maxInc=0.5, timeIncrementationMethod=
    AUTOMATIC, timePeriod=1.0)
mdb.models['square-25d'].loads['Load-1'].setValues(region=Region(
    cells=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['square-25d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1f ]', ), ), 
    edges=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#fff ]', ), ), 
    vertices=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#f7 ]', ), )))
mdb.models['square-25d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    faces=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#fff ]', ), ), 
    edges=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#fffeff ]', ), ), 
    vertices=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#ff3f ]', ), )))
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), size=0.005)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ffffff ]', ), ), size=0.005)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ffffff ]', ), ), size=0.05)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), size=0.005)
mdb.models['square-25d'].parts['Part-1'].setMeshControls(elemShape=TET, 
    regions=mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=FREE)
mdb.models['square-25d'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['square-25d'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20RT, elemLibrary=STANDARD), ElemType(elemCode=UNKNOWN_WEDGE, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10MT, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['square-25d'].parts['Part-1'].generateMesh()
mdb.models['square-25d'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['square-25d'].parts['Part-1'].setMeshControls(elemShape=HEX, 
    regions=mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['square-25d'].parts['Part-1'].setMeshControls(elemShape=TET, 
    regions=mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), technique=FREE)
mdb.models['square-25d'].parts['Part-1'].generateMesh()
mdb.models['square-25d'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-25d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='square-25d', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['square-25d'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-25d'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='pyrite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-25d'].rootAssembly.regenerate()
mdb.jobs['square-25d'].submit(consistencyChecking=OFF)
mdb.jobs['square-25d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-25d'})
# Save by dche145 on 2019_12_16-16.44.43; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-25d.odb', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 7916, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-25d', 'memory': 315.0})
mdb.jobs['square-25d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MINIMUM_MEMORY, {'minimum_memory': 59.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-25d']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 16:44:49 2019', 'jobName': 'square-25d'})
mdb.models['square-25d'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=STANDARD), ElemType(elemCode=C3D6T, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4T, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['square-25d'].parts['Part-1'].generateMesh()
mdb.models['square-25d'].rootAssembly.regenerate()
mdb.jobs['square-25d'].submit(consistencyChecking=OFF)
mdb.jobs['square-25d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-25d.odb', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 6208, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-25d', 'memory': 43.0})
mdb.jobs['square-25d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-25d']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 17:03:25 2019', 'jobName': 'square-25d'})
del mdb.models['square-25d'].parts['Part-1']
mdb.models['square-25d'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
del mdb.models['square-25d'].rootAssembly.features['Part-1-1']
mdb.models['square-25d'].rootAssembly.resumeFeatures(('Part-2-1', 'Part-3-1'))
mdb.models['square-25d'].parts['Part-3'].features['Solid extrude-1'].setValues(
    depth=0.05)
mdb.models['square-25d'].parts['Part-3'].regenerate()
mdb.models['square-25d'].rootAssembly.regenerate()
del mdb.models['square-25d'].parts['Part-2'].features['Datum pt-1']
mdb.models['square-25d'].parts['Part-2'].DatumPointByMidPoint(point1=
    mdb.models['square-25d'].parts['Part-2'].vertices[4], point2=
    mdb.models['square-25d'].parts['Part-2'].vertices[0])
mdb.models['square-25d'].parts['Part-3'].DatumPointByMidPoint(point1=
    mdb.models['square-25d'].parts['Part-3'].vertices[4], point2=
    mdb.models['square-25d'].parts['Part-3'].vertices[0])
mdb.models['square-25d'].rootAssembly.regenerate()
mdb.models['square-25d'].rootAssembly.translate(instanceList=('Part-3-1', ), 
    vector=(-0.025, 0.025, -0.0225))
mdb.models['square-25d'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['square-25d'].rootAssembly.instances['Part-2-1'], 
    mdb.models['square-25d'].rootAssembly.instances['Part-3-1']), 
    keepIntersections=ON, name='Part-1', originalInstances=SUPPRESS)
mdb.models['square-25d'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='pyrite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-25d'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-25d'].rootAssembly.regenerate()
mdb.models['square-25d'].steps['heat_up'].setValues(cetol=None, 
    creepIntegration=None, deltmx=None, initialInc=0.1, 
    timeIncrementationMethod=FIXED)
mdb.models['square-25d'].loads['Load-1'].setValues(region=Region(
    cells=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['square-25d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#ff0 ]', ), ), 
    edges=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#4 ]', ), )))
mdb.models['square-25d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    faces=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#fff ]', ), ), 
    edges=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#ffffff ]', ), ), 
    vertices=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#ffff ]', ), )))
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.005)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ffffff ]', ), ), size=0.05)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ffffff ]', ), ), size=0.025)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#ffffff ]', ), ), size=0.015)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.005)
mdb.models['square-25d'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4T, elemLibrary=STANDARD)), regions=(
    mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['square-25d'].parts['Part-1'].generateMesh()
mdb.models['square-25d'].rootAssembly.regenerate()
mdb.jobs['square-25d'].submit(consistencyChecking=OFF)
mdb.jobs['square-25d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-25d.odb', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 4068, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-25d', 'memory': 1855.0})
mdb.jobs['square-25d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MINIMUM_MEMORY, {'minimum_memory': 204.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 17:27:06 2019', 'jobName': 'square-25d'})
mdb.models['square-25d'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), size=0.5)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), size=0.05)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff000 ]', ), ), size=0.025)
mdb.models['square-25d'].parts['Part-1'].generateMesh()
mdb.models['square-25d'].rootAssembly.regenerate()
mdb.jobs['square-25d'].submit(consistencyChecking=OFF)
mdb.jobs['square-25d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-25d.odb', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 7008, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-25d', 'memory': 132.0})
mdb.jobs['square-25d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 17:45:09 2019', 'jobName': 'square-25d'})
mdb.models['square-25d'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square-25d'].parts['Part-1'].cells.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.005)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.002)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.003)
mdb.models['square-25d'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-25d'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff ]', ), ), size=0.005)
mdb.models['square-25d'].rootAssembly.regenerate()
mdb.models['square-25d'].parts['Part-1'].generateMesh()
mdb.models['square-25d'].rootAssembly.regenerate()
mdb.jobs['square-25d'].submit(consistencyChecking=OFF)
mdb.jobs['square-25d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-25d.odb', 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 6276, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-25d', 'memory': 1041.0})
mdb.jobs['square-25d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(MINIMUM_MEMORY, {'minimum_memory': 130.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.models['square'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['square'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square'].parts['Part-1'].features['Partition face-1'])
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.models['square'].sketches['__edit__'].move(objectList=(
    mdb.models['square'].sketches['__edit__'].geometry[7], 
    mdb.models['square'].sketches['__edit__'].geometry[18], 
    mdb.models['square'].sketches['__edit__'].geometry[19], 
    mdb.models['square'].sketches['__edit__'].geometry[20], 
    mdb.models['square'].sketches['__edit__'].geometry[23], 
    mdb.models['square'].sketches['__edit__'].vertices[26], 
    mdb.models['square'].sketches['__edit__'].vertices[35]), vector=(-0.05, 
    0.05))
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.models['square'].parts['Part-1'].features['Partition face-1'].setValues(
    sketch=mdb.models['square'].sketches['__edit__'])
del mdb.models['square'].sketches['__edit__']
mdb.models['square'].parts['Part-1'].regenerate()
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.models['square'].ConstrainedSketch(gridSpacing=0.7, name='__profile__', 
    sheetSize=28.28, transform=
    mdb.models['square'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['square'].parts['Part-1'].faces[1], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(0.333333, 
    -0.333333, 0.0)))
mdb.models['square'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square'].sketches['__profile__'])
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    -0.0249996666667879, 0.0249996666686068), point2=(-0.249999666666667, 
    -0.0248788153572083))
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[9], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[11])
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    -0.0249996666667879, -0.0248788153572083), point2=(0.0250003333332121, 
    -0.0250003333313931))
mdb.models['square'].sketches['__profile__'].undo()
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    -0.0249996666667879, -0.0248788153572083), point2=(0.0257140850467682, 
    -0.250000333333333))
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[12], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[12])
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    0.0250003333332119, 0.0249996666686068), point2=(0.250000333333333, 
    -0.0251583611412048))
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[15], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[13])
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    -0.0249996666667879, 0.0249996666686068), point2=(0.0259838556690216, 
    0.249999666666667))
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[18], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[10])
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    -0.249999666666667, 0.249999666666667), point2=(-0.0249996666667879, 
    0.0249996666686068))
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    -0.0249996666667879, -0.0248788153572083), point2=(-0.249999666666667, 
    -0.250000333333333))
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    0.0259838556690216, 0.0249996666686068), point2=(0.250000333333333, 
    0.249999666666667))
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    0.0257140850467682, -0.0248788153572083), point2=(0.250000333333333, 
    -0.250000333333333))
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.models['square'].sketches['__profile__'].undo()
mdb.models['square'].sketches['__profile__'].undo()
mdb.models['square'].sketches['__profile__'].undo()
mdb.models['square'].sketches['__profile__'].undo()
mdb.models['square'].sketches['__profile__'].undo()
mdb.models['square'].sketches['__profile__'].undo()
mdb.models['square'].sketches['__profile__'].undo()
mdb.models['square'].sketches['__profile__'].undo()
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.models['square'].sketches['__profile__'].ConstructionLine(point1=(
    -0.0249996666667878, -0.0250003333313932), point2=(0.0250003333332121, 
    -0.0250003333313931))
mdb.models['square'].sketches['__profile__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['square'].sketches['__profile__'].geometry[14])
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[0], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[14])
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[1], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[14])
mdb.models['square'].sketches['__profile__'].ConstructionLine(point1=(
    -0.0249996666667879, 0.0249996666686068), point2=(-0.0249996666667878, 
    -0.0250003333313932))
mdb.models['square'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['square'].sketches['__profile__'].geometry[15])
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[3], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[15])
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[0], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[15])
mdb.models['square'].sketches['__profile__'].ConstructionLine(point1=(
    0.0250003333332119, 0.0249996666686068), point2=(0.0250003333332121, 
    -0.0250003333313931))
mdb.models['square'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['square'].sketches['__profile__'].geometry[16])
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[2], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[16])
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[1], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[16])
mdb.models['square'].sketches['__profile__'].ConstructionLine(point1=(
    -0.0249996666667879, 0.0249996666686068), point2=(0.0250003333332119, 
    0.0249996666686068))
mdb.models['square'].sketches['__profile__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['square'].sketches['__profile__'].geometry[17])
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[3], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[17])
mdb.models['square'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__profile__'].vertices[2], 
    entity2=mdb.models['square'].sketches['__profile__'].geometry[17])
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    -0.249999666666667, 0.249999666666667), point2=(-0.0249996666667879, 
    0.0249996666686068))
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    -0.249999666666667, -0.250000333333333), point2=(-0.0249996666667878, 
    -0.0250003333313932))
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    0.250000333333333, 0.249999666666667), point2=(0.0250003333332119, 
    0.0249996666686068))
mdb.models['square'].sketches['__profile__'].rectangle(point1=(
    0.250000333333333, -0.250000333333333), point2=(0.0250003333332121, 
    -0.0250003333313931))
mdb.jobs['square-25d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-25d', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'square-25d'})
mdb.jobs['square-25d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d'})
mdb.models['square'].parts['Part-1'].PartitionFaceBySketch(faces=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#2 ]', ), 
    ), sketch=mdb.models['square'].sketches['__profile__'])
del mdb.models['square'].sketches['__profile__']
mdb.jobs['square-25d']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 18:09:06 2019', 'jobName': 'square-25d'})
mdb.models['square'].rootAssembly.regenerate()
mdb.models['square'].boundaryConditions['BC-1'].setValues(region=Region(
    edges=mdb.models['square'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#b689e2 ]', ), )))
mdb.models['square'].predefinedFields['initial_temp'].setValues(region=Region(
    faces=mdb.models['square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1ff ]', ), ), 
    edges=mdb.models['square'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#ffffff ]', ), ), 
    vertices=mdb.models['square'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#ffff ]', ), )))
mdb.models['square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square'].parts['Part-1'].edges.getSequenceFromMask((
    '[#808802 ]', ), ), size=0.005)
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#119 ]', 
    ), ))
mdb.models['square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square'].parts['Part-1'].edges.getSequenceFromMask((
    '[#808802 ]', ), ), size=0.02)
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#1ff ]', 
    ), ))
mdb.models['square'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#1ff ]', 
    ), ))
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#1ff ]', 
    ), ))
mdb.models['square'].ConstrainedSketch(gridSpacing=0.03, name='__profile__', 
    sheetSize=1.41, transform=
    mdb.models['square'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['square'].parts['Part-1'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(0.333333, 
    -0.470833, 0.0)))
mdb.models['square'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square'].sketches['__profile__'])
del mdb.models['square'].sketches['__profile__']
mdb.models['square'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square'].parts['Part-1'].features['Partition face-2'].sketch)
mdb.models['square'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square'].parts['Part-1'].features['Partition face-2'])
mdb.models['square'].sketches['__edit__'].ConstructionLine(point1=(
    -0.0249996666667879, 0.0249996666686068), point2=(0.0250003333332121, 
    -0.0250003333313931))
mdb.models['square'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__edit__'].vertices[3], 
    entity2=mdb.models['square'].sketches['__edit__'].geometry[42])
mdb.models['square'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__edit__'].vertices[1], 
    entity2=mdb.models['square'].sketches['__edit__'].geometry[42])
mdb.models['square'].sketches['__edit__'].ConstructionLine(point1=(
    0.0250003333332119, 0.0249996666686068), point2=(-0.0249996666667878, 
    -0.0250003333313932))
mdb.models['square'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__edit__'].vertices[2], 
    entity2=mdb.models['square'].sketches['__edit__'].geometry[43])
mdb.models['square'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__edit__'].vertices[0], 
    entity2=mdb.models['square'].sketches['__edit__'].geometry[43])
mdb.models['square'].sketches['__edit__'].rectangle(point1=(-0.047510131654235, 
    0.047510131656054), point2=(0.0504550492196358, -0.0504550492178168))
mdb.models['square'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__edit__'].vertices[16], 
    entity2=mdb.models['square'].sketches['__edit__'].geometry[42])
mdb.models['square'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square'].sketches['__edit__'].vertices[18], 
    entity2=mdb.models['square'].sketches['__edit__'].geometry[42])
mdb.models['square'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['square'].sketches['__edit__'].geometry[47], entity2=
    mdb.models['square'].sketches['__edit__'].geometry[19], textPoint=(
    -0.0726258898334503, 0.0235033774929047), value=0.02)
mdb.models['square'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['square'].sketches['__edit__'].geometry[45], entity2=
    mdb.models['square'].sketches['__edit__'].geometry[14], textPoint=(
    -0.0632023060874939, -0.0244714176101685), value=0.02)
mdb.models['square'].parts['Part-1'].features['Partition face-2'].setValues(
    sketch=mdb.models['square'].sketches['__edit__'])
del mdb.models['square'].sketches['__edit__']
mdb.models['square'].parts['Part-1'].regenerate()
mdb.models['square'].rootAssembly.regenerate()
mdb.models['square'].boundaryConditions['BC-1'].setValues(region=Region(
    edges=mdb.models['square'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#430608b0 #c4 ]', ), )))
mdb.models['square'].predefinedFields['initial_temp'].setValues(region=Region(
    faces=mdb.models['square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1ffff ]', ), ), 
    edges=mdb.models['square'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #fff ]', ), ), 
    vertices=mdb.models['square'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#fffffff ]', ), )))
mdb.models['square'].parts['Part-1'].generateMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#4000 ]', 
    ), ))
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#4000 ]', 
    ), ))
mdb.models['square'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1ffff ]', ), ))
mdb.models['square'].parts['Part-1'].generateMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#4000 ]', 
    ), ))
mdb.models['square'].parts['Part-1'].generateMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#400 ]', 
    ), ))
mdb.models['square'].parts['Part-1'].generateMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#800 ]', 
    ), ))
mdb.models.changeKey(fromName='square', toName='square-meshing-exp')
mdb.Model(name='square', objectToCopy=mdb.models['square-meshing-exp'])
del mdb.models['square'].parts['Part-1'].features['Partition face-2']
mdb.models['square'].rootAssembly.regenerate()
mdb.models['square'].loads['Load-1'].setValues(region=Region(
    faces=mdb.models['square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['square'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    edges=mdb.models['square'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#ff ]', ), ), 
    vertices=mdb.models['square'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#ff ]', ), )))
mdb.models['square'].predefinedFields['initial_temp'].setValues(region=Region(
    faces=mdb.models['square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    edges=mdb.models['square'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#ff ]', ), ), 
    vertices=mdb.models['square'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#ff ]', ), )))
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#2 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square'].parts['Part-1'].edges.getSequenceFromMask(('[#f0 ]', 
    ), ), size=0.05)
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].rootAssembly.regenerate()
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#2 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].setMeshControls(elemShape=QUAD_DOMINATED, 
    regions=mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].setMeshControls(elemShape=TRI, regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].rootAssembly.regenerate()
mdb.jobs['square_1'].submit(consistencyChecking=OFF)
mdb.jobs['square_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square_1.odb', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 6656, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square_1', 'memory': 45.0})
mdb.jobs['square_1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.296630210006852, 
    'attempts': 2, 'timeIncrement': 0.296630210006852, 'increment': 1, 
    'stepTime': 0.296630210006852, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.593260420013704, 
    'attempts': 1, 'timeIncrement': 0.296630210006852, 'increment': 2, 
    'stepTime': 0.593260420013704, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.889890630020557, 
    'attempts': 1, 'timeIncrement': 0.296630210006852, 'increment': 3, 
    'stepTime': 0.889890630020557, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.110109369979443, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 18:37:33 2019', 'jobName': 'square_1'})
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].setMeshControls(elemShape=QUAD_DOMINATED, 
    regions=mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square'].parts['Part-1'].edges.getSequenceFromMask(('[#f ]', ), 
    ), size=0.001)
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), technique=SWEEP)
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#2 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square'].parts['Part-1'].edges.getSequenceFromMask(('[#f ]', ), 
    ), size=0.005)
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].rootAssembly.regenerate()
mdb.jobs['square_1'].submit(consistencyChecking=OFF)
mdb.jobs['square_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square_1.odb', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 8932, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square_1', 'memory': 34.0})
mdb.jobs['square_1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.295653672539194, 
    'attempts': 2, 'timeIncrement': 0.295653672539194, 'increment': 1, 
    'stepTime': 0.295653672539194, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.591307345078388, 
    'attempts': 1, 'timeIncrement': 0.295653672539194, 'increment': 2, 
    'stepTime': 0.591307345078388, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.886961017617582, 
    'attempts': 1, 'timeIncrement': 0.295653672539194, 'increment': 3, 
    'stepTime': 0.886961017617582, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.113038982382418, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 18:42:26 2019', 'jobName': 'square_1'})
mdb.models['square'].boundaryConditions['BC-1'].setValues(region=Region(
    edges=mdb.models['square'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#f0 ]', ), )))
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ), technique=FREE)
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].rootAssembly.regenerate()
mdb.jobs['square_1'].submit(consistencyChecking=OFF)
mdb.jobs['square_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square_1.odb', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 8884, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square_1', 'memory': 34.0})
mdb.jobs['square_1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.295654367483355, 
    'attempts': 2, 'timeIncrement': 0.295654367483355, 'increment': 1, 
    'stepTime': 0.295654367483355, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.591308734966709, 
    'attempts': 1, 'timeIncrement': 0.295654367483355, 'increment': 2, 
    'stepTime': 0.591308734966709, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.886963102450064, 
    'attempts': 1, 'timeIncrement': 0.295654367483355, 'increment': 3, 
    'stepTime': 0.886963102450064, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.113036897549936, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 18:44:32 2019', 'jobName': 'square_1'})
mdb.models['square'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square'].parts['Part-1'].faces.getSequenceFromMask(('[#3 ]', ), 
    ))
mdb.models['square'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square'].parts['Part-1'].edges.getSequenceFromMask(('[#f ]', ), 
    ), size=0.002)
mdb.models['square'].parts['Part-1'].generateMesh()
mdb.models['square'].rootAssembly.regenerate()
mdb.jobs['square_1'].submit(consistencyChecking=OFF)
mdb.jobs['square_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square_1.odb', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 8912, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square_1', 'memory': 54.0})
mdb.jobs['square_1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.296315600107144, 
    'attempts': 2, 'timeIncrement': 0.296315600107144, 'increment': 1, 
    'stepTime': 0.296315600107144, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.592631200214288, 
    'attempts': 1, 'timeIncrement': 0.296315600107144, 'increment': 2, 
    'stepTime': 0.592631200214288, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.888946800321432, 
    'attempts': 1, 'timeIncrement': 0.296315600107144, 'increment': 3, 
    'stepTime': 0.888946800321432, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.111053199678568, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 18:47:57 2019', 'jobName': 'square_1'})
mdb.models['square-meshing-exp'].rootAssembly.regenerate()
mdb.models['square-meshing-exp'].rootAssembly.regenerate()
mdb.models['square-meshing-exp'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'].sketch)
mdb.models['square-meshing-exp'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['square-meshing-exp'].sketches['__edit__'], upToFeature=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'])
del mdb.models['square-meshing-exp'].sketches['__edit__']
mdb.models['square-meshing-exp'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'].sketch)
mdb.models['square-meshing-exp'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['square-meshing-exp'].sketches['__edit__'], upToFeature=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'])
del mdb.models['square-meshing-exp'].sketches['__edit__']
mdb.models['square-meshing-exp'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-1'].sketch)
mdb.models['square-meshing-exp'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['square-meshing-exp'].sketches['__edit__'], upToFeature=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-1'])
del mdb.models['square-meshing-exp'].sketches['__edit__']
mdb.models['square-meshing-exp'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'].sketch)
mdb.models['square-meshing-exp'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['square-meshing-exp'].sketches['__edit__'], upToFeature=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'])
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[10], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[11], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[13], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[15], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[16], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[18], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[20], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[21], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[26], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[28], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[29], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[42], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[43], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].constraints[76], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].constraints[77], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].constraints[118], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].constraints[119]))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[12], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[22], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[24], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[25], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[30], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[32], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[33], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].constraints[97], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].constraints[98], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].constraints[139], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].constraints[140]))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[14], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[17], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[19], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[23]))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[27], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[31]))
mdb.models['square-meshing-exp'].sketches['__edit__'].ConstructionLine(point1=(
    -0.044999666666788, 0.0449996666686068), point2=(0.0450003333332122, 
    -0.0450003333313931))
mdb.models['square-meshing-exp'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-meshing-exp'].sketches['__edit__'].vertices[16], 
    entity2=mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[56])
mdb.models['square-meshing-exp'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-meshing-exp'].sketches['__edit__'].vertices[18], 
    entity2=mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[56])
mdb.models['square-meshing-exp'].sketches['__edit__'].ConstructionLine(point1=(
    -0.044999666666788, -0.0450003333313931), point2=(0.0450003333332122, 
    0.0449996666686068))
mdb.models['square-meshing-exp'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-meshing-exp'].sketches['__edit__'].vertices[17], 
    entity2=mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[57])
mdb.models['square-meshing-exp'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-meshing-exp'].sketches['__edit__'].vertices[19], 
    entity2=mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[57])
mdb.models['square-meshing-exp'].parts['Part-1'].projectEdgesOntoSketch(edges=(
    mdb.models['square-meshing-exp'].parts['Part-1'].edges[4], 
    mdb.models['square-meshing-exp'].parts['Part-1'].edges[5], 
    mdb.models['square-meshing-exp'].parts['Part-1'].edges[17], 
    mdb.models['square-meshing-exp'].parts['Part-1'].edges[18], 
    mdb.models['square-meshing-exp'].parts['Part-1'].edges[24], 
    mdb.models['square-meshing-exp'].parts['Part-1'].edges[25], 
    mdb.models['square-meshing-exp'].parts['Part-1'].edges[38], 
    mdb.models['square-meshing-exp'].parts['Part-1'].edges[39]), sketch=
    mdb.models['square-meshing-exp'].sketches['__edit__'], upToFeature=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'])
del mdb.models['square-meshing-exp'].sketches['__edit__']
mdb.models['square-meshing-exp'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'].sketch)
mdb.models['square-meshing-exp'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['square-meshing-exp'].sketches['__edit__'], upToFeature=
    mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'])
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].dimensions[0], ))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].dimensions[1], ))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[15], ))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[20], ))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[17], ))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[19], ))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[14], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[23]))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[24], ))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[16], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[32]))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[28], ))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[27], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[31]))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[13], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[26]))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[10], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[21], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[29]))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[11], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[18], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[22]))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[30], ))
mdb.models['square-meshing-exp'].sketches['__edit__'].delete(objectList=(
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[12], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[25], 
    mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[33]))
mdb.models['square-meshing-exp'].sketches['__edit__'].rectangle(point1=(
    -0.044999666666788, 0.0449996666686068), point2=(-0.252564221081229, 
    0.252564221083048))
mdb.models['square-meshing-exp'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-meshing-exp'].sketches['__edit__'].vertices[21], 
    entity2=mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[42])
mdb.models['square-meshing-exp'].sketches['__edit__'].rectangle(point1=(
    0.0450003333332122, 0.0449996666686068), point2=(0.253389781259102, 
    0.253389114596757))
mdb.models['square-meshing-exp'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-meshing-exp'].sketches['__edit__'].vertices[24], 
    entity2=mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[43])
mdb.models['square-meshing-exp'].sketches['__edit__'].rectangle(point1=(
    -0.044999666666788, -0.0450003333313931), point2=(-0.25654187247892, 
    -0.256542539141265))
mdb.models['square-meshing-exp'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-meshing-exp'].sketches['__edit__'].vertices[27], 
    entity2=mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[43])
mdb.models['square-meshing-exp'].sketches['__edit__'].rectangle(point1=(
    0.0450003333332122, -0.0450003333313931), point2=(0.25945545786999, 
    -0.259455457868171))
mdb.models['square-meshing-exp'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-meshing-exp'].sketches['__edit__'].vertices[30], 
    entity2=mdb.models['square-meshing-exp'].sketches['__edit__'].geometry[42])
mdb.models['square-meshing-exp'].parts['Part-1'].features['Partition face-2'].setValues(
    sketch=mdb.models['square-meshing-exp'].sketches['__edit__'])
del mdb.models['square-meshing-exp'].sketches['__edit__']
mdb.models['square-meshing-exp'].parts['Part-1'].regenerate()
mdb.models['square-meshing-exp'].rootAssembly.regenerate()
mdb.models['square-meshing-exp'].boundaryConditions['BC-1'].setValues(region=
    Region(
    edges=mdb.models['square-meshing-exp'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#a5c6cc ]', ), ), 
    vertices=mdb.models['square-meshing-exp'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#dedd ]', ), )))
mdb.models['square-meshing-exp'].parts['Part-1'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['square-meshing-exp'].parts['Part-1'].edges.getSequenceFromMask(
    ('[#5a0000 ]', ), ), minSizeFactor=0.1, size=0.005)
mdb.models['square-meshing-exp'].parts['Part-1'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['square-meshing-exp'].parts['Part-1'].edges.getSequenceFromMask(
    ('[#a5c6cc ]', ), ), size=0.05)
mdb.models['square-meshing-exp'].parts['Part-1'].generateMesh()
mdb.models['square-meshing-exp'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square-meshing-exp'].parts['Part-1'].faces.getSequenceFromMask(
    ('[#f0 ]', ), ))
mdb.models['square-meshing-exp'].parts['Part-1'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['square-meshing-exp'].parts['Part-1'].edges.getSequenceFromMask(
    ('[#a50000 ]', ), ), size=0.002)
mdb.models['square-meshing-exp'].parts['Part-1'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['square-meshing-exp'].parts['Part-1'].edges.getSequenceFromMask(
    ('[#a50000 ]', ), ), size=0.003)
mdb.models['square-meshing-exp'].parts['Part-1'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['square-meshing-exp'].parts['Part-1'].edges.getSequenceFromMask(
    ('[#a50000 ]', ), ), size=0.005)
mdb.models['square-meshing-exp'].parts['Part-1'].generateMesh()
mdb.models['square-meshing-exp'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square-meshing-exp'].parts['Part-1'].faces.getSequenceFromMask(
    ('[#300 ]', ), ))
mdb.models['square-meshing-exp'].parts['Part-1'].deleteSeeds(regions=
    mdb.models['square-meshing-exp'].parts['Part-1'].edges.getSequenceFromMask(
    ('[#f000000 ]', ), ))
mdb.models['square-meshing-exp'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square-meshing-exp'].parts['Part-1'].faces.getSequenceFromMask(
    ('[#59 ]', ), ))
mdb.models['square-meshing-exp'].parts['Part-1'].deleteSeeds(regions=
    mdb.models['square-meshing-exp'].parts['Part-1'].edges.getSequenceFromMask(
    ('[#1001 ]', ), ))
mdb.models['square-meshing-exp'].parts['Part-1'].generateMesh()
mdb.models['square-meshing-exp'].parts['Part-1'].deleteMesh(regions=
    mdb.models['square-meshing-exp'].parts['Part-1'].faces.getSequenceFromMask(
    ('[#300 ]', ), ))
mdb.models['square-meshing-exp'].parts['Part-1'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['square-meshing-exp'].parts['Part-1'].edges.getSequenceFromMask(
    ('[#f000000 ]', ), ), minSizeFactor=0.1, size=0.002)
mdb.models['square-meshing-exp'].parts['Part-1'].seedEdgeBySize(constraint=
    FINER, deviationFactor=0.1, edges=
    mdb.models['square-meshing-exp'].parts['Part-1'].edges.getSequenceFromMask(
    ('[#f000000 ]', ), ), minSizeFactor=0.1, size=0.005)
mdb.models['square-meshing-exp'].parts['Part-1'].generateMesh()
mdb.models['square-meshing-exp'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-meshing-exp', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='square_mesh_exp', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['square_mesh_exp'].submit(consistencyChecking=OFF)
mdb.jobs['square_mesh_exp']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square_mesh_exp.odb', 
    'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 2284, 
    'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square_mesh_exp', 'memory': 36.0})
mdb.jobs['square_mesh_exp']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'square_mesh_exp', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_mesh_exp']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(STATUS, {'totalTime': 0.295555716429682, 
    'attempts': 2, 'timeIncrement': 0.295555716429682, 'increment': 1, 
    'stepTime': 0.295555716429682, 'step': 1, 'jobName': 'square_mesh_exp', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_mesh_exp']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(STATUS, {'totalTime': 0.591111432859363, 
    'attempts': 1, 'timeIncrement': 0.295555716429682, 'increment': 2, 
    'stepTime': 0.591111432859363, 'step': 1, 'jobName': 'square_mesh_exp', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_mesh_exp']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(STATUS, {'totalTime': 0.886667149289045, 
    'attempts': 1, 'timeIncrement': 0.295555716429682, 'increment': 3, 
    'stepTime': 0.886667149289045, 'step': 1, 'jobName': 'square_mesh_exp', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_mesh_exp']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.113332850710955, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square_mesh_exp', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_mesh_exp']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_mesh_exp'})
mdb.jobs['square_mesh_exp']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 19:24:11 2019', 'jobName': 'square_mesh_exp'})
# Save by dche145 on 2019_12_16-19.26.31; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-meshing-exp'].rootAssembly.writeAcisFile(
    '//ad.monash.edu/home/User045/dche145/Documents/Abaqus/electromag/square_3d.sat'
    , 24)
# Save by dche145 on 2019_12_16-19.28.09; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].rootAssembly.writeAcisFile(
    '//ad.monash.edu/home/User045/dche145/Documents/Abaqus/electromag/square_3d.sat'
    , 24)
# Save by dche145 on 2019_12_16-19.29.45; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['Part-3'].features['Solid extrude-1'].sketch)
mdb.models['square-3d'].parts['Part-3'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['Part-3'].features['Solid extrude-1'])
mdb.models['square-3d'].sketches['__edit__'].dimensions[0].setValues(textPoint=
    (0.664906620979309, -0.496948152780533))
mdb.models['square-3d'].sketches['__edit__'].dimensions[1].setValues(textPoint=
    (0.589443206787109, -0.619576275348663))
mdb.models['square-3d'].sketches['__edit__'].dimensions[0].setValues(textPoint=
    (0.660608768463135, -0.545463681221008))
mdb.models['square-3d'].sketches['__edit__'].dimensions[0].setValues(value=
    0.025)
mdb.models['square-3d'].sketches['__edit__'].dimensions[1].setValues(value=
    0.025)
mdb.models['square-3d'].parts['Part-3'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['square-3d'].sketches['__edit__'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].parts['Part-3'].regenerate()
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['Part-3'].features['Solid extrude-1'].sketch)
mdb.models['square-3d'].parts['Part-3'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['Part-3'].features['Solid extrude-1'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].parts['Part-3'].features['Solid extrude-1'].setValues(
    depth=0.025)
mdb.models['square-3d'].parts['Part-3'].regenerate()
mdb.models['square-3d'].parts.changeKey(fromName='Part-2', toName='calcite')
mdb.models['square-3d'].parts.changeKey(fromName='Part-3', toName='pyrite')
mdb.models['square-3d'].parts['calcite'].deleteFeatures(('Datum plane-1', 
    'Datum pt-1'))
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'].sketch)
mdb.models['square-3d'].parts['calcite'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'])
mdb.models['square-3d'].sketches['__edit__'].dimensions[0].setValues(textPoint=
    (4.81150388717651, -4.13862752914429))
mdb.models['square-3d'].sketches['__edit__'].dimensions[1].setValues(textPoint=
    (4.19953107833862, -4.8593955039978))
mdb.models['square-3d'].sketches['__edit__'].dimensions[0].setValues(value=
    0.125)
mdb.models['square-3d'].sketches['__edit__'].dimensions[1].setValues(value=
    0.125)
mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['square-3d'].sketches['__edit__'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].parts['calcite'].regenerate()
mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'].setValues(
    depth=0.125)
mdb.models['square-3d'].parts['calcite'].regenerate()
mdb.models['square-3d'].rootAssembly.resumeFeatures(('Part-2-1', 'Part-3-1'))
del mdb.models['square-3d'].rootAssembly.features['Part-1-1']
mdb.models['square-3d'].rootAssembly.translate(instanceList=('Part-3-1', ), 
    vector=(0.1, -0.2, -0.1))
mdb.models['square-3d'].loads['Load-1'].setValues(region=Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['Part-3-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['square-3d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['Part-2-1'].faces.getSequenceFromMask(
    mask=('[#3f ]', ), )))
mdb.models['square-3d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['Part-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['square-3d'].rootAssembly.instances['Part-3-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), 
    faces=mdb.models['square-3d'].rootAssembly.instances['Part-2-1'].faces.getSequenceFromMask(
    mask=('[#3f ]', ), )+\
    mdb.models['square-3d'].rootAssembly.instances['Part-3-1'].faces.getSequenceFromMask(
    mask=('[#3f ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['Part-2-1'].edges.getSequenceFromMask(
    mask=('[#fff ]', ), )+\
    mdb.models['square-3d'].rootAssembly.instances['Part-3-1'].edges.getSequenceFromMask(
    mask=('[#fff ]', ), ), 
    vertices=mdb.models['square-3d'].rootAssembly.instances['Part-2-1'].vertices.getSequenceFromMask(
    mask=('[#ff ]', ), )+\
    mdb.models['square-3d'].rootAssembly.instances['Part-3-1'].vertices.getSequenceFromMask(
    mask=('[#ff ]', ), )))
del mdb.models['square-3d'].parts['Part-1']
mdb.models['square-3d'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['square-3d'].rootAssembly.instances['Part-2-1'], 
    mdb.models['square-3d'].rootAssembly.instances['Part-3-1']), 
    keepIntersections=ON, name='merge', originalInstances=SUPPRESS)
mdb.models['square-3d'].loads['Load-1'].setValues(region=Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['merge-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['square-3d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merge-1'].faces.getSequenceFromMask(
    mask=('[#ff8 ]', ), )))
mdb.models['square-3d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['merge-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    faces=mdb.models['square-3d'].rootAssembly.instances['merge-1'].faces.getSequenceFromMask(
    mask=('[#fff ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['merge-1'].edges.getSequenceFromMask(
    mask=('[#ffffff ]', ), ), 
    vertices=mdb.models['square-3d'].rootAssembly.instances['merge-1'].vertices.getSequenceFromMask(
    mask=('[#7fff ]', ), )))
mdb.models['square-3d'].parts['merge'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4T, elemLibrary=STANDARD)), regions=(
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), ))
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#87ff ]', ), ), size=0.0025)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#ff7800 ]', ), ), size=0.025)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#ff7800 ]', ), ), size=0.005)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#ff7800 ]', ), ), size=0.01)
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].setMeshControls(elemShape=TET, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), technique=FREE)
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d-backup'].parts['Part-1'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#2 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#ff7800 ]', ), ), size=0.03)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#ff7800 ]', ), ), size=0.02)
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].parts['merge'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d'].parts['merge'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='pyrite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\4\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01005', 'handle': 5504, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 147.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 29.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 147.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 29.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 10.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(JOB_COMPLETED, {
    'time': 'Mon Dec 16 19:59:09 2019', 'jobName': 'square-3d'})
# Save by dche145 on 2019_12_16-20.13.12; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d-backup'].rootAssembly.regenerate()
mdb.models['square-3d-backup'].rootAssembly.regenerate()
# Save by dche145 on 2019_12_16-20.14.30; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merge-1'].faces.getSequenceFromMask(
    mask=('[#a40 ]', ), )))
mdb.models['square-3d'].ZsymmBC(createStepName='Initial', localCsys=None, name=
    'BC-2', region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merge-1'].faces.getSequenceFromMask(
    mask=('[#408 ]', ), )))
mdb.models['square-3d'].XsymmBC(createStepName='Initial', localCsys=None, name=
    'BC-3', region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merge-1'].faces.getSequenceFromMask(
    mask=('[#120 ]', ), )))
mdb.models['square-3d'].YsymmBC(createStepName='Initial', localCsys=None, name=
    'BC-4', region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merge-1'].faces.getSequenceFromMask(
    mask=('[#90 ]', ), )))
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\3\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 2376, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 147.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 29.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 147.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 29.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 10.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(JOB_COMPLETED, {
    'time': 'Wed Dec 18 16:58:11 2019', 'jobName': 'square-3d'})
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['square-3d'].parts['merge'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merge'].InterestingPoint(
    mdb.models['square-3d'].parts['merge'].edges[19], MIDDLE), vector=(0.0, 
    0.5, 0.0))
mdb.models['square-3d'].parts['merge'].DatumPointByMidPoint(point1=
    mdb.models['square-3d'].parts['merge'].InterestingPoint(
    mdb.models['square-3d'].parts['merge'].edges[19], MIDDLE), point2=
    mdb.models['square-3d'].parts['merge'].vertices[4])
mdb.models['square-3d'].parts['merge'].DatumPointByMidPoint(point1=
    mdb.models['square-3d'].parts['merge'].InterestingPoint(
    mdb.models['square-3d'].parts['merge'].edges[11], MIDDLE), point2=
    mdb.models['square-3d'].parts['merge'].vertices[6])
mdb.models['square-3d'].parts['merge'].DatumPointByMidPoint(point1=
    mdb.models['square-3d'].parts['merge'].vertices[1], point2=
    mdb.models['square-3d'].parts['merge'].InterestingPoint(
    mdb.models['square-3d'].parts['merge'].edges[14], MIDDLE))
mdb.models['square-3d'].parts['merge'].features['Datum pt-1'].setValues(
    yOffset=0.1)
mdb.models['square-3d'].parts['merge'].regenerate()
mdb.models['square-3d'].parts['merge'].regenerate()
mdb.models['square-3d'].parts['merge'].features['Datum pt-1'].setValues(
    yOffset=-0.1)
mdb.models['square-3d'].parts['merge'].regenerate()
mdb.models['square-3d'].parts['merge'].features['Datum pt-1'].setValues(
    yOffset=-0.105)
mdb.models['square-3d'].parts['merge'].regenerate()
mdb.models['square-3d'].parts['merge'].features['Datum pt-1'].setValues(
    yOffset=-0.05)
mdb.models['square-3d'].parts['merge'].regenerate()
mdb.models['square-3d'].parts['merge'].features['Datum pt-1'].setValues(
    yOffset=-0.03)
mdb.models['square-3d'].parts['merge'].regenerate()
mdb.models['square-3d'].parts['merge'].features['Datum pt-1'].setValues(
    yOffset=-0.04)
mdb.models['square-3d'].parts['merge'].regenerate()
mdb.models['square-3d'].parts['merge'].regenerate()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#2 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merge'].edges[19], point=
    mdb.models['square-3d'].parts['merge'].datums[13])
mdb.models['square-3d'].parts['merge'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merge'].edges[11], point=
    mdb.models['square-3d'].parts['merge'].datums[14])
mdb.models['square-3d'].parts['merge'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merge'].edges[15], point=
    mdb.models['square-3d'].parts['merge'].datums[15])
mdb.models['square-3d'].parts['merge'].Set(edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#210800 ]', ), ), name='near_cube_edge')
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#210800 ]', ), ), size=0.005)
mdb.models['square-3d'].parts['merge'].Set(edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#210800 ]', ), ), name='near_cube_edge')
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#210800 ]', ), ), size=0.003)
mdb.models['square-3d'].parts['merge'].Set(edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#210800 ]', ), ), name='near_cube_edge')
mdb.models['square-3d'].parts['merge'].Set(edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#210800 ]', ), ), name='near_cube_edge')
# Save by dche145 on 2019_12_18-17.11.53; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\3\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 8036, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 193.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 37.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 193.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 37.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 10.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.models['square'].ZsymmBC(createStepName='Initial', localCsys=None, name=
    'BC-2', region=Region(
    faces=mdb.models['square'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3 ]', ), )))
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(JOB_COMPLETED, {
    'time': 'Wed Dec 18 17:13:17 2019', 'jobName': 'square-3d'})
mdb.jobs['square_1'].submit(consistencyChecking=OFF)
mdb.jobs['square_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\3\\square_1.odb', 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 5280, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square_1', 'memory': 54.0})
mdb.jobs['square_1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.296315600107144, 
    'attempts': 2, 'timeIncrement': 0.296315600107144, 'increment': 1, 
    'stepTime': 0.296315600107144, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.592631200214288, 
    'attempts': 1, 'timeIncrement': 0.296315600107144, 'increment': 2, 
    'stepTime': 0.592631200214288, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 0.888946800321432, 
    'attempts': 1, 'timeIncrement': 0.296315600107144, 'increment': 3, 
    'stepTime': 0.888946800321432, 'step': 1, 'jobName': 'square_1', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.111053199678568, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'square_1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square_1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square_1'})
mdb.jobs['square_1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square_1'})
mdb.jobs['square_1']._Message(JOB_COMPLETED, {
    'time': 'Wed Dec 18 17:13:41 2019', 'jobName': 'square_1'})
# Save by dche145 on 2019_12_18-17.18.12; build 2019 2018_09_25-04.41.51 157541
# Save by dche145 on 2019_12_18-19.09.50; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-25d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3c0 ]', ), )))
mdb.models['square-25d'].ZsymmBC(createStepName='Initial', localCsys=None, 
    name='BC-2', region=Region(
    faces=mdb.models['square-25d'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#c30 ]', ), )))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-25d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='square-25d-sym', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['square-25d-sym'].submit(consistencyChecking=OFF)
mdb.jobs['square-25d-sym']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\square-25d-sym.odb', 
    'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 2428, 
    'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-25d-sym', 'memory': 1041.0})
mdb.jobs['square-25d-sym']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(MINIMUM_MEMORY, {'minimum_memory': 130.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 0.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-25d-sym', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['square-25d-sym']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-25d-sym'})
mdb.jobs['square-25d-sym']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 21 09:30:12 2019', 'jobName': 'square-25d-sym'})
# Save by dche145 on 2019_12_21-10.27.20; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='square-3d-macro', objectToCopy=mdb.models['square-3d'])
del mdb.models['square-3d-macro'].parts['merge']
mdb.models['square-3d-macro'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['square-3d-macro'].rootAssembly.deleteFeatures(('Part-2-1', 
    'Part-3-1', 'merge-1'))
mdb.models['square-3d-macro'].rootAssembly.Instance(dependent=ON, name=
    'calcite-1', part=mdb.models['square-3d-macro'].parts['calcite'])
mdb.models['square-3d-macro'].rootAssembly.Instance(dependent=ON, name=
    'pyrite-1', part=mdb.models['square-3d-macro'].parts['pyrite'])
mdb.models['square-3d-macro'].rootAssembly.instances['pyrite-1'].translate(
    vector=(4.34193643569946, 0.0, 0.0))
mdb.models['square-3d-macro'].rootAssembly.Instance(dependent=ON, name=
    'pyrite-2', part=mdb.models['square-3d-macro'].parts['pyrite'])
mdb.models['square-3d-macro'].rootAssembly.instances['pyrite-2'].translate(
    vector=(4.36943643569946, 0.0, 0.0))
mdb.models['square-3d-macro'].rootAssembly.Instance(dependent=ON, name=
    'pyrite-3', part=mdb.models['square-3d-macro'].parts['pyrite'])
mdb.models['square-3d-macro'].rootAssembly.instances['pyrite-3'].translate(
    vector=(4.39693643569946, 0.0, 0.0))
mdb.models['square-3d-macro'].rootAssembly.translate(instanceList=('calcite-1', 
    ), vector=(-4.875, 5.0, -0.125))
mdb.models['square-3d-macro'].rootAssembly.translate(instanceList=('pyrite-1', 
    'pyrite-2', 'pyrite-3'), vector=(-4.8775, 0.772752, -0.15))
mdb.models['square-3d-macro'].rootAssembly.translate(instanceList=('pyrite-1', 
    ), vector=(-0.075, -0.075, 0.075))
mdb.models['square-3d-macro'].rootAssembly.translate(instanceList=('pyrite-2', 
    ), vector=(-0.0825, -0.055, 0.095))
mdb.models['square-3d-macro'].rootAssembly.translate(instanceList=('pyrite-3', 
    ), vector=(-0.09, -0.105, 0.095))
mdb.models['square-3d-macro'].rootAssembly.InstanceFromBooleanMerge(domain=
    GEOMETRY, instances=(
    mdb.models['square-3d-macro'].rootAssembly.instances['calcite-1'], 
    mdb.models['square-3d-macro'].rootAssembly.instances['pyrite-1'], 
    mdb.models['square-3d-macro'].rootAssembly.instances['pyrite-2'], 
    mdb.models['square-3d-macro'].rootAssembly.instances['pyrite-3']), 
    keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d-macro'].parts['merged'].Set(cells=
    mdb.models['square-3d-macro'].parts['merged'].cells.getSequenceFromMask((
    '[#10 ]', ), ), name='calcite')
mdb.models['square-3d-macro'].parts['merged'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['square-3d-macro'].parts['merged'].sets['calcite'], sectionName=
    'calcite', thicknessAssignment=FROM_SECTION)
mdb.models['square-3d-macro'].parts['merged'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d-macro'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#f ]', ), )), sectionName='pyrite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d-macro'].rootAssembly.regenerate()
mdb.Model(name='square-3d-macro-start-origin', objectToCopy=
    mdb.models['square-3d-macro'])
del mdb.models['square-3d-macro-start-origin'].parts['calcite']
del mdb.models['square-3d-macro-start-origin'].parts['pyrite']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-5.0, 5.0), point2=(5.0, -5.0))
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].ObliqueDimension(
    textPoint=(-0.220954895019531, 7.77778244018555), value=2.0, vertex1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[3]
    , vertex2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[0])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].ObliqueDimension(
    textPoint=(7.02651977539063, -2.65151214599609), value=2.0, vertex1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[2]
    , vertex2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[3])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].ConstructionLine(
    point1=(3.0, -3.0), point2=(5.0, -5.0))
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[0]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[6])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[2]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[6])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].ConstructionLine(
    point1=(5.0, -3.0), point2=(3.0, -5.0))
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[3]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[7])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[1]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[7])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].Spot(point=(
    4.0, -4.0))
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[4]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[6])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].move(
    objectList=(
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[2], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[3], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[4], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[5], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[6], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[7], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[4])
    , vector=(-4.0, 4.0))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'calcite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['calcite'].BaseSolidExtrude(
    depth=2.0, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].parts['calcite'].DatumPointByCoordinate(
    coords=(0.0, 0.0, 0.0))
mdb.models['square-3d-macro-start-origin'].parts['calcite'].DatumPointByMidPoint(
    point1=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'].vertices[5], 
    point2=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'].vertices[7])
del mdb.models['square-3d-macro-start-origin'].parts['calcite'].features['Datum pt-2']
mdb.models['square-3d-macro-start-origin'].parts['calcite'].DatumPointByMidPoint(
    point1=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'].vertices[5], 
    point2=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'].vertices[0])
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-1.00161969661713, 0.767095804214478), point2=(1.25, -1.25))
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].ObliqueDimension(
    textPoint=(-2.39788341522217, -0.366492867469788), value=0.5, vertex1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[0]
    , vertex2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[1])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].ObliqueDimension(
    textPoint=(0.114906311035156, 1.12066781520844), value=0.5, vertex1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[3]
    , vertex2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[0])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].ConstructionLine(
    point1=(-1.00161969661713, -0.75), point2=(-0.50161969661713, -1.25))
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[0]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[6])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[2]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[6])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].ConstructionLine(
    point1=(-0.50161969661713, -0.75), point2=(-1.00161969661713, -1.25))
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[3]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[7])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[1]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[7])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].Spot(point=(
    -0.751619696617126, -1.0))
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[4]
    , entity2=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[6])
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].move(
    objectList=(
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[2], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[3], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[4], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[5], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[6], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].geometry[7], 
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].vertices[4])
    , vector=(0.751619696617126, 1.0))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'pyrite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['pyrite'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'calcite-1', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'merged-1'))
# Save by dche145 on 2019_12_24-11.08.56; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['square-3d-macro'].parts['merged']
mdb.models['square-3d-macro'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['square-3d-macro'].rootAssembly.deleteFeatures(('calcite-1', 
    'pyrite-1', 'pyrite-2', 'pyrite-3', 'merged-1'))
mdb.models['square-3d-macro'].rootAssembly.Instance(dependent=ON, name=
    'calcite-1', part=mdb.models['square-3d-macro'].parts['calcite'])
mdb.models['square-3d-macro'].rootAssembly.Instance(dependent=ON, name=
    'pyrite-1', part=mdb.models['square-3d-macro'].parts['pyrite'])
mdb.models['square-3d-macro'].rootAssembly.translate(instanceList='pyrite-1', 
    vector=(0, 0, 1))
#* TypeError: instanceList; found string, expecting sequence of Strings
mdb.models['square-3d-macro'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d-macro'].parts['calcite'].features['Solid extrude-1'].sketch)
mdb.models['square-3d-macro'].parts['calcite'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['square-3d-macro'].sketches['__edit__'], upToFeature=
    mdb.models['square-3d-macro'].parts['calcite'].features['Solid extrude-1'])
del mdb.models['square-3d-macro'].sketches['__edit__']
del mdb.models['square-3d-macro-start-origin'].parts['merged']
mdb.models['square-3d-macro'].rootAssembly.Instance(dependent=ON, name=
    'pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    'pyrite-1', vector=(0, 0, 1))
#* TypeError: instanceList; found string, expecting sequence of Strings
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=(0, 0, 1))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=(-0.5, 0.2, 0.5))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=(-0.5, 0.2, 0.5))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=(-0.5, -0.5, 1))
mdb.models['square-3d-macro-start-origin'].rootAssembly.InstanceFromBooleanMerge(
    domain=GEOMETRY, instances=(
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['calcite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-2'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-3'])
    , keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d-macro-start-origin'].parts['merged'].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d-macro-start-origin'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
# Save by dche145 on 2019_12_26-22.26.53; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
# Save by dche145 on 2019_12_26-22.36.00; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d-macro-start-origin'].parts['merged'].writeStepFile(
    '//ad.monash.edu/home/User045/dche145/Documents/Abaqus/merged_part.stp')
mdb.models['square-3d-macro-start-origin'].parts['calcite'].writeStepFile(
    '//ad.monash.edu/home/User045/dche145/Documents/Abaqus/cube.stp')
del mdb.models['2-square-dist-0']
del mdb.models['2-square-dist-1']
del mdb.models['2-square-dist-2']
del mdb.models['2-square-dist-3']
del mdb.models['2-square-dist-4']
del mdb.models['2-square-dist-5']
del mdb.models['2-square-dist-6']
del mdb.models['2-square-dist-7']
del mdb.models['2-square-dist-8']
del mdb.models['2-square-dist-9']
del mdb.models['2-square-touch']
# Save by dche145 on 2019_12_28-22.24.53; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['s0']
del mdb.jobs['s1']
del mdb.jobs['s2']
del mdb.jobs['s3']
del mdb.jobs['s4']
del mdb.jobs['s5']
del mdb.jobs['s6']
del mdb.jobs['s7']
del mdb.jobs['s8']
del mdb.jobs['s9']
mdb.jobs['square-3d'].submit(consistencyChecking=OFF)
# Save by dche145 on 2019_12_28-22.27.20; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['square-3d']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\15\\square-3d.odb', 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 6992, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 193.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 37.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 3.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 1, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'square-3d', 'memory': 193.0})
mdb.jobs['square-3d']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(MINIMUM_MEMORY, {'minimum_memory': 37.0, 
    'phase': STANDARD_PHASE, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 5.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 1, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 2, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 6.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 3, 'stepTime': 1.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 4, 'stepTime': 2.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 7.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 5, 'stepTime': 2.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 6, 'stepTime': 3.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 8.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 7, 'stepTime': 3.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 8, 'stepTime': 4.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 9.5, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 9, 'stepTime': 4.5, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(STATUS, {'totalTime': 10.0, 'attempts': 1, 
    'timeIncrement': 0.5, 'increment': 10, 'stepTime': 5.0, 'step': 2, 
    'jobName': 'square-3d', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['square-3d']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'square-3d'})
mdb.jobs['square-3d']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 28 22:28:02 2019', 'jobName': 'square-3d'})
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2)
mdb.models['square-3d'].steps['cool_down'].setValues(initialInc=0.2)
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=100000000.0)
del mdb.models['square-3d'].steps['cool_down']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux_108', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux_108'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux_108']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 0, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\15\\heatflux_108.odb', 
    'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01002', 'handle': 4928, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'heatflux_108', 'memory': 193.0})
mdb.jobs['heatflux_108']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(MINIMUM_MEMORY, {'minimum_memory': 37.0, 
    'phase': STANDARD_PHASE, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 1, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 2, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 3, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 4, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 5, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 6, 'stepTime': 1.2, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 1.4, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 7, 'stepTime': 1.4, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 1.6, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 8, 'stepTime': 1.6, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 9, 'stepTime': 1.8, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 10, 'stepTime': 2.0, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 2.2, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 11, 'stepTime': 2.2, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 12, 'stepTime': 2.4, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 2.6, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 13, 'stepTime': 2.6, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 2.8, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 14, 'stepTime': 2.8, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 15, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 3.2, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 16, 'stepTime': 3.2, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 3.4, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 17, 'stepTime': 3.4, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 3.6, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 18, 'stepTime': 3.6, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 3.8, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 19, 'stepTime': 3.8, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 20, 'stepTime': 4.0, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 4.2, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 21, 'stepTime': 4.2, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 4.4, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 22, 'stepTime': 4.4, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 4.6, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 23, 'stepTime': 4.6, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 4.8, 'attempts': 1, 
    'timeIncrement': 0.2, 'increment': 24, 'stepTime': 4.8, 'step': 1, 
    'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.199999999999998, 'increment': 25, 'stepTime': 5.0, 
    'step': 1, 'jobName': 'heatflux_108', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux_108']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux_108'})
mdb.jobs['heatflux_108']._Message(JOB_COMPLETED, {
    'time': 'Sat Dec 28 23:56:54 2019', 'jobName': 'heatflux_108'})
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    6.0)
# Save by dche145 on 2019_12_29-00.10.02; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].rootAssembly.rotate(angle=90.0, axisDirection=(10.0, 
    0.0, 0.0), axisPoint=(4.875, -4.875, 0.125), instanceList=('Part-2-1', 
    'Part-3-1', 'merge-1'))
mdb.models['square-3d'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    -0.125, 0.0), axisPoint=(4.9375, -4.75, 0.125), instanceList=('Part-2-1', 
    'Part-3-1', 'merge-1'))
# Save by dche145 on 2020_01_01-11.03.23; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='square-3d-macro-start-origin-Copy', objectToCopy=
    mdb.models['square-3d-macro-start-origin'])
del mdb.models['square-3d-macro-start-origin'].parts['merged']
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-1', 'calcite-1', 'pyrite-2', 'pyrite-3', 'merged-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    'pyrite-0', vector=(0, 0, -0.25))
#* TypeError: instanceList; found string, expecting sequence of Strings
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    'pyrite-0', vector=[0, 0, -0.25])
#* TypeError: instanceList; found string, expecting sequence of Strings
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    'pyrite-0', vector=[0, 0, -0.25])
#* TypeError: instanceList; found string, expecting sequence of Strings
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    2.63882360131836, axisDirection=[-1, 0, 0], axisPoint=[1, 0, 0], 
    instanceList='pyrite-0')
#* TypeError: instanceList; found string, expecting sequence of Strings
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    2.63882360131836, axisDirection=[-1, 0, 0], axisPoint=[1, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    2.63882360131836, axisDirection=[-1, 0, 0], axisPoint=[1, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    2.63882360131836, axisDirection=[-1, 0, 0], axisPoint=[1, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    2.63882360131836, axisDirection=[-1, 0, 0], axisPoint=[1, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, 0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, 0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    2.6388236013183568, axisDirection=array([-1, 0, 0], 'l'), axisPoint=array(
    [1, 0, 0], 'l'), instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    0.83336599647978737, axisDirection=array([0, -1, 0], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    4.9750229932368066, axisDirection=array([0, 0, -1], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    2.5336469366039851, axisDirection=array([-1, 0, 0], 'l'), axisPoint=array(
    [1, 0, 0], 'l'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    0.1932433448078768, axisDirection=array([0, -1, 0], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    2.7889462966232719, axisDirection=array([0, 0, -1], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=array([-1, 0, 0], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0, -1, 0], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0, 0, -1], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=array([-1, 0, 0], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0, -1, 0], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0, 0, -1], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=array([-1, 0, 0], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-0', ))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-1']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=array([-1, 0, 0], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=45, 
    axisDirection=array([0, -1, 0], 'l'), axisPoint=array([0, 0, 0], 'l'), 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
# Save by dche145 on 2020_01_01-16.17.01; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=array([-1, 0, 0], 'l'), axisPoint=array(
    [1, 0, 0], 'l'), instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0, 0, 0], 'l'), axisPoint=array(
    [0, 0, 0], 'l'), instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[-1, 0, 0], axisPoint=[1, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, 0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=array([0.0, -0.820823119421463, 
    0.571182463511633], 'd'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[-1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, 0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=array([0.0, 0.0, 0.0], 'd'), 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    -11.072028076482651, axisDirection=array([0.0, 0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=array([0.0, 0.0, 0.0], 'd'), 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, 0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=array([0.0, 0.0, 0.0], 'd'), 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    -11.072028076482651, axisDirection=array([0.0, 0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=array([0.0, 0.0, 0.0], 'd'), 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(0.0, 0.820823119421463, -0.571182463511633))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['calcite-1']
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(0.0, 1.0, 0.0))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(0.0, 0.707106781186548, 0.707106781186547))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-1']
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=90, 
    axisDirection=array([-1.0, 0.0, 0.0], 'd'), axisPoint=array([0.0, 0.0, 
    0.0], 'd'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=45, 
    axisDirection=array([-1.0, 0.0, 0.0], 'd'), axisPoint=array([0.0, 0.0, 
    0.0], 'd'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-45, 
    axisDirection=array([-1.0, 0.0, 0.0], 'd'), axisPoint=array([0.0, 0.0, 
    0.0], 'd'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=155, 
    axisDirection=array([-1.0, 0.0, 0.0], 'd'), axisPoint=array([0.0, 0.0, 
    0.0], 'd'), instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'Datum pt-1', 'Datum pt-2', 'Datum pt-3'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(0.0, 0.90630778703665, -0.422618261740699))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(0.0, 0.90630778703665, 0.422618261740699))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=45, 
    axisDirection=[-1, 0, 0], axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-45, 
    axisDirection=[-1, 0, 0], axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-10, 
    axisDirection=[-1, 0, 0], axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(0.0, -0.984807753012208, -0.17364817766693))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=45, 
    axisDirection=array([0.0, -0.984807753012208, 0.17364817766693], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(-0.984807753012208, 0.17364817766693, 0.0))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'Datum pt-1', 'Datum pt-2', 'Datum pt-3'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(0.0, -0.984807753012208, -0.17364817766693))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(0.0, -0.984807753012208, 0.17364817766693))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['Datum pt-4']
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-45, 
    axisDirection=array([0.0, -0.984807753012208, 0.17364817766693], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-0']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=10, 
    axisDirection=[-1, 0, 0], axisPoint=[0, 0, 0], instanceList=('pyrite-0', ))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-1']
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(0.0, 0.984807753012208, -0.17364817766693))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'Datum pt-1', 'Datum pt-2'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=45, 
    axisDirection=array([0.0, 0.984807753012208, -0.17364817766693], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
#* The rotation operation failed because the existing constraints are 
#* restricting rotation about the given axis.
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=45, 
    axisDirection=array([0.0, 0.984807753012208, -0.17364817766693], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-45, 
    axisDirection=array([0.0, 0.984807753012208, -0.17364817766693], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=45, 
    axisDirection=array([0.0, 0.984807753012208, -0.17364817766693], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-45, 
    axisDirection=array([0.0, 0.984807753012208, -0.17364817766693], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-25, 
    axisDirection=array([0.0, 0.984807753012208, -0.17364817766693], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('pyrite-0', ))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-0']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    572.95779513082323, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
#* Offset value out of range.
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    572.95779513082323, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
#* Offset value out of range.
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.839071529076452, 
    0.54402111088937], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.766026367491116, 
    -0.54402111088937, -0.342410039594434], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.876251644714226, 
    -0.481853769452533], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.648600429848597, 
    0.481853769452533, -0.589181149787228], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, -0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0.157633231227987, 
    0.571182463511633, -0.805544758402291], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.55131739475462, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.21619419299651, axisDirection=array([0.0, -0.772193982041898, 
    -0.635386853891608], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.778188452966518, axisDirection=array([-0.593403596507278, 
    0.635386853891608, 0.494121156756065], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.22822809009696, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.55933310706052, axisDirection=array([0.0, -0.831258440305193, 
    -0.555886144296994], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.6055919396259739, axisDirection=array([0.276668179288313, 
    0.555886144296994, 0.783865621868896], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.679797940363219, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.85838885903684, axisDirection=array([0.0, 0.877315432360602, 
    -0.479914192478124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.67972367641693, axisDirection=array([0.139383608768552, 
    0.479914192478124, 0.866172371681714], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.459232508350148, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.7157356537729, axisDirection=array([0.0, 0.936921134114912, 
    -0.349540825153267], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.183116676110771, axisDirection=array([-0.821693178756725, 
    0.349540825153267, -0.450157229794037], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912002, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.35293635674735, axisDirection=array([0.0, 0.88131065119846, 
    -0.472537338296294], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.90811748804845, axisDirection=array([-0.830002146258827, 
    0.472537338296294, 0.296318917927281], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.44401183008594, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.25663643282743, axisDirection=array([0.0, -0.334727828154473, 
    0.942314852402842], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.39999312085766, axisDirection=array([-0.306395836215276, 
    -0.942314852402842, 0.134775036601563], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.497225925851451, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.39558861618512, axisDirection=array([0.0, 0.983263729659283, 
    -0.182187919293562], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.37873093150677, axisDirection=array([-0.79146779935764, 
    0.182187919293562, -0.583426331805017], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247022, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.57300080213656, axisDirection=array([0.0, -0.999994914439335, 
    -0.00318921549410667], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.44485544526509, axisDirection=array([-0.991272711498969, 
    0.00318921549410667, -0.131788619926056], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=array([-0.0987669379819463, 0.107291244636664, 
    -0.0493026073726909], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=array([-0.158679827397266, 0.0744934243735815, 
    -0.557700950494747], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=array([-0.346542006019282, -0.343981730377222, 
    -0.0965032438480572], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=array([-0.149812389317816, -0.063433562792167, 
    0.112323082026807], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=array([0.218044649245286, 0.129839855791476, 
    -0.178661869095126], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=array([0.189543978919312, -0.0515249837999538, 
    0.506032257252129], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=array([0.215549448085812, 0.00470550120189785, 
    -0.0277583569918616], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=array([-0.310572930612818, 0.038481908174273, 
    -0.359689251966049], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=array([0.110364305545639, -0.587713464927444, 
    -0.369095320341085], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=array([0.450591941302, 0.473255521238928, 
    0.407912332283511], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.InstanceFromBooleanMerge(
    domain=GEOMETRY, instances=(
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['calcite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-2'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-3'])
    , keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-1'].resume(
    )
mdb.models['square-3d-macro-start-origin'].rootAssembly.features['pyrite-2'].resume(
    )
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'merged-1', 'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 
    'pyrite-5', 'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.876251644714226, 
    -0.481853769452533], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.648600429848597, 
    0.481853769452533, -0.589181149787228], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, -0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0.157633231227987, 
    0.571182463511633, -0.805544758402291], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.55131739475462, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.21619419299651, axisDirection=array([0.0, -0.772193982041898, 
    -0.635386853891608], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.778188452966518, axisDirection=array([-0.593403596507278, 
    0.635386853891608, 0.494121156756065], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.22822809009696, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.55933310706052, axisDirection=array([0.0, -0.831258440305193, 
    -0.555886144296994], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.6055919396259739, axisDirection=array([0.276668179288313, 
    0.555886144296994, 0.783865621868896], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.679797940363219, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.85838885903684, axisDirection=array([0.0, 0.877315432360602, 
    -0.479914192478124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.67972367641693, axisDirection=array([0.139383608768552, 
    0.479914192478124, 0.866172371681714], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.459232508350148, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.7157356537729, axisDirection=array([0.0, 0.936921134114912, 
    -0.349540825153267], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.183116676110771, axisDirection=array([-0.821693178756725, 
    0.349540825153267, -0.450157229794037], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912002, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.35293635674735, axisDirection=array([0.0, 0.88131065119846, 
    -0.472537338296294], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.90811748804845, axisDirection=array([-0.830002146258827, 
    0.472537338296294, 0.296318917927281], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.44401183008594, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.25663643282743, axisDirection=array([0.0, -0.334727828154473, 
    0.942314852402842], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.39999312085766, axisDirection=array([-0.306395836215276, 
    -0.942314852402842, 0.134775036601563], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.497225925851451, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.39558861618512, axisDirection=array([0.0, 0.983263729659283, 
    -0.182187919293562], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.37873093150677, axisDirection=array([-0.79146779935764, 
    0.182187919293562, -0.583426331805017], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247022, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.57300080213656, axisDirection=array([0.0, -0.999994914439335, 
    -0.00318921549410667], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.44485544526509, axisDirection=array([-0.991272711498969, 
    0.00318921549410667, -0.131788619926056], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=array([-0.0987669379819463, 0.107291244636664, 
    -0.0493026073726909], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=array([-0.158679827397266, 0.0744934243735815, 
    -0.557700950494747], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=array([-0.346542006019282, -0.343981730377222, 
    -0.0965032438480572], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=array([-0.149812389317816, -0.063433562792167, 
    0.112323082026807], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=array([0.218044649245286, 0.129839855791476, 
    -0.178661869095126], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=array([0.189543978919312, -0.0515249837999538, 
    0.506032257252129], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=array([0.215549448085812, 0.00470550120189785, 
    -0.0277583569918616], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=array([-0.310572930612818, 0.038481908174273, 
    -0.359689251966049], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=array([0.110364305545639, -0.587713464927444, 
    -0.369095320341085], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=array([0.450591941302, 0.473255521238928, 
    0.407912332283511], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.876251644714226, 
    -0.481853769452533], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.648600429848597, 
    0.481853769452533, -0.589181149787228], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, -0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0.157633231227987, 
    0.571182463511633, -0.805544758402291], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.55131739475462, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.21619419299651, axisDirection=array([0.0, -0.772193982041898, 
    -0.635386853891608], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.778188452966518, axisDirection=array([-0.593403596507278, 
    0.635386853891608, 0.494121156756065], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.22822809009696, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.55933310706052, axisDirection=array([0.0, -0.831258440305193, 
    -0.555886144296994], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.6055919396259739, axisDirection=array([0.276668179288313, 
    0.555886144296994, 0.783865621868896], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.679797940363219, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.85838885903684, axisDirection=array([0.0, 0.877315432360602, 
    -0.479914192478124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.67972367641693, axisDirection=array([0.139383608768552, 
    0.479914192478124, 0.866172371681714], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.459232508350148, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.7157356537729, axisDirection=array([0.0, 0.936921134114912, 
    -0.349540825153267], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.183116676110771, axisDirection=array([-0.821693178756725, 
    0.349540825153267, -0.450157229794037], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912002, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.35293635674735, axisDirection=array([0.0, 0.88131065119846, 
    -0.472537338296294], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.90811748804845, axisDirection=array([-0.830002146258827, 
    0.472537338296294, 0.296318917927281], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.44401183008594, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.25663643282743, axisDirection=array([0.0, -0.334727828154473, 
    0.942314852402842], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.39999312085766, axisDirection=array([-0.306395836215276, 
    -0.942314852402842, 0.134775036601563], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.497225925851451, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.39558861618512, axisDirection=array([0.0, 0.983263729659283, 
    -0.182187919293562], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.37873093150677, axisDirection=array([-0.79146779935764, 
    0.182187919293562, -0.583426331805017], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247022, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.57300080213656, axisDirection=array([0.0, -0.999994914439335, 
    -0.00318921549410667], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.44485544526509, axisDirection=array([-0.991272711498969, 
    0.00318921549410667, -0.131788619926056], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=array([-0.0987669379819463, 0.107291244636664, 
    -0.0493026073726909], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=array([-0.158679827397266, 0.0744934243735815, 
    -0.557700950494747], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=array([-0.346542006019282, -0.343981730377222, 
    -0.0965032438480572], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=array([-0.149812389317816, -0.063433562792167, 
    0.112323082026807], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=array([0.218044649245286, 0.129839855791476, 
    -0.178661869095126], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=array([0.189543978919312, -0.0515249837999538, 
    0.506032257252129], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=array([0.215549448085812, 0.00470550120189785, 
    -0.0277583569918616], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=array([-0.310572930612818, 0.038481908174273, 
    -0.359689251966049], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=array([0.110364305545639, -0.587713464927444, 
    -0.369095320341085], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=array([0.450591941302, 0.473255521238928, 
    0.407912332283511], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.InstanceFromBooleanMerge(
    domain=GEOMETRY, instances=
    [mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-0'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-2'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-3'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-4'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-5'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-6'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-7'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-8'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-9'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['calcite-1']]
    , keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d-macro-start-origin'].parts['merged'].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d-macro-start-origin'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#0 #10 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1', 'merged-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.876251644714226, 
    -0.481853769452533], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.648600429848597, 
    0.481853769452533, -0.589181149787228], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, -0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0.157633231227987, 
    0.571182463511633, -0.805544758402291], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.55131739475462, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.21619419299651, axisDirection=array([0.0, -0.772193982041898, 
    -0.635386853891608], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.778188452966518, axisDirection=array([-0.593403596507278, 
    0.635386853891608, 0.494121156756065], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.22822809009696, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.55933310706052, axisDirection=array([0.0, -0.831258440305193, 
    -0.555886144296994], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.6055919396259739, axisDirection=array([0.276668179288313, 
    0.555886144296994, 0.783865621868896], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.679797940363219, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.85838885903684, axisDirection=array([0.0, 0.877315432360602, 
    -0.479914192478124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.67972367641693, axisDirection=array([0.139383608768552, 
    0.479914192478124, 0.866172371681714], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.459232508350148, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.7157356537729, axisDirection=array([0.0, 0.936921134114912, 
    -0.349540825153267], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.183116676110771, axisDirection=array([-0.821693178756725, 
    0.349540825153267, -0.450157229794037], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912002, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.35293635674735, axisDirection=array([0.0, 0.88131065119846, 
    -0.472537338296294], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.90811748804845, axisDirection=array([-0.830002146258827, 
    0.472537338296294, 0.296318917927281], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.44401183008594, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.25663643282743, axisDirection=array([0.0, -0.334727828154473, 
    0.942314852402842], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.39999312085766, axisDirection=array([-0.306395836215276, 
    -0.942314852402842, 0.134775036601563], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.497225925851451, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.39558861618512, axisDirection=array([0.0, 0.983263729659283, 
    -0.182187919293562], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.37873093150677, axisDirection=array([-0.79146779935764, 
    0.182187919293562, -0.583426331805017], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247022, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.57300080213656, axisDirection=array([0.0, -0.999994914439335, 
    -0.00318921549410667], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.44485544526509, axisDirection=array([-0.991272711498969, 
    0.00318921549410667, -0.131788619926056], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=array([-0.0987669379819463, 0.107291244636664, 
    -0.0493026073726909], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=array([-0.158679827397266, 0.0744934243735815, 
    -0.557700950494747], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=array([-0.346542006019282, -0.343981730377222, 
    -0.0965032438480572], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=array([-0.149812389317816, -0.063433562792167, 
    0.112323082026807], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=array([0.218044649245286, 0.129839855791476, 
    -0.178661869095126], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=array([0.189543978919312, -0.0515249837999538, 
    0.506032257252129], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=array([0.215549448085812, 0.00470550120189785, 
    -0.0277583569918616], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=array([-0.310572930612818, 0.038481908174273, 
    -0.359689251966049], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=array([0.110364305545639, -0.587713464927444, 
    -0.369095320341085], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=array([0.450591941302, 0.473255521238928, 
    0.407912332283511], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.InstanceFromBooleanMerge(
    domain=GEOMETRY, instances=
    [mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-0'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-2'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-3'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-4'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-5'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-6'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-7'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-8'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-9'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['calcite-1']]
    , keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d-macro-start-origin'].parts['merged'].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d-macro-start-origin'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#0 #10 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures(
    ['pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.876251644714226, 
    -0.481853769452533], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.648600429848597, 
    0.481853769452533, -0.589181149787228], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, -0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0.157633231227987, 
    0.571182463511633, -0.805544758402291], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.55131739475462, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.21619419299651, axisDirection=array([0.0, -0.772193982041898, 
    -0.635386853891608], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.778188452966518, axisDirection=array([-0.593403596507278, 
    0.635386853891608, 0.494121156756065], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.22822809009696, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.55933310706052, axisDirection=array([0.0, -0.831258440305193, 
    -0.555886144296994], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.6055919396259739, axisDirection=array([0.276668179288313, 
    0.555886144296994, 0.783865621868896], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.679797940363219, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.85838885903684, axisDirection=array([0.0, 0.877315432360602, 
    -0.479914192478124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.67972367641693, axisDirection=array([0.139383608768552, 
    0.479914192478124, 0.866172371681714], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.459232508350148, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.7157356537729, axisDirection=array([0.0, 0.936921134114912, 
    -0.349540825153267], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.183116676110771, axisDirection=array([-0.821693178756725, 
    0.349540825153267, -0.450157229794037], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912002, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.35293635674735, axisDirection=array([0.0, 0.88131065119846, 
    -0.472537338296294], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.90811748804845, axisDirection=array([-0.830002146258827, 
    0.472537338296294, 0.296318917927281], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.44401183008594, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.25663643282743, axisDirection=array([0.0, -0.334727828154473, 
    0.942314852402842], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.39999312085766, axisDirection=array([-0.306395836215276, 
    -0.942314852402842, 0.134775036601563], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.497225925851451, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.39558861618512, axisDirection=array([0.0, 0.983263729659283, 
    -0.182187919293562], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.37873093150677, axisDirection=array([-0.79146779935764, 
    0.182187919293562, -0.583426331805017], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247022, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.57300080213656, axisDirection=array([0.0, -0.999994914439335, 
    -0.00318921549410667], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.44485544526509, axisDirection=array([-0.991272711498969, 
    0.00318921549410667, -0.131788619926056], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=array([-0.0987669379819463, 0.107291244636664, 
    -0.0493026073726909], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=array([-0.158679827397266, 0.0744934243735815, 
    -0.557700950494747], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=array([-0.346542006019282, -0.343981730377222, 
    -0.0965032438480572], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=array([-0.149812389317816, -0.063433562792167, 
    0.112323082026807], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=array([0.218044649245286, 0.129839855791476, 
    -0.178661869095126], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=array([0.189543978919312, -0.0515249837999538, 
    0.506032257252129], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=array([0.215549448085812, 0.00470550120189785, 
    -0.0277583569918616], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=array([-0.310572930612818, 0.038481908174273, 
    -0.359689251966049], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=array([0.110364305545639, -0.587713464927444, 
    -0.369095320341085], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=array([0.450591941302, 0.473255521238928, 
    0.407912332283511], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.InstanceFromBooleanMerge(
    domain=GEOMETRY, instances=
    [mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-0'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-2'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-3'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-4'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-5'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-6'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-7'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-8'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-9'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['calcite-1']]
    , keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d-macro-start-origin'].parts['merged'].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d-macro-start-origin'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#0 #10 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
# Save by dche145 on 2020_01_01-18.46.10; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures(
    ['pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.193455235054, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006, axisDirection=array([0.0, -0.876251644714226, 
    -0.481853769452533], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.047820493011, axisDirection=array([0.648600429848597, 
    0.481853769452533, -0.589181149787228], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.167276243658, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.0720280764827, axisDirection=array([0.0, -0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.794852085154, axisDirection=array([0.157633231227987, 
    0.571182463511633, -0.805544758402291], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.551317394755, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.216194192997, axisDirection=array([0.0, -0.772193982041898, 
    -0.635386853891608], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.7781884529665, axisDirection=array([-0.593403596507278, 
    0.635386853891608, 0.494121156756065], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.228228090097, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.559333107061, axisDirection=array([0.0, -0.831258440305193, 
    -0.555886144296994], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.60559193962597, axisDirection=array([0.276668179288313, 
    0.555886144296994, 0.783865621868896], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.6797979403632, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.858388859037, axisDirection=array([0.0, 0.877315432360602, 
    -0.479914192478124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.679723676417, axisDirection=array([0.139383608768552, 
    0.479914192478124, 0.866172371681714], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.4592325083501, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.715735653773, axisDirection=array([0.0, 0.936921134114912, 
    -0.349540825153267], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.1831166761108, axisDirection=array([-0.821693178756725, 
    0.349540825153267, -0.450157229794037], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.3529363567473, axisDirection=array([0.0, 0.88131065119846, 
    -0.472537338296294], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.908117488048, axisDirection=array([-0.830002146258827, 
    0.472537338296294, 0.296318917927281], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.444011830086, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.256636432827, axisDirection=array([0.0, -0.334727828154473, 
    0.942314852402842], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.399993120858, axisDirection=array([-0.306395836215276, 
    -0.942314852402842, 0.134775036601563], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.4972259258515, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.395588616185, axisDirection=array([0.0, 0.983263729659283, 
    -0.182187919293562], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.378730931507, axisDirection=array([-0.79146779935764, 
    0.182187919293562, -0.583426331805017], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.573000802137, axisDirection=array([0.0, -0.999994914439335, 
    -0.00318921549410667], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.444855445265, axisDirection=array([-0.991272711498969, 
    0.00318921549410667, -0.131788619926056], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=array([-0.0987669379819463, 0.107291244636664, 
    -0.0493026073726909], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=array([-0.158679827397266, 0.0744934243735815, 
    -0.557700950494747], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=array([-0.346542006019282, -0.343981730377222, 
    -0.0965032438480572], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=array([-0.149812389317816, -0.063433562792167, 
    0.112323082026807], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=array([0.218044649245286, 0.129839855791476, 
    -0.178661869095126], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=array([0.189543978919312, -0.0515249837999538, 
    0.506032257252129], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=array([0.215549448085812, 0.00470550120189785, 
    -0.0277583569918616], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=array([-0.310572930612818, 0.038481908174273, 
    -0.359689251966049], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=array([0.110364305545639, -0.587713464927444, 
    -0.369095320341085], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=array([0.450591941302, 0.473255521238928, 
    0.407912332283511], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.InstanceFromBooleanMerge(
    domain=GEOMETRY, instances=
    [mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-0'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-2'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-3'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-4'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-5'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-6'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-7'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-8'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-9'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['calcite-1']]
    , keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'merged-1', 'merged-2', 'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 
    'pyrite-4', 'pyrite-5', 'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 
    'calcite-1', 'merged-3'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.193455235054, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006, axisDirection=array([0.0, -0.876251644714226, 
    -0.481853769452533], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.047820493011, axisDirection=array([0.648600429848597, 
    0.481853769452533, -0.589181149787228], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.167276243658, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.0720280764827, axisDirection=array([0.0, -0.820823119421463, 
    -0.571182463511633], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.794852085154, axisDirection=array([0.157633231227987, 
    0.571182463511633, -0.805544758402291], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.551317394755, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.216194192997, axisDirection=array([0.0, -0.772193982041898, 
    -0.635386853891608], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.7781884529665, axisDirection=array([-0.593403596507278, 
    0.635386853891608, 0.494121156756065], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.228228090097, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.559333107061, axisDirection=array([0.0, -0.831258440305193, 
    -0.555886144296994], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.60559193962597, axisDirection=array([0.276668179288313, 
    0.555886144296994, 0.783865621868896], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.6797979403632, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.858388859037, axisDirection=array([0.0, 0.877315432360602, 
    -0.479914192478124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.679723676417, axisDirection=array([0.139383608768552, 
    0.479914192478124, 0.866172371681714], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.4592325083501, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.715735653773, axisDirection=array([0.0, 0.936921134114912, 
    -0.349540825153267], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.1831166761108, axisDirection=array([-0.821693178756725, 
    0.349540825153267, -0.450157229794037], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.3529363567473, axisDirection=array([0.0, 0.88131065119846, 
    -0.472537338296294], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.908117488048, axisDirection=array([-0.830002146258827, 
    0.472537338296294, 0.296318917927281], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.444011830086, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.256636432827, axisDirection=array([0.0, -0.334727828154473, 
    0.942314852402842], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.399993120858, axisDirection=array([-0.306395836215276, 
    -0.942314852402842, 0.134775036601563], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.4972259258515, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.395588616185, axisDirection=array([0.0, 0.983263729659283, 
    -0.182187919293562], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.378730931507, axisDirection=array([-0.79146779935764, 
    0.182187919293562, -0.583426331805017], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.573000802137, axisDirection=array([0.0, -0.999994914439335, 
    -0.00318921549410667], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.444855445265, axisDirection=array([-0.991272711498969, 
    0.00318921549410667, -0.131788619926056], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=array([-0.0987669379819463, 0.107291244636664, 
    -0.0493026073726909], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=array([-0.158679827397266, 0.0744934243735815, 
    -0.557700950494747], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=array([-0.346542006019282, -0.343981730377222, 
    -0.0965032438480572], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=array([-0.149812389317816, -0.063433562792167, 
    0.112323082026807], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=array([0.218044649245286, 0.129839855791476, 
    -0.178661869095126], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=array([0.189543978919312, -0.0515249837999538, 
    0.506032257252129], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=array([0.215549448085812, 0.00470550120189785, 
    -0.0277583569918616], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=array([-0.310572930612818, 0.038481908174273, 
    -0.359689251966049], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=array([0.110364305545639, -0.587713464927444, 
    -0.369095320341085], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=array([0.450591941302, 0.473255521238928, 
    0.407912332283511], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.InstanceFromBooleanMerge(
    domain=GEOMETRY, instances=
    [mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-0'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-2'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-3'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-4'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-5'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-6'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-7'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-8'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-9'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['calcite-1']]
    , keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d-macro-start-origin'].parts['merged'].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d-macro-start-origin'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#0 #10 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.1, 0.1), point2=(0.1, -0.1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'cube', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['cube'].BaseSolidExtrude(
    depth=0.2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.1, 0.1), point2=(0.1, -0.1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['square-3d-macro-start-origin'].parts['peter'].features['Solid extrude-1'].sketch)
mdb.models['square-3d-macro-start-origin'].parts['peter'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d-macro-start-origin'].parts['peter'].features['Solid extrude-1'])
del mdb.models['square-3d-macro-start-origin'].sketches['__edit__']
del mdb.models['square-3d-macro-start-origin'].parts['merged']
del mdb.models['square-3d-macro-start-origin'].parts['peter']
del mdb.models['square-3d-macro-start-origin'].parts['cube']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].parts['peter']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
del mdb.models['square-3d-macro-start-origin'].parts['peter']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    1145.91559026165, axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('peter-1', ))
#* Offset value out of range.
del mdb.models['square-3d-macro-start-origin'].parts['peter']
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 1.0, 0.0], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 0.0, 1.0], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1', 'merged-1'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 0.939692620785908, -0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 0.342020143325669, 0.939692620785908], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=array([0.0, 0.939692620785908, -0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([-0.32139380484327, 0.342020143325669, 
    0.883022221559489], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(1.0, 1.0, 1.0))
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='peter_1')
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter_1']
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    coords=(1.0, 1.0, 1.0), name='fuck')
#* TypeError: keyword error on name
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['Datum pt-3']
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 0.939692620785908, -0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 0.342020143325669, 0.939692620785908], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([1.0, 0.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.939692620785908, -0.342020143325669], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.342020143325669, 0.939692620785908], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'Datum pt-1', 'Datum pt-2', 'Datum pt-3'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-1', 'peter-0'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
# Save by dche145 on 2020_01_02-10.49.01; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([-nan, -nan, 0.719846310392954], 'd'), axisPoint=[0, 0, 
    0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.939692620785908, 0.0, -0.342020143325669], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.219846310392954, 0.766044443118978, 0.604022773555054], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([-nan, -nan, -nan], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'Datum pt-1', 'Datum pt-2', 'Datum pt-3'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([-3.63903344902551e+247, -1.28557521937308, 
    1.43969262078591], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([6.46321931398451e+170, 0.0, -0.342020143325669], 'd'))
#* Coordinates out of range.
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.32139380484327, -0.623405191620797, 
    0.71279168714892], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([6.46321931398451e+170, 0.116977778440511, -0.32139380484327], 'd'))
#* Coordinates out of range.
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[0, 1, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[0, 0, 1], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    [1, 0, 0])
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    [0, 1, 0])
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    [0, 0, 1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[0, 1, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[0, 0, 1], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([1.0, 0.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 1.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.0, 1.0], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[0, 1, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[0, 0, 1], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([1.0, 0.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 1.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.0, 1.0], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[0, 1, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[0, 0, 1], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([1.0, 0.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 1.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.0, 1.0], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[0, 1, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[0, 0, 1], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([1.0, 0.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.939692620785908, 0.342020143325669], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, -0.342020143325669, 0.939692620785908], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[0, 1, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[0, 0, 1], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.939692620785908, 0.0, -0.342020143325669], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.116977778440511, 0.939692620785908, 0.32139380484327], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.32139380484327, -0.342020143325669, 0.883022221559489], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[0, 1, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[0, 0, 1], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.939692620785908, 0.116977778440511, -0.32139380484327], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.939692620785908, 0.342020143325669], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.342020143325669, -0.32139380484327, 0.883022221559489], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
#* TypeError: axisDirection; not all required arguments specified; expected 3, 
#* got 0
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.342020143325669, -0.32139380484327, 
    0.883022221559489], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.939692620785908, 0.116977778440511, -0.32139380484327], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.939692620785908, 0.342020143325669], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.342020143325669, -0.32139380484327, 0.883022221559489], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.342020143325669, -0.32139380484327, 
    0.883022221559489], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.939692620785908, 0.116977778440511, -0.32139380484327], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.939692620785908, 0.342020143325669], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.342020143325669, -0.32139380484327, 0.883022221559489], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
#* TypeError: axisDirection; not all required arguments specified; expected 3, 
#* got 0
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=[0, 0, 1], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    [0, 0, 1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.939692620785908, 0.342020143325669], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    [0, 0, 1])
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=-20.0, 
    axisDirection=[1, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 0.939692620785908, 0.342020143325669], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, -0.342020143325669, 0.939692620785908], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([1.0, 0.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.939692620785908, 0.342020143325669], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, -0.342020143325669, 0.939692620785908], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=[0.25, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, 0.234923155196477, 0.0855050358314172], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.0, -0.0855050358314172, 0.234923155196477], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.25, 0.0, 0.0], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.234923155196477, 0.0855050358314172], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, -0.0855050358314172, 0.234923155196477], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=[0.5, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=array([0.0, 0.469846310392954, 0.171010071662834], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.171010071662834, -0.160696902421635, 
    0.441511110779745], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.469846310392954, 0.0584888892202555, -0.160696902421635], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.469846310392954, 0.171010071662834], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.171010071662834, -0.160696902421635, 0.441511110779745], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=[0.5, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=array([0.0, 0.469846310392954, 0.171010071662834], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=array([0.171010071662834, -0.160696902421635, 
    0.441511110779745], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    [0, 0, 1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.469846310392954, 0.171010071662834], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.171010071662834, -0.160696902421635, 0.441511110779745], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=[0.5, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=array([0.0, 0.469846310392954, 0.171010071662834], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.171010071662834, -0.160696902421635, 
    0.441511110779745], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    [0, 0, 1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.469846310392954, 0.171010071662834], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.171010071662834, -0.160696902421635, 0.441511110779745], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=[0.5, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=array([0.0, 0.469846310392954, 0.171010071662834], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=0.0, 
    axisDirection=array([0.171010071662834, -0.160696902421635, 
    0.441511110779745], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.469846310392954, 0.0584888892202555, -0.160696902421635], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.0, 0.469846310392954, 0.171010071662834], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.171010071662834, -0.160696902421635, 0.441511110779745], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['peter-1']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.25, 0.25), point2=(0.25, -0.25))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'peter', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['peter'].BaseSolidExtrude(
    depth=0.5, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-0', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='peter-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['peter'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('peter-1', ), vector=[0.0, 0.0, -0.25])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=[0.5, 0, 0], axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=array([0.0, 0.469846310392954, 0.171010071662834], 'd'), 
    axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=20.0, 
    axisDirection=array([0.171010071662834, -0.160696902421635, 
    0.441511110779745], 'd'), axisPoint=[0, 0, 0], instanceList=('peter-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.441511110779745, 0.215658480019873, -0.092516804168508], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([-0.160696902421635, 0.421506732505674, 0.215658480019873], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.DatumPointByCoordinate(
    array([0.171010071662834, -0.160696902421635, 0.441511110779745], 'd'))
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_0']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_1']
del mdb.models['square-3d-macro-start-origin'].rootAssembly.features['ax_2']
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-1', toName='ax_0')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-2', toName='ax_1')
mdb.models['square-3d-macro-start-origin'].rootAssembly.features.changeKey(
    fromName='Datum pt-3', toName='ax_2')
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures(('ax_0', 
    'ax_1', 'ax_2'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'peter-0', 'peter-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.1, 0.1), point2=(0.1, -0.1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'pyrite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['pyrite'].BaseSolidExtrude(
    depth=0.2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-1, 1), point2=(1, -1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'calcite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['calcite'].BaseSolidExtrude(
    depth=2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.1, 0.1), point2=(0.1, -0.1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'pyrite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['pyrite'].BaseSolidExtrude(
    depth=0.2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-1, 1), point2=(1, -1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'calcite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['calcite'].BaseSolidExtrude(
    depth=2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.175250328942845, 
    0.0963707538905065], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.14803976318016, 
    -0.0647985449449152, -0.117836229957446], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, -0.164164623884293, 
    0.114236492702327], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0.0384085748800767, 
    -0.112110155936495, -0.161108951680458], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.55131739475462, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.21619419299651, axisDirection=array([0.0, -0.15443879640838, 
    0.127077370778322], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.778188452966518, axisDirection=array([-0.15369288295621, 
    0.0813158596243718, 0.098824231351213], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.22822809009696, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.55933310706052, axisDirection=array([0.0, -0.166251688061039, 
    0.111177228859399], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.6055919396259739, axisDirection=array([0.0665661040835232, 
    0.104838643930686, 0.156773124373779], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.679797940363219, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.85838885903684, axisDirection=array([0.0, 0.17546308647212, 
    0.0959828384956247], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.67972367641693, axisDirection=array([-0.0317750272313142, 
    -0.0947637301179106, 0.173234474336343], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.459232508350148, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.7157356537729, axisDirection=array([0.0, 0.187384226822982, 
    0.0699081650306534], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.183116676110771, axisDirection=array([0.17540284850826, 
    0.0335883830178641, -0.0900314459588073], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912002, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.35293635674735, axisDirection=array([0.0, 0.176262130239692, 
    0.0945074676592588], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.90811748804845, axisDirection=array([0.188356317974857, 
    -0.0317757995035656, 0.0592637835854562], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.44401183008594, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.25663643282743, axisDirection=array([0.0, -0.0669455656308947, 
    -0.188462970480568], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.39999312085766, axisDirection=array([-0.183071624432658, 
    -0.0758828564825387, 0.0269550073203125], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.497225925851451, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.39558861618512, axisDirection=array([0.0, 0.196652745931857, 
    0.0364375838587124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.37873093150677, axisDirection=array([0.160987896834534, 
    0.0216204922944658, -0.116685266361003], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247022, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.57300080213656, axisDirection=array([0.0, -0.199998982887867, 
    0.000637843098821333], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.44485544526509, axisDirection=array([-0.198255550540423, 
    -8.40608892197743e-05, -0.0263577239852112], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.1, 0.1), point2=(0.1, -0.1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'pyrite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['pyrite'].BaseSolidExtrude(
    depth=0.2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-1, 1), point2=(1, -1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'calcite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['calcite'].BaseSolidExtrude(
    depth=2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.175250328942845, 
    0.0963707538905065], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.14803976318016, 
    -0.0647985449449152, -0.117836229957446], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, -0.164164623884293, 
    0.114236492702327], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0.0384085748800767, 
    -0.112110155936495, -0.161108951680458], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.55131739475462, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.21619419299651, axisDirection=array([0.0, -0.15443879640838, 
    0.127077370778322], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.778188452966518, axisDirection=array([-0.15369288295621, 
    0.0813158596243718, 0.098824231351213], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.22822809009696, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.55933310706052, axisDirection=array([0.0, -0.166251688061039, 
    0.111177228859399], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.6055919396259739, axisDirection=array([0.0665661040835232, 
    0.104838643930686, 0.156773124373779], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.679797940363219, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.85838885903684, axisDirection=array([0.0, 0.17546308647212, 
    0.0959828384956247], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.67972367641693, axisDirection=array([-0.0317750272313142, 
    -0.0947637301179106, 0.173234474336343], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.459232508350148, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.7157356537729, axisDirection=array([0.0, 0.187384226822982, 
    0.0699081650306534], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.183116676110771, axisDirection=array([0.17540284850826, 
    0.0335883830178641, -0.0900314459588073], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912002, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.35293635674735, axisDirection=array([0.0, 0.176262130239692, 
    0.0945074676592588], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.90811748804845, axisDirection=array([0.188356317974857, 
    -0.0317757995035656, 0.0592637835854562], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.44401183008594, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.25663643282743, axisDirection=array([0.0, -0.0669455656308947, 
    -0.188462970480568], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.39999312085766, axisDirection=array([-0.183071624432658, 
    -0.0758828564825387, 0.0269550073203125], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.497225925851451, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.39558861618512, axisDirection=array([0.0, 0.196652745931857, 
    0.0364375838587124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.37873093150677, axisDirection=array([0.160987896834534, 
    0.0216204922944658, -0.116685266361003], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247022, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.57300080213656, axisDirection=array([0.0, -0.199998982887867, 
    0.000637843098821333], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.44485544526509, axisDirection=array([-0.198255550540423, 
    -8.40608892197743e-05, -0.0263577239852112], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.1, 0.1), point2=(0.1, -0.1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'pyrite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['pyrite'].BaseSolidExtrude(
    depth=0.2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-1, 1), point2=(1, -1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'calcite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['calcite'].BaseSolidExtrude(
    depth=2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.175250328942845, 
    0.0963707538905065], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.14803976318016, 
    -0.0647985449449152, -0.117836229957446], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, -0.164164623884293, 
    0.114236492702327], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0.0384085748800767, 
    -0.112110155936495, -0.161108951680458], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.55131739475462, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.21619419299651, axisDirection=array([0.0, -0.15443879640838, 
    0.127077370778322], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.778188452966518, axisDirection=array([-0.15369288295621, 
    0.0813158596243718, 0.098824231351213], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.22822809009696, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.55933310706052, axisDirection=array([0.0, -0.166251688061039, 
    0.111177228859399], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.6055919396259739, axisDirection=array([0.0665661040835232, 
    0.104838643930686, 0.156773124373779], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.679797940363219, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.85838885903684, axisDirection=array([0.0, 0.17546308647212, 
    0.0959828384956247], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.67972367641693, axisDirection=array([-0.0317750272313142, 
    -0.0947637301179106, 0.173234474336343], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.459232508350148, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.7157356537729, axisDirection=array([0.0, 0.187384226822982, 
    0.0699081650306534], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.183116676110771, axisDirection=array([0.17540284850826, 
    0.0335883830178641, -0.0900314459588073], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912002, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.35293635674735, axisDirection=array([0.0, 0.176262130239692, 
    0.0945074676592588], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.90811748804845, axisDirection=array([0.188356317974857, 
    -0.0317757995035656, 0.0592637835854562], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.44401183008594, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.25663643282743, axisDirection=array([0.0, -0.0669455656308947, 
    -0.188462970480568], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.39999312085766, axisDirection=array([-0.183071624432658, 
    -0.0758828564825387, 0.0269550073203125], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.497225925851451, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.39558861618512, axisDirection=array([0.0, 0.196652745931857, 
    0.0364375838587124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.37873093150677, axisDirection=array([0.160987896834534, 
    0.0216204922944658, -0.116685266361003], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247022, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.57300080213656, axisDirection=array([0.0, -0.199998982887867, 
    0.000637843098821333], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.44485544526509, axisDirection=array([-0.198255550540423, 
    -8.40608892197743e-05, -0.0263577239852112], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=array([-0.0987669379819463, 0.107291244636664, 
    -0.0493026073726909], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=array([-0.158679827397266, 0.0744934243735815, 
    -0.557700950494747], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=array([-0.346542006019282, -0.343981730377222, 
    -0.0965032438480572], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=array([-0.149812389317816, -0.063433562792167, 
    0.112323082026807], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=array([0.218044649245286, 0.129839855791476, 
    -0.178661869095126], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=array([0.189543978919312, -0.0515249837999538, 
    0.506032257252129], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=array([0.215549448085812, 0.00470550120189785, 
    -0.0277583569918616], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=array([-0.310572930612818, 0.038481908174273, 
    -0.359689251966049], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=array([0.110364305545639, -0.587713464927444, 
    -0.369095320341085], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=array([0.450591941302, 0.473255521238928, 
    0.407912332283511], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.deleteFeatures((
    'pyrite-0', 'pyrite-1', 'pyrite-2', 'pyrite-3', 'pyrite-4', 'pyrite-5', 
    'pyrite-6', 'pyrite-7', 'pyrite-8', 'pyrite-9', 'calcite-1'))
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-0.1, 0.1), point2=(0.1, -0.1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'pyrite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['pyrite'].BaseSolidExtrude(
    depth=0.2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].ConstrainedSketch(name='__profile__'
    , sheetSize=200.0)
mdb.models['square-3d-macro-start-origin'].sketches['__profile__'].rectangle(
    point1=(-1, 1), point2=(1, -1))
mdb.models['square-3d-macro-start-origin'].Part(dimensionality=THREE_D, name=
    'calcite', type=DEFORMABLE_BODY)
mdb.models['square-3d-macro-start-origin'].parts['calcite'].BaseSolidExtrude(
    depth=2, sketch=
    mdb.models['square-3d-macro-start-origin'].sketches['__profile__'])
del mdb.models['square-3d-macro-start-origin'].sketches['__profile__']
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-0', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-2', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-3', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-4', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-5', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-6', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-7', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-8', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='pyrite-9', part=
    mdb.models['square-3d-macro-start-origin'].parts['pyrite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.Instance(dependent=ON, 
    name='calcite-1', part=
    mdb.models['square-3d-macro-start-origin'].parts['calcite'])
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('calcite-1', ), vector=[0, 0, -1])
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    151.19345523505442, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    47.748354388006042, axisDirection=array([0.0, -0.175250328942845, 
    0.0963707538905065], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-0', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    285.04782049301093, axisDirection=array([0.14803976318016, 
    -0.0647985449449152, -0.117836229957446], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-0', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    145.16727624365839, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    11.072028076482651, axisDirection=array([0.0, -0.164164623884293, 
    0.114236492702327], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    159.79485208515447, axisDirection=array([0.0384085748800767, 
    -0.112110155936495, -0.161108951680458], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-1', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    140.55131739475462, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    230.21619419299651, axisDirection=array([0.0, -0.15443879640838, 
    0.127077370778322], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    96.778188452966518, axisDirection=array([-0.15369288295621, 
    0.0813158596243718, 0.098824231351213], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-2', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    146.22822809009696, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    160.55933310706052, axisDirection=array([0.0, -0.166251688061039, 
    0.111177228859399], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    8.6055919396259739, axisDirection=array([0.0665661040835232, 
    0.104838643930686, 0.156773124373779], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-3', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.679797940363219, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    350.85838885903684, axisDirection=array([0.0, 0.17546308647212, 
    0.0959828384956247], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-4', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    133.67972367641693, axisDirection=array([-0.0317750272313142, 
    -0.0947637301179106, 0.173234474336343], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-4', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    20.459232508350148, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    118.7157356537729, axisDirection=array([0.0, 0.187384226822982, 
    0.0699081650306534], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-5', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    35.183116676110771, axisDirection=array([0.17540284850826, 
    0.0335883830178641, -0.0900314459588073], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-5', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    28.199127107912002, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    70.35293635674735, axisDirection=array([0.0, 0.176262130239692, 
    0.0945074676592588], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-6', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    261.90811748804845, axisDirection=array([0.188356317974857, 
    -0.0317757995035656, 0.0592637835854562], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-6', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    250.44401183008594, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.25663643282743, axisDirection=array([0.0, -0.0669455656308947, 
    -0.188462970480568], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-7', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    165.39999312085766, axisDirection=array([-0.183071624432658, 
    -0.0758828564825387, 0.0269550073203125], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-7', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    10.497225925851451, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    126.39558861618512, axisDirection=array([0.0, 0.196652745931857, 
    0.0364375838587124], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-8', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    187.37873093150677, axisDirection=array([0.160987896834534, 
    0.0216204922944658, -0.116685266361003], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-8', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    179.81727110247022, axisDirection=[0.2, 0, 0], axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    277.57300080213656, axisDirection=array([0.0, -0.199998982887867, 
    0.000637843098821333], 'd'), axisPoint=[0, 0, 0], instanceList=('pyrite-9', 
    ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.rotate(angle=
    246.44485544526509, axisDirection=array([-0.198255550540423, 
    -8.40608892197743e-05, -0.0263577239852112], 'd'), axisPoint=[0, 0, 0], 
    instanceList=('pyrite-9', ))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-0', ), vector=array([-0.0987669379819463, 0.107291244636664, 
    -0.0493026073726909], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-1', ), vector=array([-0.158679827397266, 0.0744934243735815, 
    -0.557700950494747], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-2', ), vector=array([-0.346542006019282, -0.343981730377222, 
    -0.0965032438480572], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-3', ), vector=array([-0.149812389317816, -0.063433562792167, 
    0.112323082026807], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-4', ), vector=array([0.218044649245286, 0.129839855791476, 
    -0.178661869095126], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-5', ), vector=array([0.189543978919312, -0.0515249837999538, 
    0.506032257252129], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-6', ), vector=array([0.215549448085812, 0.00470550120189785, 
    -0.0277583569918616], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-7', ), vector=array([-0.310572930612818, 0.038481908174273, 
    -0.359689251966049], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-8', ), vector=array([0.110364305545639, -0.587713464927444, 
    -0.369095320341085], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.translate(instanceList=
    ('pyrite-9', ), vector=array([0.450591941302, 0.473255521238928, 
    0.407912332283511], 'd'))
mdb.models['square-3d-macro-start-origin'].rootAssembly.InstanceFromBooleanMerge(
    domain=GEOMETRY, instances=
    [mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-0'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-1'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-2'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-3'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-4'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-5'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-6'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-7'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-8'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['pyrite-9'], 
    mdb.models['square-3d-macro-start-origin'].rootAssembly.instances['calcite-1']]
    , keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d-macro-start-origin'].parts['merged'].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d-macro-start-origin'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#200 ]', ), )), sectionName='calcite', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d-macro-start-origin'].rootAssembly.regenerate()
# Save by dche145 on 2020_01_02-11.57.44; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=10000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E05', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E05'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E05'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=10000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E05', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E05'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E05'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=10000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E05', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E05'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E05'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=100000000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E09', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E09'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E09'].waitForCompletion()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].setBoundaryLayerControls(firstElemSize=
    0.01, growthFactor=1.2, numLayers=3, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['square-3d'].parts['merge'].setBoundaryLayerControls(firstElemSize=
    0.005, growthFactor=1.2, numLayers=3, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].setBoundaryLayerControls(firstElemSize=
    0.005, growthFactor=1.2, numLayers=1, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].setBoundaryLayerControls(firstElemSize=
    0.0005, growthFactor=1.2, numLayers=1, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].setBoundaryLayerControls(firstElemSize=
    0.001, growthFactor=1.2, numLayers=1, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].setBoundaryLayerControls(firstElemSize=
    0.005, growthFactor=1.2, numLayers=1, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#2 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merge'].edges[21], point=
    mdb.models['square-3d'].parts['merge'].datums[12])
mdb.models['square-3d'].parts['merge'].setBoundaryLayerControls(firstElemSize=
    0.008, growthFactor=1.2, numLayers=1, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#200000 ]', ), ), size=0.001)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask(('[#2 ]', 
    ), ), size=0.005)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#207bf ]', ), ), size=0.005)
mdb.models['square-3d'].parts['merge'].setBoundaryLayerControls(firstElemSize=
    0.001, growthFactor=1.2, numLayers=2, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].setBoundaryLayerControls(firstElemSize=
    0.001, growthFactor=1.2, inactiveFaces=
    mdb.models['square-3d'].parts['merge'].faces.getSequenceFromMask(('[#a8 ]', 
    ), ), numLayers=2, regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].deleteBoundaryLayerControls(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#2 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask(('[#40 ]', 
    ), ), size=0.0015)
mdb.models['square-3d'].parts['merge'].generateMesh()
# Save by dche145 on 2020_01_03-11.41.54; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=10000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E05', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E05'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E05'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=11120000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux111E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux111E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux111E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=22230000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux222E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux222E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux222E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=33340000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux333E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux333E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux333E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=44450000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux444E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux444E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux444E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=55560000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux556E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux556E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux556E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=66670000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux667E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux667E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux667E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=77780000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux778E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux778E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux778E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=88890000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux889E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux889E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux889E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=100000000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E09', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E09'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E09'].waitForCompletion()
mdb.models['square-3d'].materials['calcite'].conductivity.setValues(table=((
    1.46, ), ))
mdb.models['square-3d'].materials['calcite'].expansion.setValues(table=((
    35999999994.0, 25.0), (45999999994.0, 119.85), (51899999994.0, 219.85)), 
    temperatureDependency=ON)
mdb.models['square-3d'].materials['calcite'].specificHeat.setValues(table=((
    860.0, 50.0), (945.0, 200.0), (1054.0, 400.0), (1090.0, 500.0)), 
    temperatureDependency=ON)
mdb.models['square-3d'].materials['calcite'].expansion.setValues(table=((
    35999999994.0, 25.0), (44999999994.0, 119.85), (51899999994.0, 219.85), (
    55899999994.0, 319.85), (58899999994.0, 419.85), (61399999994.0, 519.85), (
    63699999994.0, 619.85), (65799999994.0, 719.85), (67799999994.0, 819.85), (
    69699999994.0, 919.85), (71199999994.0, 1000.0)))
mdb.models['square-3d'].materials['calcite'].elastic.setValues(table=((
    87020000000.0, 0.27), ))
mdb.models['square-3d'].materials['calcite'].expansion.setValues(table=((
    3.6e-06, 25.0), (44999999994.0, 119.85), (51899999994.0, 219.85), (
    55899999994.0, 319.85), (58899999994.0, 419.85), (61399999994.0, 519.85), (
    63699999994.0, 619.85), (65799999994.0, 719.85), (67799999994.0, 819.85), (
    69699999994.0, 919.85), (71199999994.0, 1000.0)))
mdb.models['square-3d'].materials['calcite'].density.setValues(table=((2703.0, 
    ), ))
mdb.models['square-3d'].materials['calcite'].elastic.setValues(table=((
    87020000000.0, 0.29), ))
mdb.models['square-3d'].materials['calcite'].expansion.setValues(table=((
    3.6e-06, 25.0), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 319.85), 
    (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (6.58e-06, 
    719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 1000.0)))
mdb.models['square-3d'].materials['pyrite'].conductivity.setValues(table=((8.0, 
    0.0), (6.5, 100.0), (5.5, 200.0), (4.5, 300.0), (4.0, 400.0), (3.8, 500.0), 
    (3.7, 550.0), (3.5, 575.0), (3.5, 580.0), (3.8, 600.0), (3.9, 700.0), (4.0, 
    800.0)), temperatureDependency=ON)
mdb.models['square-3d'].materials['pyrite'].density.setValues(table=((2650.0, 
    ), ))
mdb.models['square-3d'].materials['pyrite'].elastic.setValues(table=((
    100000000000.0, 0.9, 0.0), (95000000000.0, 0.85, 100.0), (90000000000.0, 
    0.8, 200.0), (85000000000.0, 0.5, 300.0), (83000000000.0, 0.0, 400.0), (
    80000000000.0, -0.05, 500.0), (75000000000.0, -0.1, 550.0), (60000000000.0, 
    -0.2, 575.0), (80000000000.0, -0.3, 580.0), (95000000000.0, 0.2, 600.0), (
    100000000000.0, 0.25, 700.0), (105000000000.0, 0.25, 800.0)), 
    temperatureDependency=ON)
mdb.models['square-3d'].materials['pyrite'].expansion.setValues(table=((1e-05, 
    0.0), (1.25e-05, 100.0), (1.26e-05, 200.0), (1.27e-05, 300.0), (1.28e-05, 
    400.0), (1.5e-05, 500.0), (1.75e-05, 550.0), (2e-05, 575.0), (2.5e-05, 
    580.0), (2.25e-05, 600.0), (2.1e-05, 700.0), (2e-05, 800.0)), 
    temperatureDependency=ON)
mdb.models['square-3d'].materials['pyrite'].specificHeat.setValues(table=((
    700.0, 0.0), (810.0, 100.0), (910.0, 200.0), (1005.0, 300.0), (1100.0, 
    400.0), (1190.0, 500.0), (1250.0, 550.0), (1400.0, 575.0), (1050.0, 580.0), 
    (1070.0, 600.0), (1080.0, 700.0), (1090.0, 800.0)), temperatureDependency=
    ON)
# Save by dche145 on 2020_01_03-12.29.10; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].materials.changeKey(fromName='calcite', toName=
    'fledspar')
mdb.models['square-3d'].materials.changeKey(fromName='pyrite', toName='quartz')
mdb.models['square-3d'].sections['calcite'].setValues(material='fledspar', 
    thickness=1.0)
mdb.models['square-3d'].sections['pyrite'].setValues(material='quartz', 
    thickness=1.0)
mdb.models['square-3d'].sections.changeKey(fromName='calcite', toName=
    'fledspar')
mdb.models['square-3d'].sections.changeKey(fromName='pyrite', toName='quartz')
mdb.models['square-3d'].parts['merge'].sectionAssignments[0].setValues(
    sectionName='fledspar')
mdb.models['square-3d'].parts['merge'].sectionAssignments[1].setValues(
    sectionName='quartz')
# Save by dche145 on 2020_01_03-12.30.37; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=10000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E05', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E05'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E05'].waitForCompletion()
mdb.jobs['heatflux100E05']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'heatflux100E05'})
mdb.jobs['heatflux100E05']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'heatflux100E05'})
mdb.models['square-3d'].materials['quartz'].elastic.setValues(table=((
    100000000000.0, 0.09, 0.0), (95000000000.0, 0.085, 100.0), (90000000000.0, 
    0.08, 200.0), (85000000000.0, 0.05, 300.0), (83000000000.0, 0.0, 400.0), (
    80000000000.0, -0.05, 500.0), (75000000000.0, -0.1, 550.0), (60000000000.0, 
    -0.2, 575.0), (80000000000.0, -0.3, 580.0), (95000000000.0, 0.2, 600.0), (
    100000000000.0, 0.25, 700.0), (105000000000.0, 0.25, 800.0)))
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=10000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E05', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E05'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E05'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=4176250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux418E07', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux418E07'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux418E07'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=8342500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux834E07', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux834E07'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux834E07'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=12508750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux125E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux125E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux125E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=16675000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux167E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux167E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux167E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=20841250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux208E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux208E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux208E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=25007500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux250E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux250E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux250E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=29173750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux292E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux292E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux292E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=33340000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux333E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux333E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux333E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=37506250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux375E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux375E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux375E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=41672500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux417E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux417E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux417E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=45838750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux458E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux458E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux458E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=50005000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux500E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux500E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux500E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=54171250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux542E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux542E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux542E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=58337500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux583E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux583E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux583E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=62503750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux625E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux625E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux625E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=66670000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux667E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux667E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux667E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=70836250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux708E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux708E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux708E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=75002500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux750E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux750E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux750E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=79168750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux792E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux792E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux792E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=83335000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux833E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux833E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux833E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=87501250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux875E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux875E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux875E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=91667500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux917E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux917E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux917E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=95833750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux958E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux958E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux958E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=100000000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.3, timePeriod=
    5)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E09', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E09'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E09'].waitForCompletion()
# Save by dche145 on 2020_01_03-13.40.36; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#3 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#200140 ]', ), ), size=0.03)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#200140 ]', ), ), size=0.003)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#200140 ]', ), ), size=0.001)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#400000 ]', ), ), size=0.005)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#400000 ]', ), ), size=0.003)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#30ebf ]', ), ), size=0.003)
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.jobs['heatflux958E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\heatflux958E08.odb', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 9124, 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'heatflux958E08', 'memory': 217.0})
mdb.jobs['heatflux958E08']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(MINIMUM_MEMORY, {'minimum_memory': 39.0, 
    'phase': STANDARD_PHASE, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 1, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 2, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 3, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 4, 'stepTime': 1.2, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 5, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 6, 'stepTime': 1.8, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 7, 'stepTime': 2.1, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 8, 'stepTime': 2.4, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.7, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 9, 'stepTime': 2.7, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 10, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.3, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 11, 'stepTime': 3.3, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.6, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 12, 'stepTime': 3.6, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.9, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 13, 'stepTime': 3.9, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.2, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 14, 'stepTime': 4.2, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 15, 'stepTime': 4.5, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.8, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 16, 'stepTime': 4.8, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.200000000000001, 'increment': 17, 'stepTime': 5.0, 
    'step': 1, 'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(JOB_COMPLETED, {
    'time': 'Sat Jan  4 16:04:08 2020', 'jobName': 'heatflux958E08'})
mdb.models['square-3d'].parts['merge'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merge'].cells.getSequenceFromMask(('[#3 ]', 
    ), ))
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#630fff ]', ), ), size=0.005)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#630fff ]', ), ), size=0.003)
mdb.models['square-3d'].parts['merge'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merge'].edges.getSequenceFromMask((
    '[#630fff ]', ), ), size=0.002)
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'].sketch)
mdb.models['square-3d'].parts['calcite'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'])
mdb.models['square-3d'].sketches['__edit__'].dimensions[0].setValues(value=
    0.04)
mdb.models['square-3d'].sketches['__edit__'].dimensions[1].setValues(value=
    0.04)
mdb.models['square-3d'].sketches['__edit__'].dimensions[1].setValues(value=
    0.06)
mdb.models['square-3d'].sketches['__edit__'].dimensions[0].setValues(value=
    0.06)
mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['square-3d'].sketches['__edit__'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'].setValues(
    depth=0.06)
mdb.models['square-3d'].parts['calcite'].regenerate()
mdb.models['square-3d'].parts['calcite'].regenerate()
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].parts['merge'].generateMesh()
mdb.Model(name='square-3d-Copy', objectToCopy=mdb.models['square-3d'])
del mdb.models['square-3d-backup']
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].rootAssembly.deleteFeatures(('Part-2-1', 'Part-3-1', 
    'merge-1'))
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'].sketch)
mdb.models['square-3d'].parts['calcite'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'])
mdb.models['square-3d'].sketches['__edit__'].ConstructionLine(point1=(4.94, 
    -4.94), point2=(5.0, -5.0))
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[0], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[6])
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[2], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[6])
mdb.models['square-3d'].sketches['__edit__'].ConstructionLine(point1=(5.0, 
    -4.94), point2=(4.94, -5.0))
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[3], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[7])
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[1], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[7])
mdb.models['square-3d'].sketches['__edit__'].Spot(point=(4.97, -4.97))
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[4], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[6])
mdb.models['square-3d'].sketches['__edit__'].move(objectList=(
    mdb.models['square-3d'].sketches['__edit__'].geometry[2], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[3], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[4], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[5], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[6], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[7], 
    mdb.models['square-3d'].sketches['__edit__'].vertices[4]), vector=(-4.97, 
    4.97))
mdb.models['square-3d'].parts['calcite'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['square-3d'].sketches['__edit__'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].parts['calcite'].regenerate()
mdb.models['square-3d'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['square-3d'].parts['pyrite'].features['Solid extrude-1'].sketch)
mdb.models['square-3d'].parts['pyrite'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['square-3d'].sketches['__edit__'], 
    upToFeature=
    mdb.models['square-3d'].parts['pyrite'].features['Solid extrude-1'])
mdb.models['square-3d'].sketches['__edit__'].ConstructionLine(point1=(
    0.660563564300537, -0.622752046585083), point2=(0.685563564300537, 
    -0.647752046585083))
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[0], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[6])
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[2], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[6])
mdb.models['square-3d'].sketches['__edit__'].ConstructionLine(point1=(
    0.685563564300537, -0.622752046585083), point2=(0.660563564300537, 
    -0.647752046585083))
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[3], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[7])
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[1], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[7])
mdb.models['square-3d'].sketches['__edit__'].Spot(point=(0.673063564300492, 
    -0.635252046584355))
mdb.models['square-3d'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['square-3d'].sketches['__edit__'].vertices[4], 
    entity2=mdb.models['square-3d'].sketches['__edit__'].geometry[6])
mdb.models['square-3d'].sketches['__edit__'].Spot(point=(0.0, 0.0))
mdb.models['square-3d'].sketches['__edit__'].move(objectList=(
    mdb.models['square-3d'].sketches['__edit__'].geometry[2], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[3], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[4], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[5], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[6], 
    mdb.models['square-3d'].sketches['__edit__'].geometry[7], 
    mdb.models['square-3d'].sketches['__edit__'].vertices[4]), vector=(
    -0.673063564300492, 0.635252046584355))
mdb.models['square-3d'].parts['pyrite'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['square-3d'].sketches['__edit__'])
del mdb.models['square-3d'].sketches['__edit__']
mdb.models['square-3d'].parts['pyrite'].regenerate()
mdb.models['square-3d'].rootAssembly.Instance(dependent=ON, name='calcite-1', 
    part=mdb.models['square-3d'].parts['calcite'])
mdb.models['square-3d'].rootAssembly.Instance(dependent=ON, name='pyrite-1', 
    part=mdb.models['square-3d'].parts['pyrite'])
mdb.models['square-3d'].rootAssembly.translate(instanceList=('pyrite-1', ), 
    vector=(0.0175, 0.0175, 0.0))
del mdb.models['square-3d'].parts['merge']
mdb.models['square-3d'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['square-3d'].rootAssembly.instances['calcite-1'], 
    mdb.models['square-3d'].rootAssembly.instances['pyrite-1']), 
    keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d'].parts['merged'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='fledspar', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d'].parts['merged'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='quartz', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].loads['Load-1'].setValues(region=Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['merged-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['square-3d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#580 ]', ), )))
mdb.models['square-3d'].boundaryConditions['BC-2'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#810 ]', ), )))
mdb.models['square-3d'].boundaryConditions['BC-3'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#48 ]', ), )))
mdb.models['square-3d'].boundaryConditions['BC-4'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#220 ]', ), )))
mdb.models['square-3d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['merged-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#fff ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['merged-1'].edges.getSequenceFromMask(
    mask=('[#fdffff ]', ), ), 
    vertices=mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices.getSequenceFromMask(
    mask=('[#6f7f ]', ), )))
mdb.models['square-3d'].parts['merged'].DatumPointByProjOnFace(face=
    mdb.models['square-3d'].parts['merged'].faces[10], point=
    mdb.models['square-3d'].parts['merged'].vertices[5])
mdb.models['square-3d'].parts['merged'].DatumPointByProjOnFace(face=
    mdb.models['square-3d'].parts['merged'].faces[10], point=
    mdb.models['square-3d'].parts['merged'].vertices[3])
mdb.models['square-3d'].parts['merged'].DatumPointByProjOnFace(face=
    mdb.models['square-3d'].parts['merged'].faces[10], point=
    mdb.models['square-3d'].parts['merged'].vertices[2])
mdb.models['square-3d'].parts['merged'].DatumPointByProjOnFace(face=
    mdb.models['square-3d'].parts['merged'].faces[8], point=
    mdb.models['square-3d'].parts['merged'].vertices[6])
mdb.models['square-3d'].parts['merged'].DatumPointByProjOnFace(face=
    mdb.models['square-3d'].parts['merged'].faces[7], point=
    mdb.models['square-3d'].parts['merged'].vertices[6])
mdb.models['square-3d'].parts['merged'].DatumPointByProjOnFace(face=
    mdb.models['square-3d'].parts['merged'].faces[7], point=
    mdb.models['square-3d'].parts['merged'].vertices[5])
mdb.models['square-3d'].parts['merged'].DatumPointByProjOnFace(face=
    mdb.models['square-3d'].parts['merged'].faces[8], point=
    mdb.models['square-3d'].parts['merged'].vertices[3])
mdb.models['square-3d'].parts['merged'].PartitionCellByPlanePointNormal(cells=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), normal=mdb.models['square-3d'].parts['merged'].edges[14], point=
    mdb.models['square-3d'].parts['merged'].vertices[3])
mdb.models['square-3d'].parts['merged'].PartitionCellByPlanePointNormal(cells=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['square-3d'].parts['merged'].edges[24], point=
    mdb.models['square-3d'].parts['merged'].vertices[10])
mdb.models['square-3d'].parts['merged'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.006)
mdb.models['square-3d'].parts['merged'].generateMesh()
mdb.models['square-3d'].parts['merged'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#f ]', 
    ), ))
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#dc510881 #1 ]', ), ), minSizeFactor=0.1, size=0.003)
mdb.models['square-3d'].parts['merged'].generateMesh()
mdb.models['square-3d'].parts['merged'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#f ]', 
    ), ))
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#ffffffff #f ]', ), ), minSizeFactor=0.1, size=0.006)
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#ffffffff #f ]', ), ), minSizeFactor=0.1, size=0.002)
mdb.models['square-3d'].parts['merged'].generateMesh()
mdb.models['square-3d'].parts['merged'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#f ]', 
    ), ))
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#ffffffff #f ]', ), ), minSizeFactor=0.1, size=0.006)
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].parts['merged'].PartitionEdgeByParam(edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#100 ]', ), ), parameter=0.134028497552285)
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].parts['merged'].deleteFeatures(('Datum pt-1', 
    'Datum pt-2', 'Datum pt-3', 'Datum pt-4', 'Datum pt-5', 'Datum pt-6', 
    'Datum pt-7'))
del mdb.models['square-3d'].parts['merged'].features['Partition edge-1']
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[6], vector=(-0.001, 0.0, 
    0.0))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[17], vector=(0.0, -0.002, 
    0.0))
del mdb.models['square-3d'].parts['merged'].features['Datum pt-2']
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[17], vector=(0.0, 0.0, 
    -0.002))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[17], vector=(0.0, 0.0, 
    0.004))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[15], vector=(0.0, 0.004, 
    0.0))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[15], vector=(0.0, -0.004, 
    0.0))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[6], vector=(0.004, 0.0, 
    0.0))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[6], vector=(-0.004, 0.0, 
    0.0))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[17], vector=(0.0, 0.0, 
    -0.004))
del mdb.models['square-3d'].parts['merged'].features['Datum pt-1']
del mdb.models['square-3d'].parts['merged'].features['Datum pt-2']
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[8], point=
    mdb.models['square-3d'].parts['merged'].datums[26])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[31], point=
    mdb.models['square-3d'].parts['merged'].datums[25])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[33], point=
    mdb.models['square-3d'].parts['merged'].datums[23])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[20], point=
    mdb.models['square-3d'].parts['merged'].datums[24])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[36], point=
    mdb.models['square-3d'].parts['merged'].datums[27])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[31], point=
    mdb.models['square-3d'].parts['merged'].datums[22])
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#80200100 #52 ]', ), ), minSizeFactor=0.1, size=0.002)
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#80200100 #52 ]', ), ), minSizeFactor=0.1, size=0.001)
mdb.models['square-3d'].parts['merged'].Set(edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#80200100 #52 ]', ), ), name='refined_area')
mdb.models['square-3d'].parts['merged'].generateMesh()
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.jobs['heatflux958E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 11 AND AT LEAST ONE OF DEGREES OF FREEDOM 1 THRU 6 MUST BE ACTIVE IN THE MODEL FOR *COUPLED TEMP-DISP. CHECK THE PROCEDURE AND ELEMENT TYPES USED IN THIS MODEL.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE RFL HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST HFL IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST HFL IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\heatflux958E08.odb', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'heatflux958E08'})
mdb.models['square-3d'].parts['merged'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4T, elemLibrary=STANDARD)), regions=(
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#f ]', 
    ), ), ))
# Save by dche145 on 2020_01_04-16.53.37; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.jobs['heatflux958E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\heatflux958E08.odb', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 7516, 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'heatflux958E08', 'memory': 319.0})
mdb.jobs['heatflux958E08']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(MINIMUM_MEMORY, {'minimum_memory': 48.0, 
    'phase': STANDARD_PHASE, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 1, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 2, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 3, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 4, 'stepTime': 1.2, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 5, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 6, 'stepTime': 1.8, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 7, 'stepTime': 2.1, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 8, 'stepTime': 2.4, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.7, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 9, 'stepTime': 2.7, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 10, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.3, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 11, 'stepTime': 3.3, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.6, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 12, 'stepTime': 3.6, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.9, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 13, 'stepTime': 3.9, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.2, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 14, 'stepTime': 4.2, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 15, 'stepTime': 4.5, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.8, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 16, 'stepTime': 4.8, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.200000000000001, 'increment': 17, 'stepTime': 5.0, 
    'step': 1, 'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(JOB_COMPLETED, {
    'time': 'Sat Jan  4 16:55:46 2020', 'jobName': 'heatflux958E08'})
# Save by dche145 on 2020_01_04-17.11.13; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['square-3d'].rootAssembly.features['merged-1']
del mdb.models['square-3d'].parts['merged']
mdb.models['square-3d'].rootAssembly.resumeFeatures(('calcite-1', 'pyrite-1'))
mdb.models['square-3d'].rootAssembly.DatumPointByMidPoint(point1=
    mdb.models['square-3d'].rootAssembly.instances['calcite-1'].vertices[1], 
    point2=
    mdb.models['square-3d'].rootAssembly.instances['calcite-1'].vertices[7])
mdb.models['square-3d'].rootAssembly.DatumPointByMidPoint(point1=
    mdb.models['square-3d'].rootAssembly.instances['pyrite-1'].vertices[1], 
    point2=
    mdb.models['square-3d'].rootAssembly.instances['pyrite-1'].vertices[7])
mdb.models['square-3d'].rootAssembly.translate(instanceList=('pyrite-1', ), 
    vector=(-0.0175, -0.0175, 0.0175))
mdb.models['square-3d'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['square-3d'].rootAssembly.instances['calcite-1'], 
    mdb.models['square-3d'].rootAssembly.instances['pyrite-1']), 
    keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d'].parts['calcite'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d'].parts['calcite'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='fledspar', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d'].parts['merged'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='fledspar', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d'].parts['merged'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='quartz', thicknessAssignment=
    FROM_SECTION)
mdb.models['square-3d'].parts['merged'].PartitionCellByPlanePointNormal(cells=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), normal=mdb.models['square-3d'].parts['merged'].edges[20], point=
    mdb.models['square-3d'].parts['merged'].vertices[14])
mdb.models['square-3d'].parts['merged'].PartitionCellByPlanePointNormal(cells=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), normal=mdb.models['square-3d'].parts['merged'].edges[26], point=
    mdb.models['square-3d'].parts['merged'].vertices[17])
mdb.models['square-3d'].parts['merged'].PartitionCellByPlanePointNormal(cells=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['square-3d'].parts['merged'].edges[5], point=
    mdb.models['square-3d'].parts['merged'].vertices[5])
mdb.models['square-3d'].parts['merged'].PartitionCellByPlanePointNormal(cells=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), normal=mdb.models['square-3d'].parts['merged'].edges[11], point=
    mdb.models['square-3d'].parts['merged'].vertices[10])
mdb.models['square-3d'].parts['merged'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.006)
mdb.models['square-3d'].parts['merged'].generateMesh()
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['merged-1'].cells.getSequenceFromMask(
    mask=('[#20 ]', ), ), 
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#c0000000 #b ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['merged-1'].edges.getSequenceFromMask(
    mask=('[#88180001 #80 ]', ), ), 
    vertices=mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['square-3d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['merged-1'].cells.getSequenceFromMask(
    mask=('[#7f ]', ), ), 
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #f ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['merged-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #fffffff ]', ), ), 
    vertices=mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff ]', ), )))
mdb.models['square-3d'].loads['Load-1'].setValues(region=Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['merged-1'].cells.getSequenceFromMask(
    mask=('[#20 ]', ), )))
del mdb.models['square-3d'].boundaryConditions['BC-2']
del mdb.models['square-3d'].boundaryConditions['BC-3']
del mdb.models['square-3d'].boundaryConditions['BC-4']
mdb.models['square-3d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#3ff79484 ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['merged-1'].edges.getSequenceFromMask(
    mask=('[#10000000 ]', ), )))
mdb.jobs['heatflux958E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 11 AND AT LEAST ONE OF DEGREES OF FREEDOM 1 THRU 6 MUST BE ACTIVE IN THE MODEL FOR *COUPLED TEMP-DISP. CHECK THE PROCEDURE AND ELEMENT TYPES USED IN THIS MODEL.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE RFL HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST HFL IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST HFL IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\heatflux958E08.odb', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'heatflux958E08'})
mdb.models['square-3d'].parts['merged'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4T, elemLibrary=STANDARD)), regions=(
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask((
    '[#7f ]', ), ), ))
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.jobs['heatflux958E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\heatflux958E08.odb', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 7508, 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'heatflux958E08', 'memory': 68.0})
mdb.jobs['heatflux958E08']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 1, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 2, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 3, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 4, 'stepTime': 1.2, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 5, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 6, 'stepTime': 1.8, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 7, 'stepTime': 2.1, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 8, 'stepTime': 2.4, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.7, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 9, 'stepTime': 2.7, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 10, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.3, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 11, 'stepTime': 3.3, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.6, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 12, 'stepTime': 3.6, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.9, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 13, 'stepTime': 3.9, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.2, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 14, 'stepTime': 4.2, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 15, 'stepTime': 4.5, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.8, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 16, 'stepTime': 4.8, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.200000000000001, 'increment': 17, 'stepTime': 5.0, 
    'step': 1, 'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(JOB_COMPLETED, {
    'time': 'Sat Jan  4 17:49:01 2020', 'jobName': 'heatflux958E08'})
del mdb.models['square-3d'].rootAssembly.features['merged-1']
mdb.models['square-3d'].rootAssembly.resumeFeatures(('calcite-1', 'pyrite-1'))
mdb.models['square-3d'].rootAssembly.translate(instanceList=('pyrite-1', ), 
    vector=(0.0175, 0.0175, -0.0175))
mdb.models['square-3d'].rootAssembly.DatumPointByOffset(point=
    mdb.models['square-3d'].rootAssembly.instances['pyrite-1'].vertices[2], 
    vector=(0.0, 0.004, 0.0))
mdb.models['square-3d'].rootAssembly.DatumPointByOffset(point=
    mdb.models['square-3d'].rootAssembly.instances['pyrite-1'].vertices[0], 
    vector=(0.0, 0.0, -0.004))
mdb.models['square-3d'].rootAssembly.DatumPointByOffset(point=
    mdb.models['square-3d'].rootAssembly.instances['pyrite-1'].vertices[7], 
    vector=(0.004, 0.0, 0.0))
del mdb.models['square-3d'].parts['merged']
mdb.models['square-3d'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['square-3d'].rootAssembly.instances['calcite-1'], 
    mdb.models['square-3d'].rootAssembly.instances['pyrite-1']), 
    keepIntersections=ON, name='merged', originalInstances=SUPPRESS)
mdb.models['square-3d'].rootAssembly.deleteFeatures(('Datum pt-1', 
    'Datum pt-2', 'Datum pt-3', 'Datum pt-4', 'Datum pt-5'))
mdb.models['square-3d'].rootAssembly.DatumPointByOffset(point=
    mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices[3], 
    vector=(0.0, 0.004, 0.0))
mdb.models['square-3d'].rootAssembly.DatumPointByOffset(point=
    mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices[3], 
    vector=(0.0, -0.004, 0.0))
mdb.models['square-3d'].rootAssembly.DatumPointByOffset(point=
    mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices[6], 
    vector=(0.0, 0.0, 0.004))
mdb.models['square-3d'].rootAssembly.DatumPointByOffset(point=
    mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices[6], 
    vector=(0.0, 0.0, -0.004))
mdb.models['square-3d'].rootAssembly.DatumPointByOffset(point=
    mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices[5], 
    vector=(0.004, 0.0, 0.0))
mdb.models['square-3d'].rootAssembly.DatumPointByOffset(point=
    mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices[5], 
    vector=(-0.004, 0.0, 0.0))
mdb.models['square-3d'].rootAssembly.deleteFeatures(('Datum pt-1', 
    'Datum pt-2', 'Datum pt-3', 'Datum pt-4', 'Datum pt-5', 'Datum pt-6'))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[6], vector=(0.0, 0.0, 
    0.004))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[6], vector=(0.0, 0.0, 
    -0.004))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[5], vector=(0.004, 0.0, 
    0.0))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[5], vector=(-0.004, 0.0, 
    0.0))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[3], vector=(0.0, 0.004, 
    0.0))
mdb.models['square-3d'].parts['merged'].DatumPointByOffset(point=
    mdb.models['square-3d'].parts['merged'].vertices[3], vector=(0.0, -0.004, 
    0.0))
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[15], point=
    mdb.models['square-3d'].parts['merged'].datums[6])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[13], point=
    mdb.models['square-3d'].parts['merged'].datums[5])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[9], point=
    mdb.models['square-3d'].parts['merged'].datums[3])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[21], point=
    mdb.models['square-3d'].parts['merged'].datums[4])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[16], point=
    mdb.models['square-3d'].parts['merged'].datums[7])
mdb.models['square-3d'].parts['merged'].PartitionEdgeByPoint(edge=
    mdb.models['square-3d'].parts['merged'].edges[13], point=
    mdb.models['square-3d'].parts['merged'].datums[8])
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#10cc200 ]', ), ), size=0.001)
mdb.models['square-3d'].parts['merged'].Set(edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#10cc200 ]', ), ), name='refined_edge')
mdb.models['square-3d'].parts['merged'].Set(edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#10cc200 ]', ), ), name='refined_edge')
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#8301ff ]', ), ), size=0.003)
mdb.models['square-3d'].parts['merged'].Set(edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#8301ff ]', ), ), name='Edge Seeds-1')
mdb.models['square-3d'].parts['merged'].Set(edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#8301ff ]', ), ), name='cube')
mdb.models['square-3d'].parts['merged'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4T, elemLibrary=STANDARD)), regions=(
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), ))
mdb.models['square-3d'].parts['merged'].setMeshControls(elemShape=TET, regions=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), technique=FREE)
mdb.models['square-3d'].parts['merged'].generateMesh()
mdb.models['square-3d'].parts['merged'].deleteMesh(regions=
    mdb.models['square-3d'].parts['merged'].cells.getSequenceFromMask(('[#2 ]', 
    ), ))
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#3e703c00 ]', ), ), size=0.03)
mdb.models['square-3d'].parts['merged'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['square-3d'].parts['merged'].edges.getSequenceFromMask((
    '[#3e703c00 ]', ), ), size=0.01)
mdb.models['square-3d'].parts['merged'].generateMesh()
mdb.models['square-3d'].rootAssembly.regenerate()
mdb.models['square-3d'].loads['Load-1'].setValues(region=Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['merged-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['square-3d'].boundaryConditions['BC-1'].setValues(region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#580 ]', ), )))
mdb.models['square-3d'].XsymmBC(createStepName='Initial', localCsys=None, name=
    'x', region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#48 ]', ), )))
mdb.models['square-3d'].YsymmBC(createStepName='Initial', localCsys=None, name=
    'y', region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#220 ]', ), )))
mdb.models['square-3d'].ZsymmBC(createStepName='Initial', localCsys=None, name=
    'z', region=Region(
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#810 ]', ), )))
mdb.models['square-3d'].predefinedFields['initial_temp'].setValues(region=
    Region(
    cells=mdb.models['square-3d'].rootAssembly.instances['merged-1'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    faces=mdb.models['square-3d'].rootAssembly.instances['merged-1'].faces.getSequenceFromMask(
    mask=('[#fff ]', ), ), 
    edges=mdb.models['square-3d'].rootAssembly.instances['merged-1'].edges.getSequenceFromMask(
    mask=('[#178b9ffb ]', ), ), 
    vertices=mdb.models['square-3d'].rootAssembly.instances['merged-1'].vertices.getSequenceFromMask(
    mask=('[#c32f3 ]', ), )))
mdb.jobs['heatflux958E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE ABSOLUTE ZERO TEMPERATURE HAS NOT BEEN SPECIFIED FOR COMPUTING INTERNAL THERMAL ENERGY USING THE ABSOLUTE ZERO PARAMETER ON THE *PHYSICAL CONSTANTS OPTION. A DEFAULT VALUE OF 0.0000 WILL BE ASSUMED.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\heatflux958E08.odb', 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ1ENG01004', 'handle': 6928, 
    'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'heatflux958E08', 'memory': 186.0})
mdb.jobs['heatflux958E08']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(MINIMUM_MEMORY, {'minimum_memory': 36.0, 
    'phase': STANDARD_PHASE, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 1, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 2, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 3, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 4, 'stepTime': 1.2, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 5, 'stepTime': 1.5, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 6, 'stepTime': 1.8, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 7, 'stepTime': 2.1, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 8, 'stepTime': 2.4, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 2.7, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 9, 'stepTime': 2.7, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 10, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.3, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 11, 'stepTime': 3.3, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.6, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 12, 'stepTime': 3.6, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 3.9, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 13, 'stepTime': 3.9, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.2, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 14, 'stepTime': 4.2, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 15, 'stepTime': 4.5, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 4.8, 'attempts': 1, 
    'timeIncrement': 0.3, 'increment': 16, 'stepTime': 4.8, 'step': 1, 
    'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(STATUS, {'totalTime': 5.0, 'attempts': 1, 
    'timeIncrement': 0.200000000000001, 'increment': 17, 'stepTime': 5.0, 
    'step': 1, 'jobName': 'heatflux958E08', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['heatflux958E08']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'heatflux958E08'})
mdb.jobs['heatflux958E08']._Message(JOB_COMPLETED, {
    'time': 'Sat Jan  4 18:12:48 2020', 'jobName': 'heatflux958E08'})
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=10000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    9.76)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E05', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E05'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E05'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=4176250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    9.52)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux418E07', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux418E07'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux418E07'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=8342500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    9.28)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux834E07', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux834E07'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux834E07'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=12508750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    9.04)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux125E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux125E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux125E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=16675000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    8.8)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux167E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux167E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux167E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=20841250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    8.56)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux208E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux208E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux208E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=25007500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    8.32)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux250E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux250E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux250E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=29173750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    8.08)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux292E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux292E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux292E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=33340000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    7.84)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux333E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux333E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux333E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=37506250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    7.6)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux375E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux375E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux375E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=41672500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    7.36)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux417E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux417E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux417E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=45838750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    7.12)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux458E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux458E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux458E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=50005000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    6.88)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux500E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux500E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux500E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=54171250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    6.64)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux542E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux542E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux542E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=58337500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    6.4)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux583E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux583E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux583E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=62503750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    6.16)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux625E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux625E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux625E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=66670000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    5.92)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux667E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux667E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux667E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=70836250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    5.68)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux708E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux708E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux708E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=75002500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    5.44)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux750E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux750E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux750E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=79168750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    5.2)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux792E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux792E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux792E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=83335000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    4.96)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux833E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux833E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux833E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=87501250000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    4.72)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux875E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux875E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux875E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=91667500000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    4.48)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux917E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux917E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux917E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=95833750000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    4.23999999999999)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux958E08', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux958E08'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux958E08'].waitForCompletion()
mdb.models['square-3d'].loads['Load-1'].setValues(magnitude=100000000000.0)
mdb.models['square-3d'].steps['heat_up'].setValues(initialInc=0.2, timePeriod=
    3.99999999999999)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='square-3d', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='heatflux100E09', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['heatflux100E09'].submit(consistencyChecking=OFF)
mdb.jobs['heatflux100E09'].waitForCompletion()
# Save by dche145 on 2020_01_04-19.48.17; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='test_cons_model')
del mdb.models['3-square-dist-1']
del mdb.models['Model-circle']
del mdb.models['Model-hex']
del mdb.models['Model-pentagon']
del mdb.models['Model-triangle']
# Save by dche145 on 2020_01_09-18.39.26; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['square-3d'].Material(name='feldspar_morh_coulomb')
mdb.models['square-3d'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((40.0, 46.0), ))
mdb.models['square-3d'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((5000000.0, 0.0), ))
mdb.models['square-3d'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['square-3d'].materials['fledspar'].density.setValues(table=((
    2.703e-09, ), ))
mdb.models['square-3d'].materials['fledspar'].elastic.setValues(table=((
    87020.0, 0.29), ))
mdb.models['square-3d'].materials['fledspar'].specificHeat.setValues(table=((
    860.0, 50.0), (945.0, 200.0), (1054.0, 400.0), (1090.0, 500.0), (1100.0, 
    600.0)))
mdb.models['square-3d'].materials['quartz'].density.setValues(table=((2.65e-09, 
    ), ))
mdb.models['square-3d'].materials['quartz'].conductivity.setValues(table=((8.0, 
    0.0), (6.5, 100.0), (5.5, 200.0), (4.5, 300.0), (4.0, 400.0), (3.8, 500.0), 
    (3.7, 550.0), (3.5, 575.0), (3.5, 580.0), (3.8, 600.0), (3.9, 700.0), (4.0, 
    800.0), (4.0, 800.0)))
mdb.models['square-3d'].materials['quartz'].elastic.setValues(table=((100000.0, 
    0.09, 0.0), (95000.0, 0.085, 100.0), (90000.0, 0.08, 200.0), (85000.0, 
    0.05, 300.0), (83000.0, 0.0, 400.0), (80000.0, -0.05, 500.0), (75000.0, 
    -0.1, 550.0), (60000.0, -0.2, 575.0), (80000.0, -0.3, 580.0), (95000.0, 
    0.2, 600.0), (100000.0, 0.25, 700.0), (105000.0, 0.25, 800.0)))
mdb.models['square-3d'].materials['quartz'].expansion.setValues(table=((1e-05, 
    1.0), (1.25e-05, 100.0), (1.26e-05, 200.0), (1.27e-05, 300.0), (1.28e-05, 
    400.0), (1.5e-05, 500.0), (1.75e-05, 550.0), (2e-05, 575.0), (2.5e-05, 
    580.0), (2.25e-05, 600.0), (2.1e-05, 700.0), (2e-05, 800.0)))
mdb.models['square-3d'].materials['quartz'].specificHeat.setValues(table=((
    700.0, 1.0), (810.0, 100.0), (910.0, 200.0), (1005.0, 300.0), (1100.0, 
    400.0), (1190.0, 500.0), (1250.0, 550.0), (1400.0, 575.0), (1050.0, 580.0), 
    (1070.0, 600.0), (1080.0, 700.0), (1090.0, 800.0)))
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Expansion(table=
    ((1.46, ), ))
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Expansion(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].SpecificHeat(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Conductivity(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Density(table=
    ((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Elastic(table=
    ((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Expansion(table=
    ((1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].SpecificHeat(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Conductivity(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Density(table=((
    1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Elastic(table=((
    1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].MohrCoulombPlasticity(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].expansion.setValues(
    table=((3.6e-06, 25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 
    319.85), (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (
    6.58e-06, 719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 
    1000)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].specificHeat.setValues(
    table=((860, 50), (945, 200), (1054, 400), (1090, 500)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].conductivity.setValues(
    1.46)
#* TypeError: arg1; found float, expecting ISOTROPIC, ORTHOTROPIC or ANISOTROPIC
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].conductivity.setValues(
    table=((1.56, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].conductivity.setValues(
    table=((1.56, ), ))
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Expansion(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].SpecificHeat(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Conductivity(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Density(table=
    ((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Elastic(table=
    ((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Expansion(table=
    ((1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].SpecificHeat(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Conductivity(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Density(table=((
    1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Elastic(table=((
    1, ), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].MohrCoulombPlasticity(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].expansion.setValues(
    table=((3.6e-06, 25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 
    319.85), (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (
    6.58e-06, 719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 
    1000)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].specificHeat.setValues(
    table=((860, 50), (945, 200), (1054, 400), (1090, 500)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].conductivity.setValues(
    table=((1.46, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].density.setValues(
    table=((2.703e-09, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].elastic.setValues(
    table=((87020.0, 0.29), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((40.0, 46.0), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((5000000.0, 0.0), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].conductivity.setValues(
    table=((8.0, 0.0), (6.5, 100.0), (5.5, 200.0), (4.5, 300.0), (4.0, 400.0), 
    (3.8, 500.0), (3.7, 550.0), (3.5, 575.0), (3.5, 580.0), (3.8, 600.0), (3.9, 
    700.0), (4.0, 800.0), (4.0, 800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].elastic.setValues(
    table=((100000.0, 0.09, 0.0), (95000.0, 0.085, 100.0), (90000.0, 0.08, 
    200.0), (85000.0, 0.05, 300.0), (83000.0, 0.0, 400.0), (80000.0, -0.05, 
    500.0), (75000.0, -0.1, 550.0), (60000.0, -0.2, 575.0), (80000.0, -0.3, 
    580.0), (95000.0, 0.2, 600.0), (100000.0, 0.25, 700.0), (105000.0, 0.25, 
    800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].expansion.setValues(
    table=((1e-05, 1.0), (1.25e-05, 100.0), (1.26e-05, 200.0), (1.27e-05, 
    300.0), (1.28e-05, 400.0), (1.5e-05, 500.0), (1.75e-05, 550.0), (2e-05, 
    575.0), (2.5e-05, 580.0), (2.25e-05, 600.0), (2.1e-05, 700.0), (2e-05, 
    800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].specificHeat.setValues(
    table=((700.0, 1.0), (810.0, 100.0), (910.0, 200.0), (1005.0, 300.0), (
    1100.0, 400.0), (1190.0, 500.0), (1250.0, 550.0), (1400.0, 575.0), (1050.0, 
    580.0), (1070.0, 600.0), (1080.0, 700.0), (1090.0, 800.0)))
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Expansion(
    table=((3.6e-06, 25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 
    319.85), (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (
    6.58e-06, 719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 
    1000)))
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Expansion(
    table=((3.6e-06, 25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 
    319.85), (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (
    6.58e-06, 719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 
    1000)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].SpecificHeat(
    table=((860, 50), (945, 200), (1054, 400), (1090, 500)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Conductivity(
    table=((1.46, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Density(table=
    ((2.703e-09, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Elastic(table=
    ((87020.0, 0.29), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((40.0, 46.0), ))
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Expansion(
    table=((3.6e-06, 25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 
    319.85), (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (
    6.58e-06, 719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 
    1000)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].SpecificHeat(
    table=((860, 50), (945, 200), (1054, 400), (1090, 500)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Conductivity(
    table=((1.46, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Density(table=
    ((2.703e-09, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Elastic(table=
    ((87020.0, 0.29), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((40.0, 46.0), ))
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Expansion(
    table=((3.6e-06, 25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 
    319.85), (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (
    6.58e-06, 719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 
    1000)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].SpecificHeat(
    table=((860, 50), (945, 200), (1054, 400), (1090, 500)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Conductivity(
    table=((1.46, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Density(table=
    ((2.703e-09, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Elastic(table=
    ((87020.0, 0.29), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((40.0, 46.0), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((1, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((5000000.0, 0.0), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Conductivity(
    table=((8.0, 0.0), (6.5, 100.0), (5.5, 200.0), (4.5, 300.0), (4.0, 400.0), 
    (3.8, 500.0), (3.7, 550.0), (3.5, 575.0), (3.5, 580.0), (3.8, 600.0), (3.9, 
    700.0), (4.0, 800.0), (4.0, 800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Elastic(table=((
    100000.0, 0.09, 0.0), (95000.0, 0.085, 100.0), (90000.0, 0.08, 200.0), (
    85000.0, 0.05, 300.0), (83000.0, 0.0, 400.0), (80000.0, -0.05, 500.0), (
    75000.0, -0.1, 550.0), (60000.0, -0.2, 575.0), (80000.0, -0.3, 580.0), (
    95000.0, 0.2, 600.0), (100000.0, 0.25, 700.0), (105000.0, 0.25, 800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Expansion(table=
    ((1e-05, 1.0), (1.25e-05, 100.0), (1.26e-05, 200.0), (1.27e-05, 300.0), (
    1.28e-05, 400.0), (1.5e-05, 500.0), (1.75e-05, 550.0), (2e-05, 575.0), (
    2.5e-05, 580.0), (2.25e-05, 600.0), (2.1e-05, 700.0), (2e-05, 800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].SpecificHeat(
    table=((700.0, 1.0), (810.0, 100.0), (910.0, 200.0), (1005.0, 300.0), (
    1100.0, 400.0), (1190.0, 500.0), (1250.0, 550.0), (1400.0, 575.0), (1050.0, 
    580.0), (1070.0, 600.0), (1080.0, 700.0), (1090.0, 800.0)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.setValues(
    table=((43.53, 46.0), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.mohrCoulombHardening.setValues(
    table=((28.4, 0.0), (28.4, 0.001), (28.4, 0.01), (28.4, 0.1), (28.4, 1.0)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.tensionCutOff.setValues(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['test_cons_model'].HomogeneousSolidSection(material=
    'feldspar_morh_coulomb', name='feldspar_morh_columb', thickness=None)
mdb.models['square-3d'].materials['quartz'].conductivity.setValues(table=((8.0, 
    1.0), (6.5, 100.0), (5.5, 200.0), (4.5, 300.0), (4.0, 400.0), (3.8, 500.0), 
    (3.7, 550.0), (3.5, 575.0), (3.5, 580.0), (3.8, 600.0), (3.9, 700.0), (4.0, 
    800.0), (4.0, 800.0)))
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].Material(name='feldspar')
mdb.models['test_cons_model'].Material(name='quartz')
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Expansion(
    table=((3.6e-06, 25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 
    319.85), (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (
    6.58e-06, 719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 
    1000)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].SpecificHeat(
    table=((860, 50), (945, 200), (1054, 400), (1090, 500)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Conductivity(
    table=((1.46, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Density(table=
    ((2.703e-09, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Elastic(table=
    ((87020.0, 0.29), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((43.53, 46.0), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((28.4, 0.0), (28.4, 0.001), (28.4, 0.01), (28.4, 0.1), (28.4, 1)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Conductivity(
    table=((8.0, 1.0), (6.5, 100.0), (5.5, 200.0), (4.5, 300.0), (4.0, 400.0), 
    (3.8, 500.0), (3.7, 550.0), (3.5, 575.0), (3.5, 580.0), (3.8, 600.0), (3.9, 
    700.0), (4.0, 800.0), (4.0, 800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Elastic(table=((
    100000.0, 0.09, 0.0), (95000.0, 0.085, 100.0), (90000.0, 0.08, 200.0), (
    85000.0, 0.05, 300.0), (83000.0, 0.0, 400.0), (80000.0, -0.05, 500.0), (
    75000.0, -0.1, 550.0), (60000.0, -0.2, 575.0), (80000.0, -0.3, 580.0), (
    95000.0, 0.2, 600.0), (100000.0, 0.25, 700.0), (105000.0, 0.25, 800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Expansion(table=
    ((1e-05, 1.0), (1.25e-05, 100.0), (1.26e-05, 200.0), (1.27e-05, 300.0), (
    1.28e-05, 400.0), (1.5e-05, 500.0), (1.75e-05, 550.0), (2e-05, 575.0), (
    2.5e-05, 580.0), (2.25e-05, 600.0), (2.1e-05, 700.0), (2e-05, 800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].SpecificHeat(
    table=((700.0, 1.0), (810.0, 100.0), (910.0, 200.0), (1005.0, 300.0), (
    1100.0, 400.0), (1190.0, 500.0), (1250.0, 550.0), (1400.0, 575.0), (1050.0, 
    580.0), (1070.0, 600.0), (1080.0, 700.0), (1090.0, 800.0)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].MohrCoulombPlasticity(
    table=((43.53, 46.0), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((28.4, 0.0), (28.4, 0.001), (28.4, 0.01), (28.4, 0.1), (28.4, 1)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['test_cons_model'].HomogeneousSolidSection(material='feldspar', 
    name='feldspar', thickness=None)
mdb.models['test_cons_model'].HomogeneousSolidSection(material='quartz', name=
    'quartz', thickness=None)
mdb.models['test_cons_model'].HomogeneousSolidSection(material=
    'feldspar_morh_coulomb', name='feldspar_morh_coulomb', thickness=None)
mdb.models['test_cons_model'].HomogeneousSolidSection(material=
    'quartz_morh_coulomb', name='quartz_morh_coulomb', thickness=None)
mdb.models['test_cons_model'].Material(name='temp')
mdb.models['test_cons_model'].materials['temp'].Elastic(table=((1.0, 1.0, 1.0), 
    (2.0, 2.0, 2.0), (3.0, 3.0, 3.0), (4.0, 4.0, 4.0)), temperatureDependency=
    ON)
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='quartz_morh_coulomb')
mdb.models['test_cons_model'].Material(name='feldspar')
mdb.models['test_cons_model'].Material(name='quartz')
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Expansion(
    table=((3.6e-06, 25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 
    319.85), (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (
    6.58e-06, 719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 
    1000)), temperatureDependency=ON)
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].SpecificHeat(
    table=((860, 50), (945, 200), (1054, 400), (1090, 500)), 
    temperatureDependency=ON)
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Conductivity(
    table=((1.46, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Density(table=
    ((2.703e-09, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Elastic(table=
    ((87020.0, 0.29), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((43.53, 46.0), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((28.4, 0.0), (28.4, 0.001), (28.4, 0.01), (28.4, 1)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Conductivity(
    table=((8.0, 1.0), (6.5, 100.0), (5.5, 200.0), (4.5, 300.0), (4.0, 400.0), 
    (3.8, 500.0), (3.7, 550.0), (3.5, 575.0), (3.5, 580.0), (3.8, 600.0), (3.9, 
    700.0), (4.0, 800.0), (4.0, 800.0)), temperatureDependency=ON)
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Elastic(table=((
    100000.0, 0.09, 0.0), (95000.0, 0.085, 100.0), (90000.0, 0.08, 200.0), (
    85000.0, 0.05, 300.0), (83000.0, 0.0, 400.0), (80000.0, -0.05, 500.0), (
    75000.0, -0.1, 550.0), (60000.0, -0.2, 575.0), (80000.0, -0.3, 580.0), (
    95000.0, 0.2, 600.0), (100000.0, 0.25, 700.0), (105000.0, 0.25, 800.0)), 
    temperatureDependency=ON)
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].Expansion(table=
    ((1e-05, 1.0), (1.25e-05, 100.0), (1.26e-05, 200.0), (1.27e-05, 300.0), (
    1.28e-05, 400.0), (1.5e-05, 500.0), (1.75e-05, 550.0), (2e-05, 575.0), (
    2.5e-05, 580.0), (2.25e-05, 600.0), (2.1e-05, 700.0), (2e-05, 800.0)), 
    temperatureDependency=ON)
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].SpecificHeat(
    table=((700.0, 1.0), (810.0, 100.0), (910.0, 200.0), (1005.0, 300.0), (
    1100.0, 400.0), (1190.0, 500.0), (1250.0, 550.0), (1400.0, 575.0), (1050.0, 
    580.0), (1070.0, 600.0), (1080.0, 700.0), (1090.0, 800.0)), 
    temperatureDependency=ON)
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].MohrCoulombPlasticity(
    table=((43.53, 46.0), ))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((28.4, 0.0), (28.4, 0.001), (28.4, 0.01), (28.4, 1)))
mdb.models['test_cons_model'].materials['quartz_morh_coulomb'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['test_cons_model'].HomogeneousSolidSection(material='feldspar', 
    name='feldspar', thickness=None)
mdb.models['test_cons_model'].HomogeneousSolidSection(material='quartz', name=
    'quartz', thickness=None)
mdb.models['test_cons_model'].HomogeneousSolidSection(material=
    'feldspar_morh_coulomb', name='feldspar_morh_coulomb', thickness=None)
mdb.models['test_cons_model'].HomogeneousSolidSection(material=
    'quartz_morh_coulomb', name='quartz_morh_coulomb', thickness=None)
mdb.models['test_cons_model'].parts['cube'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['test_cons_model'].parts['cube'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='feldspar_morh_coulomb', 
    thicknessAssignment=FROM_SECTION)
mdb.models['test_cons_model'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['test_cons_model'].rootAssembly.Instance(dependent=ON, name='cube-1'
    , part=mdb.models['test_cons_model'].parts['cube'])
mdb.models['test_cons_model'].parts['cube'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.0)
mdb.models['test_cons_model'].parts['cube'].generateMesh()
mdb.models['test_cons_model'].rootAssembly.regenerate()
mdb.models['test_cons_model'].EncastreBC(createStepName='Initial', localCsys=
    None, name='BC-1', region=Region(
    faces=mdb.models['test_cons_model'].rootAssembly.instances['cube-1'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )))
mdb.models['test_cons_model'].StaticStep(name='Step-1', previous='Initial')
mdb.models['test_cons_model'].ConcentratedForce(cf1=50.0, cf3=50.0, 
    createStepName='Step-1', distributionType=UNIFORM, field='', localCsys=None
    , name='Load-1', region=Region(
    vertices=mdb.models['test_cons_model'].rootAssembly.instances['cube-1'].vertices.getSequenceFromMask(
    mask=('[#80 ]', ), )))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='test_cons_model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='cons_mc', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['cons_mc'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE INDEPENDENT VARIABLES MUST BE ARRANGED IN ASCENDING ORDER', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*SPECIFIC HEAT REQUIRES THE USE OF *DENSITY', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 1.0000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 2.0000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 3.0000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 4.0000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc.odb', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'cons_mc'})
del mdb.models['test_cons_model'].materials['temp']
del mdb.models['test_cons_model'].sections['feldspar_morh_columb']
mdb.jobs['cons_mc'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['cons_mc']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE INDEPENDENT VARIABLES MUST BE ARRANGED IN ASCENDING ORDER', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*SPECIFIC HEAT REQUIRES THE USE OF *DENSITY', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc.odb', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'cons_mc'})
# Save by dche145 on 2020_01_10-13.15.19; build 2019 2018_09_25-04.41.51 157541
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['test_cons_model'].materials['quartz']
del mdb.models['test_cons_model'].materials['quartz_morh_coulomb']
del mdb.models['test_cons_model'].materials['feldspar']
del mdb.models['test_cons_model'].sections['feldspar']
del mdb.models['test_cons_model'].sections['quartz']
del mdb.models['test_cons_model'].sections['quartz_morh_coulomb']
mdb.jobs['cons_mc'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['cons_mc']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc.odb', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 7688, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'cons_mc', 'memory': 9.0})
mdb.jobs['cons_mc']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(MINIMUM_MEMORY, {'minimum_memory': 8.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:16:36 2020', 'jobName': 'cons_mc'})
mdb.jobs['cons_mc'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc.odb', 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 8228, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'cons_mc', 'memory': 26.0})
mdb.jobs['cons_mc']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'cons_mc', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc'})
mdb.jobs['cons_mc']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:16:52 2020', 'jobName': 'cons_mc'})
mdb.models['test_cons_model'].Material(name='feldspar_morh_coulomb')
mdb.models['test_cons_model'].Material(name='feldspar')
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Expansion(
    table=((3.6e-06, 25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 
    319.85), (5.89e-06, 419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (
    6.58e-06, 719.85), (6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 
    1000)), temperatureDependency=ON)
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].SpecificHeat(
    table=((860, 50), (945, 200), (1054, 400), (1090, 500)), 
    temperatureDependency=ON)
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Conductivity(
    table=((1.46, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Density(table=
    ((2.703e-09, ), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].Elastic(table=
    ((87020.0, 0.29), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].MohrCoulombPlasticity(
    table=((43.53, 46.0), ))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((28.4, 0.0), (28.4, 0.001), (28.4, 0.01), (28.4, 1)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['test_cons_model'].materials['feldspar'].Expansion(table=((3.6e-06, 
    25), (4.6e-06, 119.85), (5.19e-06, 219.85), (5.59e-06, 319.85), (5.89e-06, 
    419.85), (6.14e-06, 519.85), (6.37e-06, 619.85), (6.58e-06, 719.85), (
    6.78e-06, 819.85), (6.97e-06, 919.85), (7.12e-06, 1000)), 
    temperatureDependency=ON)
mdb.models['test_cons_model'].materials['feldspar'].SpecificHeat(table=((860, 
    50), (945, 200), (1054, 400), (1090, 500)), temperatureDependency=ON)
mdb.models['test_cons_model'].materials['feldspar'].Conductivity(table=((1.46, 
    ), ))
mdb.models['test_cons_model'].materials['feldspar'].Density(table=((2.703e-09, 
    ), ))
mdb.models['test_cons_model'].materials['feldspar'].Elastic(table=((87020.0, 
    0.29), ))
mdb.models['test_cons_model'].HomogeneousSolidSection(material='feldspar', 
    name='feldspar', thickness=None)
mdb.models['test_cons_model'].HomogeneousSolidSection(material=
    'feldspar_morh_coulomb', name='feldspar_morh_coulomb', thickness=None)
del mdb.models['test_cons_model'].parts['cube'].sectionAssignments[0]
mdb.models['test_cons_model'].parts['cube'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['test_cons_model'].parts['cube'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='feldspar', thicknessAssignment=
    FROM_SECTION)
mdb.models['test_cons_model'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='test_cons_model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='cons_wo_mc', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['cons_wo_mc'].submit(consistencyChecking=OFF)
mdb.jobs['cons_wo_mc']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_wo_mc.odb', 
    'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 3064, 'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'cons_wo_mc', 'memory': 26.0})
mdb.jobs['cons_wo_mc']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'cons_wo_mc', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_wo_mc']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_mc'})
mdb.jobs['cons_wo_mc']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:23:17 2020', 'jobName': 'cons_wo_mc'})
mdb.models['test_cons_model'].loads['Load-1'].setValues(cf1=50000.0, 
    distributionType=UNIFORM, field='')
mdb.models['test_cons_model'].loads['Load-1'].setValues(cf3=0.0, 
    distributionType=UNIFORM, field='')
mdb.models['test_cons_model'].loads['Load-1'].setValues(cf3=50000.0, 
    distributionType=UNIFORM, field='')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='test_cons_model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='cons_wo_mc_high', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['cons_wo_mc_high'].submit(consistencyChecking=OFF)
mdb.jobs['cons_wo_mc_high']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_wo_mc_high.odb', 
    'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 3804, 
    'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'cons_wo_mc_high', 'memory': 26.0})
mdb.jobs['cons_wo_mc_high']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'cons_wo_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_wo_mc_high']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:26:25 2020', 'jobName': 'cons_wo_mc_high'})
mdb.models['test_cons_model'].parts['cube'].sectionAssignments[0].setValues(
    sectionName='feldspar_morh_coulomb')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='test_cons_model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='cons_mc_high', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['cons_mc_high'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc_high']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc_high.odb', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 3000, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'cons_mc_high', 'memory': 26.0})
mdb.jobs['cons_mc_high']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 226 POINTS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'cons_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 126 POINTS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'cons_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 13 POINTS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'cons_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 1 POINTS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'cons_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'cons_mc_high', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['cons_mc_high']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high'})
mdb.models['test_cons_model'].loads['Load-1'].setValues(cf3=500.0, 
    distributionType=UNIFORM, field='')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='test_cons_model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='cons_mc_high_shear', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['cons_mc_high_shear'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc_high_shear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc_high_shear.odb', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 5348, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_high_shear', 'memory': 26.0})
mdb.jobs['cons_mc_high_shear']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16384.0, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 233 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 130 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 14 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 3U', 'timeIncrement': 0.0625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 1 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 4U', 'timeIncrement': 0.015625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 5U', 'timeIncrement': 0.00390625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['cons_mc_high_shear']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high_shear'})
mdb.models['test_cons_model'].parts['cube'].sectionAssignments[0].setValues(
    sectionName='feldspar')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='test_cons_model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='cons_wo_high_shear', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['cons_wo_high_shear'].submit(consistencyChecking=OFF)
mdb.jobs['cons_wo_high_shear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 
    'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_wo_high_shear.odb', 
    'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 3996, 
    'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'cons_wo_high_shear', 'memory': 26.0})
mdb.jobs['cons_wo_high_shear']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16384.0, 
    'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'cons_wo_high_shear', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_wo_high_shear']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_high_shear'})
mdb.jobs['cons_wo_high_shear']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:29:11 2020', 'jobName': 'cons_wo_high_shear'})
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.mohrCoulombHardening.setValues(
    table=((100.0, 0.0), (100.0, 0.001), (100.0, 0.01), (100.0, 1.0)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.tensionCutOff.setValues(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.jobs['cons_mc_high'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc_high_shear'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc_high']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc_high.odb', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high_shear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 3012, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc_high_shear.odb', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'cons_mc_high', 'memory': 26.0})
mdb.jobs['cons_mc_high']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'cons_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high_shear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:33:45 2020', 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high_shear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 7020, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_high_shear', 'memory': 26.0})
mdb.jobs['cons_mc_high_shear']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16384.0, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:33:48 2020', 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_wo_mc_high'].submit(consistencyChecking=OFF)
mdb.jobs['cons_wo_mc_high']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_wo_mc_high.odb', 
    'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 6756, 
    'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'cons_wo_mc_high', 'memory': 26.0})
mdb.jobs['cons_wo_mc_high']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'cons_wo_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_wo_mc_high']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_mc_high'})
mdb.jobs['cons_wo_mc_high']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:34:12 2020', 'jobName': 'cons_wo_mc_high'})
mdb.models['test_cons_model'].parts['cube'].sectionAssignments[0].setValues(
    sectionName='feldspar_morh_coulomb')
mdb.jobs['cons_mc_high_shear'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc_high_shear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc_high_shear.odb', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 8504, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_high_shear', 'memory': 26.0})
mdb.jobs['cons_mc_high_shear']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16384.0, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 149 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 17 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 1 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 3U', 'timeIncrement': 0.0625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 4U', 'timeIncrement': 0.015625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.00390625, 
    'attempts': 5, 'timeIncrement': 0.00390625, 'increment': 1, 
    'stepTime': 0.00390625, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0078125, 
    'attempts': 1, 'timeIncrement': 0.00390625, 'increment': 2, 
    'stepTime': 0.0078125, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.01171875, 
    'attempts': 1, 'timeIncrement': 0.00390625, 'increment': 3, 
    'stepTime': 0.01171875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.01171875, 
    'attempts': ' 1U', 'timeIncrement': 0.00390625, 'increment': 4, 
    'stepTime': 0.01171875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.013671875, 
    'attempts': 2, 'timeIncrement': 0.001953125, 'increment': 4, 
    'stepTime': 0.013671875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': 1, 'timeIncrement': 0.001953125, 'increment': 5, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 1 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': ' 1U', 'timeIncrement': 0.001953125, 'increment': 6, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': ' 2U', 'timeIncrement': 0.00048828125, 'increment': 6, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': ' 3U', 'timeIncrement': 0.000244140625, 'increment': 6, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': ' 4U', 'timeIncrement': 6.103515625e-05, 'increment': 6, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': ' 5U', 'timeIncrement': 1.52587890625e-05, 'increment': 6, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['cons_mc_high_shear']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high_shear'})
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.mohrCoulombHardening.setValues(
    table=((100.0, 0.0), (2710.0, 1.0)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.tensionCutOff.setValues(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.jobs['cons_mc_high_shear'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc_high_shear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc_high_shear.odb', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 5900, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_high_shear', 'memory': 26.0})
mdb.jobs['cons_mc_high_shear']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16384.0, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 149 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 17 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 1 POINTS', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 3U', 'timeIncrement': 0.0625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 4U', 'timeIncrement': 0.015625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'cons_mc_high_shear', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0078125, 
    'attempts': 5, 'timeIncrement': 0.0078125, 'increment': 1, 
    'stepTime': 0.0078125, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': 1, 'timeIncrement': 0.0078125, 'increment': 2, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0234375, 
    'attempts': 1, 'timeIncrement': 0.0078125, 'increment': 3, 
    'stepTime': 0.0234375, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.03125, 
    'attempts': 1, 'timeIncrement': 0.0078125, 'increment': 4, 
    'stepTime': 0.03125, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0390625, 
    'attempts': 1, 'timeIncrement': 0.0078125, 'increment': 5, 
    'stepTime': 0.0390625, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.046875, 
    'attempts': 1, 'timeIncrement': 0.0078125, 'increment': 6, 
    'stepTime': 0.046875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.046875, 
    'attempts': ' 1U', 'timeIncrement': 0.0078125, 'increment': 7, 
    'stepTime': 0.046875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.05078125, 
    'attempts': 2, 'timeIncrement': 0.00390625, 'increment': 7, 
    'stepTime': 0.05078125, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.0546875, 
    'attempts': 1, 'timeIncrement': 0.00390625, 'increment': 8, 
    'stepTime': 0.0546875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.05859375, 
    'attempts': 1, 'timeIncrement': 0.00390625, 'increment': 9, 
    'stepTime': 0.05859375, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.05859375, 
    'attempts': ' 1U', 'timeIncrement': 0.00390625, 'increment': 10, 
    'stepTime': 0.05859375, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.060546875, 
    'attempts': 2, 'timeIncrement': 0.001953125, 'increment': 10, 
    'stepTime': 0.060546875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.060546875, 
    'attempts': ' 1U', 'timeIncrement': 0.001953125, 'increment': 11, 
    'stepTime': 0.060546875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.060546875, 
    'attempts': ' 2U', 'timeIncrement': 0.0009765625, 'increment': 11, 
    'stepTime': 0.060546875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.060546875, 
    'attempts': ' 3U', 'timeIncrement': 0.00048828125, 'increment': 11, 
    'stepTime': 0.060546875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.060546875, 
    'attempts': ' 4U', 'timeIncrement': 0.0001220703125, 'increment': 11, 
    'stepTime': 0.060546875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high_shear']._Message(STATUS, {'totalTime': 0.060546875, 
    'attempts': ' 5U', 'timeIncrement': 3.0517578125e-05, 'increment': 11, 
    'stepTime': 0.060546875, 'step': 1, 'jobName': 'cons_mc_high_shear', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high_shear']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high_shear'})
mdb.jobs['cons_mc_high_shear']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high_shear'})
mdb.models['test_cons_model'].loads['Load-1'].setValues(cf3=50000.0, 
    distributionType=UNIFORM, field='')
mdb.jobs['cons_mc_high'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc_high']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc_high.odb', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 812, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'cons_mc_high', 'memory': 26.0})
mdb.jobs['cons_mc_high']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16384.0, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 137 POINTS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'cons_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 15 POINTS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'cons_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 1 POINTS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'cons_mc_high', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': 4, 'timeIncrement': 0.015625, 'increment': 1, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 1 POINTS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': ' 1U', 'timeIncrement': 0.015625, 'increment': 2, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['cons_mc_high']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE PLASTICITY/CREEP/CONNECTOR FRICTION ALGORITHM DID NOT CONVERGE AT 1 POINTS', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.015625, 
    'attempts': ' 2U', 'timeIncrement': 0.00390625, 'increment': 2, 
    'stepTime': 0.015625, 'step': 1, 'jobName': 'cons_mc_high', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0166015625, 
    'attempts': 3, 'timeIncrement': 0.0009765625, 'increment': 2, 
    'stepTime': 0.0166015625, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.017578125, 
    'attempts': 1, 'timeIncrement': 0.0009765625, 'increment': 3, 
    'stepTime': 0.017578125, 'step': 1, 'jobName': 'cons_mc_high', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0185546875, 
    'attempts': 1, 'timeIncrement': 0.0009765625, 'increment': 4, 
    'stepTime': 0.0185546875, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.02001953125, 
    'attempts': 1, 'timeIncrement': 0.00146484375, 'increment': 5, 
    'stepTime': 0.02001953125, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.022216796875, 
    'attempts': 1, 'timeIncrement': 0.002197265625, 'increment': 6, 
    'stepTime': 0.022216796875, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0255126953125, 
    'attempts': 1, 'timeIncrement': 0.0032958984375, 'increment': 7, 
    'stepTime': 0.0255126953125, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.03045654296875, 
    'attempts': 1, 'timeIncrement': 0.00494384765625, 'increment': 8, 
    'stepTime': 0.03045654296875, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.037872314453125, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 9, 
    'stepTime': 0.037872314453125, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.0452880859375, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 10, 
    'stepTime': 0.0452880859375, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.052703857421875, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 11, 
    'stepTime': 0.052703857421875, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.06011962890625, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 12, 
    'stepTime': 0.06011962890625, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.067535400390625, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 13, 
    'stepTime': 0.067535400390625, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.074951171875, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 14, 
    'stepTime': 0.074951171875, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.082366943359375, 
    'attempts': 1, 'timeIncrement': 0.007415771484375, 'increment': 15, 
    'stepTime': 0.082366943359375, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.082366943359375, 
    'attempts': ' 1U', 'timeIncrement': 0.007415771484375, 'increment': 16, 
    'stepTime': 0.082366943359375, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.082366943359375, 
    'attempts': ' 2U', 'timeIncrement': 0.0037078857421875, 'increment': 16, 
    'stepTime': 0.082366943359375, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.082366943359375, 
    'attempts': ' 3U', 'timeIncrement': 0.000926971435546875, 'increment': 16, 
    'stepTime': 0.082366943359375, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.082366943359375, 
    'attempts': ' 4U', 'timeIncrement': 0.000231742858886719, 'increment': 16, 
    'stepTime': 0.082366943359375, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high']._Message(STATUS, {'totalTime': 0.082366943359375, 
    'attempts': ' 5U', 'timeIncrement': 5.79357147216797e-05, 'increment': 16, 
    'stepTime': 0.082366943359375, 'step': 1, 'jobName': 'cons_mc_high', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['cons_mc_high']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high'})
mdb.jobs['cons_mc_high']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'cons_mc_high'})
mdb.models['test_cons_model'].loads['Load-1'].setValues(cf1=500.0, cf3=50.0, 
    distributionType=UNIFORM, field='')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='test_cons_model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='cons_mc_low_shear', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['cons_mc_low_shear'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc_low_shear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc_low_shear.odb', 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 3104, 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_low_shear', 'memory': 26.0})
mdb.jobs['cons_mc_low_shear']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16384.0, 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'cons_mc_low_shear', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['cons_mc_low_shear']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:41:57 2020', 'jobName': 'cons_mc_low_shear'})
mdb.models['test_cons_model'].parts['cube'].sectionAssignments[0].setValues(
    sectionName='feldspar')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='test_cons_model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='cons_wo_mc_low_shear', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['cons_wo_mc_low_shear'].submit(consistencyChecking=OFF)
mdb.jobs['cons_wo_mc_low_shear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 
    'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_wo_mc_low_shear.odb', 
    'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 200, 
    'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'cons_wo_mc_low_shear', 
    'memory': 26.0})
mdb.jobs['cons_wo_mc_low_shear']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16384.0, 
    'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'cons_wo_mc_low_shear', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['cons_wo_mc_low_shear']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_wo_mc_low_shear'})
mdb.jobs['cons_wo_mc_low_shear']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:43:03 2020', 'jobName': 'cons_wo_mc_low_shear'})
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.mohrCoulombHardening.setValues(
    table=((100.0, 0.0), (100.0, 1.0)))
mdb.models['test_cons_model'].materials['feldspar_morh_coulomb'].mohrCoulombPlasticity.tensionCutOff.setValues(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['test_cons_model'].parts['cube'].sectionAssignments[0].setValues(
    sectionName='feldspar_morh_coulomb')
mdb.jobs['cons_mc_low_shear'].submit(consistencyChecking=OFF)
mdb.jobs['cons_mc_low_shear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 0, 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 46.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 41.372 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\dche145\\AppData\\Local\\Temp\\2\\cons_mc_low_shear.odb', 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MVAZ2ENG01004', 'handle': 9164, 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_low_shear', 'memory': 26.0})
mdb.jobs['cons_mc_low_shear']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16384.0, 
    'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'cons_mc_low_shear', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['cons_mc_low_shear']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'cons_mc_low_shear'})
mdb.jobs['cons_mc_low_shear']._Message(JOB_COMPLETED, {
    'time': 'Fri Jan 10 13:46:46 2020', 'jobName': 'cons_mc_low_shear'})
# Save by dche145 on 2020_01_10-13.50.30; build 2019 2018_09_25-04.41.51 157541
# Save by dche145 on 2020_01_10-15.04.30; build 2019 2018_09_25-04.41.51 157541
